
E-Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009634  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  080097d0  080097d0  000197d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c78  08009c78  00020244  2**0
                  CONTENTS
  4 .ARM          00000000  08009c78  08009c78  00020244  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c78  08009c78  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08009c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000244  08009ec4  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  08009ec4  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140f8  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002654  00000000  00000000  0003436c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00037990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c85  00000000  00000000  00038868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef6b  00000000  00000000  0003b4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd8bb  00000000  00000000  0004a458  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117d13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c5c  00000000  00000000  00117d90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000244 	.word	0x20000244
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080097b4 	.word	0x080097b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000248 	.word	0x20000248
 80001d4:	080097b4 	.word	0x080097b4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <LCD_DATA>:
#include <string.h>
#include <stdio.h>



void LCD_DATA(unsigned char Data){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]

	if(Data & 1){
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <LCD_DATA+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f002 fd81 	bl	8003714 <HAL_GPIO_WritePin>
 8000c12:	e006      	b.n	8000c22 <LCD_DATA+0x32>
		//D4 = 1;
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f002 fd79 	bl	8003714 <HAL_GPIO_WritePin>
		//D4 = 0;
	}
	if(Data & 2){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d007      	beq.n	8000c3c <LCD_DATA+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f002 fd6d 	bl	8003714 <HAL_GPIO_WritePin>
 8000c3a:	e006      	b.n	8000c4a <LCD_DATA+0x5a>
		//D5 = 1;
	}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f002 fd65 	bl	8003714 <HAL_GPIO_WritePin>
			//D5 = 0;
		}
	if(Data & 4){
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d005      	beq.n	8000c60 <LCD_DATA+0x70>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <LCD_DATA+0xa8>)
 8000c5a:	f002 fd5b 	bl	8003714 <HAL_GPIO_WritePin>
 8000c5e:	e004      	b.n	8000c6a <LCD_DATA+0x7a>
		//D6 = 1;
	}
		else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LCD_DATA+0xa8>)
 8000c66:	f002 fd55 	bl	8003714 <HAL_GPIO_WritePin>
			//D6 = 0;
		}
	if(Data & 8){
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <LCD_DATA+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <LCD_DATA+0xa8>)
 8000c7c:	f002 fd4a 	bl	8003714 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
			//D7 = 0;
		}
}
 8000c80:	e005      	b.n	8000c8e <LCD_DATA+0x9e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <LCD_DATA+0xa8>)
 8000c8a:	f002 fd43 	bl	8003714 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	48000800 	.word	0x48000800

08000c9c <LCD_CMD>:

void LCD_CMD(unsigned char CMD){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	//Select Command Register
	//RS = 0;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2110      	movs	r1, #16
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LCD_CMD+0x44>)
 8000cac:	f002 fd32 	bl	8003714 <HAL_GPIO_WritePin>
	// Move the command data to the LCD
	LCD_DATA(CMD);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff9c 	bl	8000bf0 <LCD_DATA>
	//Send the enable clock signal
	//EN = 1;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <LCD_CMD+0x48>)
 8000cc0:	f002 fd28 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000cc4:	2032      	movs	r0, #50	; 0x32
 8000cc6:	f001 fe0f 	bl	80028e8 <HAL_Delay>
	//EN = 0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <LCD_CMD+0x48>)
 8000cd2:	f002 fd1f 	bl	8003714 <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <writeBit>:



void writeBit(uint8_t value){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ( (value >> 0) & 0x1) ); //D4
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f002 fd06 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, ( (value >> 1) & 0x1) ); //D5
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	085b      	lsrs	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f002 fcf9 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,  ( (value >> 2) & 0x1) ); //D6
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <writeBit+0x70>)
 8000d34:	f002 fcee 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  ( (value >> 3) & 0x1) ); //D7
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <writeBit+0x70>)
 8000d4c:	f002 fce2 	bl	8003714 <HAL_GPIO_WritePin>

}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	48000800 	.word	0x48000800

08000d5c <send_Message>:
void send_Message(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

	HAL_Delay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f001 fdc1 	bl	80028e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,  GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <send_Message+0x34>)
 8000d6e:	f002 fcd1 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f001 fdb8 	bl	80028e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,  GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <send_Message+0x34>)
 8000d80:	f002 fcc8 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000d84:	2002      	movs	r0, #2
 8000d86:	f001 fdaf 	bl	80028e8 <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	48000400 	.word	0x48000400

08000d94 <send_Command>:
void send_Command(uint8_t L1, uint8_t L2){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2110      	movs	r1, #16
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <send_Command+0x44>)
 8000daa:	f002 fcb3 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,  GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2104      	movs	r1, #4
 8000db2:	480a      	ldr	r0, [pc, #40]	; (8000ddc <send_Command+0x48>)
 8000db4:	f002 fcae 	bl	8003714 <HAL_GPIO_WritePin>

	writeBit(L1);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff94 	bl	8000ce8 <writeBit>
	send_Message();
 8000dc0:	f7ff ffcc 	bl	8000d5c <send_Message>
	writeBit(L2);
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff8e 	bl	8000ce8 <writeBit>
	send_Message();
 8000dcc:	f7ff ffc6 	bl	8000d5c <send_Message>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000400 	.word	0x48000400

08000de0 <lcd_Init>:

void lcd_Init(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

	writeBit(0x00);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff ff7f 	bl	8000ce8 <writeBit>

	HAL_Delay(15);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f001 fd7c 	bl	80028e8 <HAL_Delay>

	//Set to 8 bit mode
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2110      	movs	r1, #16
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <lcd_Init+0x94>)
 8000df6:	f002 fc8d 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,  0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	481e      	ldr	r0, [pc, #120]	; (8000e78 <lcd_Init+0x98>)
 8000e00:	f002 fc88 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,  0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0a:	481b      	ldr	r0, [pc, #108]	; (8000e78 <lcd_Init+0x98>)
 8000e0c:	f002 fc82 	bl	8003714 <HAL_GPIO_WritePin>

	LCD_CMD(0b0011); //1 Set 8 bit mode
 8000e10:	2003      	movs	r0, #3
 8000e12:	f7ff ff43 	bl	8000c9c <LCD_CMD>
	HAL_Delay(5);
 8000e16:	2005      	movs	r0, #5
 8000e18:	f001 fd66 	bl	80028e8 <HAL_Delay>

	LCD_CMD(0b0011); //2 Set 8 bit mode
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff ff3d 	bl	8000c9c <LCD_CMD>
	HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f001 fd60 	bl	80028e8 <HAL_Delay>

	LCD_CMD(0b0011); //3 Set 8 bit mode
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f7ff ff37 	bl	8000c9c <LCD_CMD>
	HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f001 fd5a 	bl	80028e8 <HAL_Delay>

	LCD_CMD(0b0010); //4 Set 4 bits long
 8000e34:	2002      	movs	r0, #2
 8000e36:	f7ff ff31 	bl	8000c9c <LCD_CMD>
	HAL_Delay(1);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f001 fd54 	bl	80028e8 <HAL_Delay>

	//Fucntion Set 4 bits long
	LCD_CMD(0b0010); //5 Sets font
 8000e40:	2002      	movs	r0, #2
 8000e42:	f7ff ff2b 	bl	8000c9c <LCD_CMD>
	LCD_CMD(0b1000);
 8000e46:	2008      	movs	r0, #8
 8000e48:	f7ff ff28 	bl	8000c9c <LCD_CMD>

	//Function Set display
	LCD_CMD(0b0000); //6 display on/off
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff ff25 	bl	8000c9c <LCD_CMD>
	LCD_CMD(0b1111);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f7ff ff22 	bl	8000c9c <LCD_CMD>

	// Display Off
	LCD_CMD(0b0000); //7 Clear Display
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff1f 	bl	8000c9c <LCD_CMD>
	LCD_CMD(0b0001);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff ff1c 	bl	8000c9c <LCD_CMD>

	//Display clear
	LCD_CMD(0b0000); //8 Entry mode
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ff19 	bl	8000c9c <LCD_CMD>
	LCD_CMD(0b010);
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff ff16 	bl	8000c9c <LCD_CMD>


}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	48000800 	.word	0x48000800
 8000e78:	48000400 	.word	0x48000400

08000e7c <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	char Low4,High4;
	Low4  = Data & 0x0F;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	73fb      	strb	r3, [r7, #15]
	High4 = Data & 0xF0;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f023 030f 	bic.w	r3, r3, #15
 8000e94:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1); //RS
 8000e96:	2201      	movs	r2, #1
 8000e98:	2110      	movs	r1, #16
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <LCD_Write_Char+0x88>)
 8000e9c:	f002 fc3a 	bl	8003714 <HAL_GPIO_WritePin>

	writeBit(High4>>4);
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff1e 	bl	8000ce8 <writeBit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1); //ENABLE
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	4815      	ldr	r0, [pc, #84]	; (8000f08 <LCD_Write_Char+0x8c>)
 8000eb4:	f002 fc2e 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f001 fd15 	bl	80028e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); // Enable
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <LCD_Write_Char+0x8c>)
 8000ec6:	f002 fc25 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f001 fd0c 	bl	80028e8 <HAL_Delay>

	writeBit(Low4);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff08 	bl	8000ce8 <writeBit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1); //ENABLE
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ede:	480a      	ldr	r0, [pc, #40]	; (8000f08 <LCD_Write_Char+0x8c>)
 8000ee0:	f002 fc18 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f001 fcff 	bl	80028e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <LCD_Write_Char+0x8c>)
 8000ef2:	f002 fc0f 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fcf6 	bl	80028e8 <HAL_Delay>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000400 	.word	0x48000400

08000f0c <LCD_Write_String>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
	HAL_Delay(1);
}

void LCD_Write_String(char *str){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
	for (i = 0; str[i] != '\0';i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e009      	b.n	8000f32 <LCD_Write_String+0x26>
		LCD_Write_Char(str[i]);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffa8 	bl	8000e7c <LCD_Write_Char>
	for (i = 0; str[i] != '\0';i++){
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1ef      	bne.n	8000f1e <LCD_Write_String+0x12>
	}
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <clearDisplay>:

void clearDisplay(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,  GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <clearDisplay+0x1c>)
 8000f54:	f002 fbde 	bl	8003714 <HAL_GPIO_WritePin>

	send_Command(0x0, 0x1);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ff1a 	bl	8000d94 <send_Command>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	48000400 	.word	0x48000400

08000f68 <LCD_Set_Cursor>:
void scrollRight(){
	//ToDo Implement the Scroll
	//LCD_Write_Command();

}
void LCD_Set_Cursor(unsigned char r, unsigned char c){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460a      	mov	r2, r1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
	unsigned char Temp, Low4, High4;
	if (r ==1 ){
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d111      	bne.n	8000fa2 <LCD_Set_Cursor+0x3a>
		Temp = 0x80 + c -1 ; //0x80 is used to move the cursor
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	337f      	adds	r3, #127	; 0x7f
 8000f82:	73fb      	strb	r3, [r7, #15]
		High4 = Temp >>4;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	73bb      	strb	r3, [r7, #14]
		Low4 = Temp & 0x0F;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	737b      	strb	r3, [r7, #13]
		LCD_CMD(High4);
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe81 	bl	8000c9c <LCD_CMD>
		LCD_CMD(Low4);
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe7d 	bl	8000c9c <LCD_CMD>
		//writeBit(High4);
		//send_Message();
		//writeBit(Low4);
		//send_Message();
	}
	if (r == 2){
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d111      	bne.n	8000fcc <LCD_Set_Cursor+0x64>
		Temp = 0xC0 + c - 1;
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	3b41      	subs	r3, #65	; 0x41
 8000fac:	73fb      	strb	r3, [r7, #15]
		High4 = Temp >>4;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	73bb      	strb	r3, [r7, #14]
		Low4 = Temp & 0x0F;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	737b      	strb	r3, [r7, #13]
		//writeBit(High4);
		//send_Message();
		//writeBit(Low4);
		//send_Message();

		LCD_CMD(High4);
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe6c 	bl	8000c9c <LCD_CMD>
		LCD_CMD(Low4);
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe68 	bl	8000c9c <LCD_CMD>
	}
	HAL_Delay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f001 fc8b 	bl	80028e8 <HAL_Delay>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <displayMeasurements>:
	}
	return upDown;
}

uint8_t topScroll = 0;
void displayMeasurements(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ffc0 	bl	8000f68 <LCD_Set_Cursor>
	switch(measureModeState){
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <displayMeasurements+0x6c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d827      	bhi.n	8001040 <displayMeasurements+0x64>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <displayMeasurements+0x1c>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001009 	.word	0x08001009
 8000ffc:	08001017 	.word	0x08001017
 8001000:	08001025 	.word	0x08001025
 8001004:	08001033 	.word	0x08001033

	case 0:
		LCD_Write_String("1.111V"); //"DCV", "DCC", "ACV", "ACC"
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <displayMeasurements+0x70>)
 800100a:	f7ff ff7f 	bl	8000f0c <LCD_Write_String>
		topScroll = 0;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <displayMeasurements+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		break;
 8001014:	e015      	b.n	8001042 <displayMeasurements+0x66>
	case 1:
		LCD_Write_String("O:1.234V,A:5.678V,F:9876Hz"); //AC voltage
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <displayMeasurements+0x78>)
 8001018:	f7ff ff78 	bl	8000f0c <LCD_Write_String>
		topScroll = 1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <displayMeasurements+0x74>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		break;
 8001022:	e00e      	b.n	8001042 <displayMeasurements+0x66>
	case 2:
		LCD_Write_String("123.4mA");
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <displayMeasurements+0x7c>)
 8001026:	f7ff ff71 	bl	8000f0c <LCD_Write_String>
		topScroll = 0;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <displayMeasurements+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
		break;
 8001030:	e007      	b.n	8001042 <displayMeasurements+0x66>
	case 3:
		LCD_Write_String("O:123.4mA,A:567.8mA,F:9876Hz"); //AC Current
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <displayMeasurements+0x80>)
 8001034:	f7ff ff6a 	bl	8000f0c <LCD_Write_String>
		topScroll = 1;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <displayMeasurements+0x74>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		break;
 800103e:	e000      	b.n	8001042 <displayMeasurements+0x66>

	default:
		break;
 8001040:	bf00      	nop
	}
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000026d 	.word	0x2000026d
 800104c:	080097d0 	.word	0x080097d0
 8001050:	20000271 	.word	0x20000271
 8001054:	080097d8 	.word	0x080097d8
 8001058:	080097f4 	.word	0x080097f4
 800105c:	080097fc 	.word	0x080097fc

08001060 <updateScreen>:

void updateScreen() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	clearDisplay();
 8001064:	f7ff ff70 	bl	8000f48 <clearDisplay>
	if (menuState == 0) { //0 is menu mode
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <updateScreen+0x80>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d107      	bne.n	8001080 <updateScreen+0x20>
		LCD_Set_Cursor(1, 1);
 8001070:	2101      	movs	r1, #1
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff78 	bl	8000f68 <LCD_Set_Cursor>
		LCD_Write_String("Menu Mode");
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <updateScreen+0x84>)
 800107a:	f7ff ff47 	bl	8000f0c <LCD_Write_String>
			}
		} else if (outputOnOff == 0) {
			LCD_Write_String(outputOffMesssage);
		}
	}
}
 800107e:	e02d      	b.n	80010dc <updateScreen+0x7c>
	} else if (menuState == 1) {
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <updateScreen+0x80>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d129      	bne.n	80010dc <updateScreen+0x7c>
		displayMeasurements();
 8001088:	f7ff ffa8 	bl	8000fdc <displayMeasurements>
		LCD_Set_Cursor(2, 1);
 800108c:	2101      	movs	r1, #1
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff ff6a 	bl	8000f68 <LCD_Set_Cursor>
		if (outputOnOff == 1) {
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <updateScreen+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d117      	bne.n	80010cc <updateScreen+0x6c>
			switch (signalTypeState) {
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <updateScreen+0x8c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d007      	beq.n	80010b4 <updateScreen+0x54>
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d009      	beq.n	80010bc <updateScreen+0x5c>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10b      	bne.n	80010c4 <updateScreen+0x64>
				LCD_Write_String(DCoutput);//Need
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <updateScreen+0x90>)
 80010ae:	f7ff ff2d 	bl	8000f0c <LCD_Write_String>
				break;
 80010b2:	e013      	b.n	80010dc <updateScreen+0x7c>
				LCD_Write_String(sineOutput);
 80010b4:	480f      	ldr	r0, [pc, #60]	; (80010f4 <updateScreen+0x94>)
 80010b6:	f7ff ff29 	bl	8000f0c <LCD_Write_String>
				break;
 80010ba:	e00f      	b.n	80010dc <updateScreen+0x7c>
				LCD_Write_String(pulseOutput);
 80010bc:	480e      	ldr	r0, [pc, #56]	; (80010f8 <updateScreen+0x98>)
 80010be:	f7ff ff25 	bl	8000f0c <LCD_Write_String>
				break;
 80010c2:	e00b      	b.n	80010dc <updateScreen+0x7c>
				LCD_Write_String("error");
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <updateScreen+0x9c>)
 80010c6:	f7ff ff21 	bl	8000f0c <LCD_Write_String>
}
 80010ca:	e007      	b.n	80010dc <updateScreen+0x7c>
		} else if (outputOnOff == 0) {
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <updateScreen+0x88>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <updateScreen+0x7c>
			LCD_Write_String(outputOffMesssage);
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <updateScreen+0xa0>)
 80010d6:	f7ff ff19 	bl	8000f0c <LCD_Write_String>
}
 80010da:	e7ff      	b.n	80010dc <updateScreen+0x7c>
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000026c 	.word	0x2000026c
 80010e4:	0800981c 	.word	0x0800981c
 80010e8:	20000270 	.word	0x20000270
 80010ec:	2000026e 	.word	0x2000026e
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000014 	.word	0x20000014
 80010f8:	20000030 	.word	0x20000030
 80010fc:	08009828 	.word	0x08009828
 8001100:	20000000 	.word	0x20000000
 8001104:	00000000 	.word	0x00000000

08001108 <initial_sineval>:
uint8_t otherState = 0;
uint8_t kapFlag = 0;
#define PI 3.1415926
//Fsine wave = TimerFreq/Numbersamples;

void initial_sineval() { //Default, 1kHz, 1V amp, 1.2V Offset
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	e043      	b.n	800119c <initial_sineval+0x94>
		sine_val[i] = ((float) (sin(i * 2 * PI / 100)) * ((float) 480 / 3300)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f9b7 	bl	800048c <__aeabi_i2d>
 800111e:	a32a      	add	r3, pc, #168	; (adr r3, 80011c8 <initial_sineval+0xc0>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa1c 	bl	8000560 <__aeabi_dmul>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4618      	mov	r0, r3
 800112e:	4621      	mov	r1, r4
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <initial_sineval+0xa8>)
 8001136:	f7ff fb3d 	bl	80007b4 <__aeabi_ddiv>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	ec44 3b17 	vmov	d7, r3, r4
 8001142:	eeb0 0a47 	vmov.f32	s0, s14
 8001146:	eef0 0a67 	vmov.f32	s1, s15
 800114a:	f007 fb21 	bl	8008790 <sin>
 800114e:	ec54 3b10 	vmov	r3, r4, d0
 8001152:	4618      	mov	r0, r3
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fcfb 	bl	8000b50 <__aeabi_d2f>
 800115a:	ee07 0a10 	vmov	s14, r0
 800115e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80011b4 <initial_sineval+0xac>
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
				* (4096)) + ((float) 1165 / (float) 3300) * 4096;
 8001166:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011b8 <initial_sineval+0xb0>
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011bc <initial_sineval+0xb4>
 8001172:	ee77 7a87 	vadd.f32	s15, s15, s14
		sine_val[i] = ((float) (sin(i * 2 * PI / 100)) * ((float) 480 / 3300)
 8001176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117a:	ee17 1a90 	vmov	r1, s15
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <initial_sineval+0xb8>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		dac_value[i] = sine_val[i];
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <initial_sineval+0xb8>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <initial_sineval+0xbc>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b63      	cmp	r3, #99	; 0x63
 80011a0:	ddb8      	ble.n	8001114 <initial_sineval+0xc>
	}

}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	40590000 	.word	0x40590000
 80011b4:	3e14f209 	.word	0x3e14f209
 80011b8:	45800000 	.word	0x45800000
 80011bc:	44b4c063 	.word	0x44b4c063
 80011c0:	20000444 	.word	0x20000444
 80011c4:	20000760 	.word	0x20000760
 80011c8:	4d12d84a 	.word	0x4d12d84a
 80011cc:	400921fb 	.word	0x400921fb

080011d0 <initial_dcVal>:
void initial_dcVal() { //Default 1.2V
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e008      	b.n	80011ee <initial_dcVal+0x1e>
		dac_value[i] = ((float) 1160 / 3300) * 4096;
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <initial_dcVal+0x30>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f240 519f 	movw	r1, #1439	; 0x59f
 80011e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b63      	cmp	r3, #99	; 0x63
 80011f2:	ddf3      	ble.n	80011dc <initial_dcVal+0xc>
	}
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	20000760 	.word	0x20000760

08001204 <initial_pulseVal>:
void initial_pulseVal() { //Default 1.2V, 25% duty cycle
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	initial_dcVal();
 800120a:	f7ff ffe1 	bl	80011d0 <initial_dcVal>
	for (int i = 0; i < 28; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	e008      	b.n	8001226 <initial_pulseVal+0x22>
		dac_value[i] = ((float) 2065 / 3300) * 4096;
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <initial_pulseVal+0x30>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f640 2103 	movw	r1, #2563	; 0xa03
 800121c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 28; i++) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3301      	adds	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b1b      	cmp	r3, #27
 800122a:	ddf3      	ble.n	8001214 <initial_pulseVal+0x10>
	}
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000760 	.word	0x20000760

08001238 <SetMeasureState>:

void SetMeasureState() { //uint8_t uartMessage[]
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

	//Determine Type of command
	//	if (uartMessage[2] == '$') { //Set Measure Mode Command, : @,$,AI,!\n

	if (rxBuffer[4] == 'D' && rxBuffer[5] == 'V') {
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <SetMeasureState+0x7c>)
 800123e:	791b      	ldrb	r3, [r3, #4]
 8001240:	2b44      	cmp	r3, #68	; 0x44
 8001242:	d106      	bne.n	8001252 <SetMeasureState+0x1a>
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <SetMeasureState+0x7c>)
 8001246:	795b      	ldrb	r3, [r3, #5]
 8001248:	2b56      	cmp	r3, #86	; 0x56
 800124a:	d102      	bne.n	8001252 <SetMeasureState+0x1a>
		measureModeState = 0; //Set to DC Measure State
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <SetMeasureState+0x80>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	}
	if (rxBuffer[4] == 'A' && rxBuffer[5] == 'V') {
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <SetMeasureState+0x7c>)
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	2b41      	cmp	r3, #65	; 0x41
 8001258:	d106      	bne.n	8001268 <SetMeasureState+0x30>
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <SetMeasureState+0x7c>)
 800125c:	795b      	ldrb	r3, [r3, #5]
 800125e:	2b56      	cmp	r3, #86	; 0x56
 8001260:	d102      	bne.n	8001268 <SetMeasureState+0x30>
		measureModeState = 1; //Set to AC Measure State
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <SetMeasureState+0x80>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
	}
	if (rxBuffer[4] == 'D' && rxBuffer[5] == 'I') {
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <SetMeasureState+0x7c>)
 800126a:	791b      	ldrb	r3, [r3, #4]
 800126c:	2b44      	cmp	r3, #68	; 0x44
 800126e:	d106      	bne.n	800127e <SetMeasureState+0x46>
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <SetMeasureState+0x7c>)
 8001272:	795b      	ldrb	r3, [r3, #5]
 8001274:	2b49      	cmp	r3, #73	; 0x49
 8001276:	d102      	bne.n	800127e <SetMeasureState+0x46>
		measureModeState = 2; //Set to DC Measure State
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <SetMeasureState+0x80>)
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
	}
	if (rxBuffer[4] == 'A' && rxBuffer[5] == 'I') {
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <SetMeasureState+0x7c>)
 8001280:	791b      	ldrb	r3, [r3, #4]
 8001282:	2b41      	cmp	r3, #65	; 0x41
 8001284:	d106      	bne.n	8001294 <SetMeasureState+0x5c>
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <SetMeasureState+0x7c>)
 8001288:	795b      	ldrb	r3, [r3, #5]
 800128a:	2b49      	cmp	r3, #73	; 0x49
 800128c:	d102      	bne.n	8001294 <SetMeasureState+0x5c>
		measureModeState = 3; //Set to DC Measure State
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SetMeasureState+0x80>)
 8001290:	2203      	movs	r2, #3
 8001292:	701a      	strb	r2, [r3, #0]
	}
	if (rxBuffer[4] == 'T' && rxBuffer[5] == 'C') {
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <SetMeasureState+0x7c>)
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	2b54      	cmp	r3, #84	; 0x54
 800129a:	d106      	bne.n	80012aa <SetMeasureState+0x72>
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SetMeasureState+0x7c>)
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	2b43      	cmp	r3, #67	; 0x43
 80012a2:	d102      	bne.n	80012aa <SetMeasureState+0x72>
		measureModeState = 4; //Set to DC Measure State
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SetMeasureState+0x80>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	701a      	strb	r2, [r3, #0]
	}
	//	}
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000674 	.word	0x20000674
 80012b8:	2000026d 	.word	0x2000026d

080012bc <setOutputOff>:

uint32_t offset = 1200;
uint32_t amplitude = 1000; //peak to peak
uint32_t freq = 1000;
uint32_t dutyCycle = 25;
void setOutputOff() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	outputOnOff = 0;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <setOutputOff+0x1c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80012c6:	2100      	movs	r1, #0
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <setOutputOff+0x20>)
 80012ca:	f001 fc62 	bl	8002b92 <HAL_DAC_Stop_DMA>
	//clearDisplay();
	updateScreen();
 80012ce:	f7ff fec7 	bl	8001060 <updateScreen>
	//LCD_Set_Cursor(2, 1);
	//LCD_Write_String("Output Off");
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000270 	.word	0x20000270
 80012dc:	200002a0 	.word	0x200002a0

080012e0 <setOutputOn>:
void setOutputOn() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af02      	add	r7, sp, #8
	outputOnOff = 1;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <setOutputOn+0x48>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]

	if (signalTypeState == 0) {
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <setOutputOn+0x4c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <setOutputOn+0x18>
		initial_dcVal();
 80012f4:	f7ff ff6c 	bl	80011d0 <initial_dcVal>
	}

	if (signalTypeState == 1) {
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <setOutputOn+0x4c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <setOutputOn+0x24>
		initial_sineval();
 8001300:	f7ff ff02 	bl	8001108 <initial_sineval>
	}
	if (signalTypeState == 2) {
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <setOutputOn+0x4c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d101      	bne.n	8001310 <setOutputOn+0x30>
		initial_pulseVal();
 800130c:	f7ff ff7a 	bl	8001204 <initial_pulseVal>
	}

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_value, 100, DAC_ALIGN_12B_R);
 8001310:	2300      	movs	r3, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <setOutputOn+0x50>)
 8001318:	2100      	movs	r1, #0
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <setOutputOn+0x54>)
 800131c:	f001 fca8 	bl	8002c70 <HAL_DAC_Start_DMA>
	//clearDisplay();
	//LCD_Set_Cursor(2, 1);
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000270 	.word	0x20000270
 800132c:	2000026e 	.word	0x2000026e
 8001330:	20000760 	.word	0x20000760
 8001334:	200002a0 	.word	0x200002a0

08001338 <RequestState>:
void RequestState() { //This function creates a TX Response via reading the state of the system
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
	uint8_t response[11];

	response[0] = '@';
 800133e:	2340      	movs	r3, #64	; 0x40
 8001340:	713b      	strb	r3, [r7, #4]
	response[1] = ',';
 8001342:	232c      	movs	r3, #44	; 0x2c
 8001344:	717b      	strb	r3, [r7, #5]
	//Measure Mode Check
	if (measureModeState == 0) {
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <RequestState+0xb4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d104      	bne.n	8001358 <RequestState+0x20>
		response[2] = 'D';
 800134e:	2344      	movs	r3, #68	; 0x44
 8001350:	71bb      	strb	r3, [r7, #6]
		response[3] = 'V';
 8001352:	2356      	movs	r3, #86	; 0x56
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e022      	b.n	800139e <RequestState+0x66>
	} else if (measureModeState == 1) {
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <RequestState+0xb4>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d104      	bne.n	800136a <RequestState+0x32>
		response[2] = 'A';
 8001360:	2341      	movs	r3, #65	; 0x41
 8001362:	71bb      	strb	r3, [r7, #6]
		response[3] = 'V';
 8001364:	2356      	movs	r3, #86	; 0x56
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	e019      	b.n	800139e <RequestState+0x66>
	} else if (measureModeState == 2) {
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <RequestState+0xb4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d104      	bne.n	800137c <RequestState+0x44>
		response[2] = 'D';
 8001372:	2344      	movs	r3, #68	; 0x44
 8001374:	71bb      	strb	r3, [r7, #6]
		response[3] = 'I';
 8001376:	2349      	movs	r3, #73	; 0x49
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e010      	b.n	800139e <RequestState+0x66>
	} else if (measureModeState == 3) {
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <RequestState+0xb4>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d104      	bne.n	800138e <RequestState+0x56>
		response[2] = 'A';
 8001384:	2341      	movs	r3, #65	; 0x41
 8001386:	71bb      	strb	r3, [r7, #6]
		response[3] = 'I';
 8001388:	2349      	movs	r3, #73	; 0x49
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	e007      	b.n	800139e <RequestState+0x66>
	} else if (measureModeState == 4) {
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <RequestState+0xb4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b04      	cmp	r3, #4
 8001394:	d103      	bne.n	800139e <RequestState+0x66>
		response[2] = 'T';
 8001396:	2354      	movs	r3, #84	; 0x54
 8001398:	71bb      	strb	r3, [r7, #6]
		response[3] = 'C';
 800139a:	2343      	movs	r3, #67	; 0x43
 800139c:	71fb      	strb	r3, [r7, #7]
	}

	response[4] = ',';
 800139e:	232c      	movs	r3, #44	; 0x2c
 80013a0:	723b      	strb	r3, [r7, #8]
	//Signal Parameter Checks
	response[5] = rxBuffer[4];
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <RequestState+0xb8>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	727b      	strb	r3, [r7, #9]

	response[6] = ',';
 80013a8:	232c      	movs	r3, #44	; 0x2c
 80013aa:	72bb      	strb	r3, [r7, #10]

	if (outputOnOff == 0) {
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <RequestState+0xbc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <RequestState+0x84>
		response[7] = '0';
 80013b4:	2330      	movs	r3, #48	; 0x30
 80013b6:	72fb      	strb	r3, [r7, #11]
		setOutputOff();
 80013b8:	f7ff ff80 	bl	80012bc <setOutputOff>
	}
	if (outputOnOff == 1) {
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <RequestState+0xbc>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d103      	bne.n	80013cc <RequestState+0x94>
		response[7] = '1';
 80013c4:	2331      	movs	r3, #49	; 0x31
 80013c6:	72fb      	strb	r3, [r7, #11]
		setOutputOn();
 80013c8:	f7ff ff8a 	bl	80012e0 <setOutputOn>
	}
	response[8] = ',';
 80013cc:	232c      	movs	r3, #44	; 0x2c
 80013ce:	733b      	strb	r3, [r7, #12]
	response[9] = '!';
 80013d0:	2321      	movs	r3, #33	; 0x21
 80013d2:	737b      	strb	r3, [r7, #13]
	response[10] = '\n';
 80013d4:	230a      	movs	r3, #10
 80013d6:	73bb      	strb	r3, [r7, #14]

	HAL_UART_Transmit(&huart2, (uint8_t*) response, 11, 50);
 80013d8:	1d39      	adds	r1, r7, #4
 80013da:	2332      	movs	r3, #50	; 0x32
 80013dc:	220b      	movs	r2, #11
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <RequestState+0xc0>)
 80013e0:	f004 fa60 	bl	80058a4 <HAL_UART_Transmit>

}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000026d 	.word	0x2000026d
 80013f0:	20000674 	.word	0x20000674
 80013f4:	20000270 	.word	0x20000270
 80013f8:	200006d8 	.word	0x200006d8
 80013fc:	00000000 	.word	0x00000000

08001400 <changeAmplitude>:
void changeAmplitude() {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
	temp = (uint32_t) (rxBuffer[6] - 48) * 1000; //First entry
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <changeAmplitude+0x198>)
 800140c:	799b      	ldrb	r3, [r3, #6]
 800140e:	3b30      	subs	r3, #48	; 0x30
 8001410:	461a      	mov	r2, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fb03 f302 	mul.w	r3, r3, r2
 800141a:	603b      	str	r3, [r7, #0]
	temp = temp + (uint32_t) (rxBuffer[7] - 48) * 100;
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <changeAmplitude+0x198>)
 800141e:	79db      	ldrb	r3, [r3, #7]
 8001420:	3b30      	subs	r3, #48	; 0x30
 8001422:	461a      	mov	r2, r3
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	fb03 f302 	mul.w	r3, r3, r2
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	603b      	str	r3, [r7, #0]
	temp = temp + (uint32_t) (rxBuffer[8] - 48) * 10;
 8001430:	4b59      	ldr	r3, [pc, #356]	; (8001598 <changeAmplitude+0x198>)
 8001432:	7a1b      	ldrb	r3, [r3, #8]
 8001434:	3b30      	subs	r3, #48	; 0x30
 8001436:	461a      	mov	r2, r3
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	461a      	mov	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	603b      	str	r3, [r7, #0]
	temp = temp + (uint32_t) (rxBuffer[9] - 48);
 8001448:	4b53      	ldr	r3, [pc, #332]	; (8001598 <changeAmplitude+0x198>)
 800144a:	7a5b      	ldrb	r3, [r3, #9]
 800144c:	461a      	mov	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	3b30      	subs	r3, #48	; 0x30
 8001454:	603b      	str	r3, [r7, #0]

	amplitude = temp;
 8001456:	4a51      	ldr	r2, [pc, #324]	; (800159c <changeAmplitude+0x19c>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6013      	str	r3, [r2, #0]

	if (signalTypeState == 1) { //AC amplitude
 800145c:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <changeAmplitude+0x1a0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d157      	bne.n	8001514 <changeAmplitude+0x114>
		for (int i = 0; i < 100; i++) {
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e051      	b.n	800150e <changeAmplitude+0x10e>

				dac_value[i] = ((float) (sin(i * 2 * PI / 100))
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f80c 	bl	800048c <__aeabi_i2d>
 8001474:	a346      	add	r3, pc, #280	; (adr r3, 8001590 <changeAmplitude+0x190>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f871 	bl	8000560 <__aeabi_dmul>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	4618      	mov	r0, r3
 8001484:	4621      	mov	r1, r4
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <changeAmplitude+0x1a4>)
 800148c:	f7ff f992 	bl	80007b4 <__aeabi_ddiv>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	ec44 3b17 	vmov	d7, r3, r4
 8001498:	eeb0 0a47 	vmov.f32	s0, s14
 800149c:	eef0 0a67 	vmov.f32	s1, s15
 80014a0:	f007 f976 	bl	8008790 <sin>
 80014a4:	ec54 3b10 	vmov	r3, r4, d0
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	f7ff fb50 	bl	8000b50 <__aeabi_d2f>
 80014b0:	ee06 0a10 	vmov	s12, r0
						* ((float) ((amplitude/2)-15) / 3300) * (4096))
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <changeAmplitude+0x19c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	3b0f      	subs	r3, #15
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c4:	eddf 6a38 	vldr	s13, [pc, #224]	; 80015a8 <changeAmplitude+0x1a8>
 80014c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015ac <changeAmplitude+0x1ac>
 80014d4:	ee27 7a87 	vmul.f32	s14, s15, s14
						+ ((float) offset / (float) 3300) * 4096;
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <changeAmplitude+0x1b0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014e4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80015a8 <changeAmplitude+0x1a8>
 80014e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014ec:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80015ac <changeAmplitude+0x1ac>
 80014f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
				dac_value[i] = ((float) (sin(i * 2 * PI / 100))
 80014f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fc:	ee17 1a90 	vmov	r1, s15
 8001500:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <changeAmplitude+0x1b4>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 100; i++) {
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b63      	cmp	r3, #99	; 0x63
 8001512:	ddaa      	ble.n	800146a <changeAmplitude+0x6a>
			//}

		}
	}
	if (signalTypeState == 2){
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <changeAmplitude+0x1a0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d132      	bne.n	8001582 <changeAmplitude+0x182>
		for (int i = 0; i < 100; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	e008      	b.n	8001534 <changeAmplitude+0x134>
			dac_value[i] = ((float) 1160 / 3300) * 4096;
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <changeAmplitude+0x1b4>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f240 519f 	movw	r1, #1439	; 0x59f
 800152a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 100; i++) {
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b63      	cmp	r3, #99	; 0x63
 8001538:	ddf3      	ble.n	8001522 <changeAmplitude+0x122>
		}
		for (int i = 0; i < (dutyCycle); i++) {
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	e01b      	b.n	8001578 <changeAmplitude+0x178>
			dac_value[i] = ((float) (offset+amplitude) / 3300) * 4096;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <changeAmplitude+0x1b0>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <changeAmplitude+0x19c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4413      	add	r3, r2
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001552:	eddf 6a15 	vldr	s13, [pc, #84]	; 80015a8 <changeAmplitude+0x1a8>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015ac <changeAmplitude+0x1ac>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001566:	ee17 1a90 	vmov	r1, s15
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <changeAmplitude+0x1b4>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < (dutyCycle); i++) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <changeAmplitude+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3de      	bcc.n	8001540 <changeAmplitude+0x140>
		}
	}
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	4d12d84a 	.word	0x4d12d84a
 8001594:	400921fb 	.word	0x400921fb
 8001598:	20000674 	.word	0x20000674
 800159c:	2000005c 	.word	0x2000005c
 80015a0:	2000026e 	.word	0x2000026e
 80015a4:	40590000 	.word	0x40590000
 80015a8:	454e4000 	.word	0x454e4000
 80015ac:	45800000 	.word	0x45800000
 80015b0:	20000058 	.word	0x20000058
 80015b4:	20000760 	.word	0x20000760
 80015b8:	20000064 	.word	0x20000064
 80015bc:	00000000 	.word	0x00000000

080015c0 <changeOffset>:

void changeOffset() {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

	uint32_t temp = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
	temp = (uint32_t) (rxBuffer[6] - 48) * 1000; //First entry
 80015ca:	4b83      	ldr	r3, [pc, #524]	; (80017d8 <changeOffset+0x218>)
 80015cc:	799b      	ldrb	r3, [r3, #6]
 80015ce:	3b30      	subs	r3, #48	; 0x30
 80015d0:	461a      	mov	r2, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fb03 f302 	mul.w	r3, r3, r2
 80015da:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[7] - 48) * 100;
 80015dc:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <changeOffset+0x218>)
 80015de:	79db      	ldrb	r3, [r3, #7]
 80015e0:	3b30      	subs	r3, #48	; 0x30
 80015e2:	461a      	mov	r2, r3
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	fb03 f302 	mul.w	r3, r3, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[8] - 48) * 10;
 80015f0:	4b79      	ldr	r3, [pc, #484]	; (80017d8 <changeOffset+0x218>)
 80015f2:	7a1b      	ldrb	r3, [r3, #8]
 80015f4:	3b30      	subs	r3, #48	; 0x30
 80015f6:	461a      	mov	r2, r3
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[9] - 48);
 8001608:	4b73      	ldr	r3, [pc, #460]	; (80017d8 <changeOffset+0x218>)
 800160a:	7a5b      	ldrb	r3, [r3, #9]
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	3b30      	subs	r3, #48	; 0x30
 8001614:	607b      	str	r3, [r7, #4]
	offset = temp;
 8001616:	4a71      	ldr	r2, [pc, #452]	; (80017dc <changeOffset+0x21c>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]

	if (signalTypeState == 0) { //DC
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <changeOffset+0x220>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12f      	bne.n	8001684 <changeOffset+0xc4>
		for (int i = 0; i < 100; i++) {
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e029      	b.n	800167e <changeOffset+0xbe>
			dac_value[i] = (offset * 1.18 + i * 0.005);
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <changeOffset+0x21c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff1c 	bl	800046c <__aeabi_ui2d>
 8001634:	a362      	add	r3, pc, #392	; (adr r3, 80017c0 <changeOffset+0x200>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ff91 	bl	8000560 <__aeabi_dmul>
 800163e:	4603      	mov	r3, r0
 8001640:	460c      	mov	r4, r1
 8001642:	4625      	mov	r5, r4
 8001644:	461c      	mov	r4, r3
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7fe ff20 	bl	800048c <__aeabi_i2d>
 800164c:	a35e      	add	r3, pc, #376	; (adr r3, 80017c8 <changeOffset+0x208>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ff85 	bl	8000560 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fdc9 	bl	80001f4 <__adddf3>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	4618      	mov	r0, r3
 8001668:	4621      	mov	r1, r4
 800166a:	f7ff fa51 	bl	8000b10 <__aeabi_d2uiz>
 800166e:	4601      	mov	r1, r0
 8001670:	4a5c      	ldr	r2, [pc, #368]	; (80017e4 <changeOffset+0x224>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 100; i++) {
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b63      	cmp	r3, #99	; 0x63
 8001682:	ddd2      	ble.n	800162a <changeOffset+0x6a>
		}

	}
	if (signalTypeState == 1) { //AC
 8001684:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <changeOffset+0x220>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d14d      	bne.n	8001728 <changeOffset+0x168>
		for (int i = 0; i < 100; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	e047      	b.n	8001722 <changeOffset+0x162>

			dac_value[i] = ((float) (sin(i * 2 * PI / 100))
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fef8 	bl	800048c <__aeabi_i2d>
 800169c:	a34c      	add	r3, pc, #304	; (adr r3, 80017d0 <changeOffset+0x210>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ff5d 	bl	8000560 <__aeabi_dmul>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	4618      	mov	r0, r3
 80016ac:	4621      	mov	r1, r4
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <changeOffset+0x228>)
 80016b4:	f7ff f87e 	bl	80007b4 <__aeabi_ddiv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	ec44 3b17 	vmov	d7, r3, r4
 80016c0:	eeb0 0a47 	vmov.f32	s0, s14
 80016c4:	eef0 0a67 	vmov.f32	s1, s15
 80016c8:	f007 f862 	bl	8008790 <sin>
 80016cc:	ec54 3b10 	vmov	r3, r4, d0
 80016d0:	4618      	mov	r0, r3
 80016d2:	4621      	mov	r1, r4
 80016d4:	f7ff fa3c 	bl	8000b50 <__aeabi_d2f>
 80016d8:	ee07 0a10 	vmov	s14, r0
					* ((float) 470 / 3300) * (4096))
 80016dc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80017ec <changeOffset+0x22c>
 80016e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80017f0 <changeOffset+0x230>
 80016e8:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ ((float) offset / (float) 3300) * 4096;
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <changeOffset+0x21c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016f8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80017f4 <changeOffset+0x234>
 80016fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001700:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80017f0 <changeOffset+0x230>
 8001704:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
			dac_value[i] = ((float) (sin(i * 2 * PI / 100))
 800170c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001710:	ee17 1a90 	vmov	r1, s15
 8001714:	4a33      	ldr	r2, [pc, #204]	; (80017e4 <changeOffset+0x224>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 100; i++) {
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b63      	cmp	r3, #99	; 0x63
 8001726:	ddb4      	ble.n	8001692 <changeOffset+0xd2>
		}
	}
	if (signalTypeState == 2){
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <changeOffset+0x220>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d142      	bne.n	80017b6 <changeOffset+0x1f6>
		for (int i = 0; i < 100; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e018      	b.n	8001768 <changeOffset+0x1a8>
			dac_value[i] = ((float) offset / 3300) * 4096;
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <changeOffset+0x21c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001742:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80017f4 <changeOffset+0x234>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017f0 <changeOffset+0x230>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001756:	ee17 1a90 	vmov	r1, s15
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <changeOffset+0x224>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 100; i++) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b63      	cmp	r3, #99	; 0x63
 800176c:	dde3      	ble.n	8001736 <changeOffset+0x176>
		}
		for (int i = 0; i < (dutyCycle); i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	e01b      	b.n	80017ac <changeOffset+0x1ec>
			dac_value[i] = ((float) (offset+amplitude) / 3300) * 4096;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <changeOffset+0x21c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <changeOffset+0x238>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4413      	add	r3, r2
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001786:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80017f4 <changeOffset+0x234>
 800178a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80017f0 <changeOffset+0x230>
 8001792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179a:	ee17 1a90 	vmov	r1, s15
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <changeOffset+0x224>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < (dutyCycle); i++) {
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <changeOffset+0x23c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3de      	bcc.n	8001774 <changeOffset+0x1b4>
		}
	}
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	ae147ae1 	.word	0xae147ae1
 80017c4:	3ff2e147 	.word	0x3ff2e147
 80017c8:	47ae147b 	.word	0x47ae147b
 80017cc:	3f747ae1 	.word	0x3f747ae1
 80017d0:	4d12d84a 	.word	0x4d12d84a
 80017d4:	400921fb 	.word	0x400921fb
 80017d8:	20000674 	.word	0x20000674
 80017dc:	20000058 	.word	0x20000058
 80017e0:	2000026e 	.word	0x2000026e
 80017e4:	20000760 	.word	0x20000760
 80017e8:	40590000 	.word	0x40590000
 80017ec:	3e11d7a9 	.word	0x3e11d7a9
 80017f0:	45800000 	.word	0x45800000
 80017f4:	454e4000 	.word	0x454e4000
 80017f8:	2000005c 	.word	0x2000005c
 80017fc:	20000064 	.word	0x20000064

08001800 <Freq_Get_Prescalar>:
void Freq_Get_Prescalar() {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	uint32_t autoreload_val = 1;
 8001806:	2301      	movs	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
	autoreload_val = (720000 / dac_freq) - 1;
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <Freq_Get_Prescalar+0x54>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <Freq_Get_Prescalar+0x58>)
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_AUTORELOAD(&htim2, autoreload_val);
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <Freq_Get_Prescalar+0x5c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <Freq_Get_Prescalar+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60d3      	str	r3, [r2, #12]

	TIM2->CR1 = 0; //disable the timer
 8001826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
	TIM2->EGR = TIM_EGR_UG; //reintialize all  registers
 800182e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001832:	2201      	movs	r2, #1
 8001834:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN; //start timer again
 8001836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]

}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000054 	.word	0x20000054
 8001858:	000afc80 	.word	0x000afc80
 800185c:	2000068c 	.word	0x2000068c

08001860 <changeFreq>:
void changeFreq() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	int temp = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
	//change amplitude of wave
	temp = (uint32_t) (rxBuffer[6] - 48) * 1000; //First entry
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <changeFreq+0x70>)
 800186c:	799b      	ldrb	r3, [r3, #6]
 800186e:	3b30      	subs	r3, #48	; 0x30
 8001870:	461a      	mov	r2, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fb03 f302 	mul.w	r3, r3, r2
 800187a:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[7] - 48) * 100;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <changeFreq+0x70>)
 800187e:	79db      	ldrb	r3, [r3, #7]
 8001880:	3b30      	subs	r3, #48	; 0x30
 8001882:	461a      	mov	r2, r3
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	fb03 f202 	mul.w	r2, r3, r2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[8] - 48) * 10;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <changeFreq+0x70>)
 8001892:	7a1b      	ldrb	r3, [r3, #8]
 8001894:	3b30      	subs	r3, #48	; 0x30
 8001896:	461a      	mov	r2, r3
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[9] - 48);
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <changeFreq+0x70>)
 80018aa:	7a5b      	ldrb	r3, [r3, #9]
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	3b30      	subs	r3, #48	; 0x30
 80018b4:	607b      	str	r3, [r7, #4]
	freq = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <changeFreq+0x74>)
 80018ba:	6013      	str	r3, [r2, #0]

	dac_freq = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <changeFreq+0x78>)
 80018c0:	6013      	str	r3, [r2, #0]

	Freq_Get_Prescalar();
 80018c2:	f7ff ff9d 	bl	8001800 <Freq_Get_Prescalar>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000674 	.word	0x20000674
 80018d4:	20000060 	.word	0x20000060
 80018d8:	20000054 	.word	0x20000054

080018dc <changeDutyCycle>:
void changeDutyCycle(){
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
	temp = (uint32_t) (rxBuffer[6] - 48) * 1000; //First entry
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <changeDutyCycle+0xf0>)
 80018e8:	799b      	ldrb	r3, [r3, #6]
 80018ea:	3b30      	subs	r3, #48	; 0x30
 80018ec:	461a      	mov	r2, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fb03 f302 	mul.w	r3, r3, r2
 80018f6:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[7] - 48) * 100;
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <changeDutyCycle+0xf0>)
 80018fa:	79db      	ldrb	r3, [r3, #7]
 80018fc:	3b30      	subs	r3, #48	; 0x30
 80018fe:	461a      	mov	r2, r3
 8001900:	2364      	movs	r3, #100	; 0x64
 8001902:	fb03 f302 	mul.w	r3, r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[8] - 48) * 10;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <changeDutyCycle+0xf0>)
 800190e:	7a1b      	ldrb	r3, [r3, #8]
 8001910:	3b30      	subs	r3, #48	; 0x30
 8001912:	461a      	mov	r2, r3
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	607b      	str	r3, [r7, #4]
	temp = temp + (uint32_t) (rxBuffer[9] - 48);
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <changeDutyCycle+0xf0>)
 8001926:	7a5b      	ldrb	r3, [r3, #9]
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	3b30      	subs	r3, #48	; 0x30
 8001930:	607b      	str	r3, [r7, #4]
	dutyCycle = temp;
 8001932:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <changeDutyCycle+0xf4>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 100; i++) {
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e018      	b.n	8001970 <changeDutyCycle+0x94>
		dac_value[i] = ((float) offset / 3300) * 4096;
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <changeDutyCycle+0xf8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800194a:	eddf 6a23 	vldr	s13, [pc, #140]	; 80019d8 <changeDutyCycle+0xfc>
 800194e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001952:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80019dc <changeDutyCycle+0x100>
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195e:	ee17 1a90 	vmov	r1, s15
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <changeDutyCycle+0x104>)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b63      	cmp	r3, #99	; 0x63
 8001974:	dde3      	ble.n	800193e <changeDutyCycle+0x62>
	}
	for (int i = 0; i < (dutyCycle); i++) {
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	e01b      	b.n	80019b4 <changeDutyCycle+0xd8>
		dac_value[i] = ((float) (offset+amplitude) / 3300) * 4096;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <changeDutyCycle+0xf8>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <changeDutyCycle+0x108>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4413      	add	r3, r2
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198e:	eddf 6a12 	vldr	s13, [pc, #72]	; 80019d8 <changeDutyCycle+0xfc>
 8001992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001996:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80019dc <changeDutyCycle+0x100>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a2:	ee17 1a90 	vmov	r1, s15
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <changeDutyCycle+0x104>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < (dutyCycle); i++) {
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <changeDutyCycle+0xf4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3de      	bcc.n	800197c <changeDutyCycle+0xa0>
	}

}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000674 	.word	0x20000674
 80019d0:	20000064 	.word	0x20000064
 80019d4:	20000058 	.word	0x20000058
 80019d8:	454e4000 	.word	0x454e4000
 80019dc:	45800000 	.word	0x45800000
 80019e0:	20000760 	.word	0x20000760
 80019e4:	2000005c 	.word	0x2000005c

080019e8 <setSignalType>:
void setSignalType() {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	if (rxBuffer[6] == 'd') {
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <setSignalType+0x40>)
 80019ee:	799b      	ldrb	r3, [r3, #6]
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d102      	bne.n	80019fa <setSignalType+0x12>
		//Set DAC in DC config
		signalTypeState = 0;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <setSignalType+0x44>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	}
	if (rxBuffer[6] == 's') {
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <setSignalType+0x40>)
 80019fc:	799b      	ldrb	r3, [r3, #6]
 80019fe:	2b73      	cmp	r3, #115	; 0x73
 8001a00:	d102      	bne.n	8001a08 <setSignalType+0x20>
		//Set DAC in sine config
		signalTypeState = 1;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <setSignalType+0x44>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
	}
	if (rxBuffer[6] == 'p') {
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <setSignalType+0x40>)
 8001a0a:	799b      	ldrb	r3, [r3, #6]
 8001a0c:	2b70      	cmp	r3, #112	; 0x70
 8001a0e:	d102      	bne.n	8001a16 <setSignalType+0x2e>
		signalTypeState = 2;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <setSignalType+0x44>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
		//Set DAC in pulse config
	}
	if (outputOnOff == 1){
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <setSignalType+0x48>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <setSignalType+0x3a>
		setOutputOn();
 8001a1e:	f7ff fc5f 	bl	80012e0 <setOutputOn>
	}
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000674 	.word	0x20000674
 8001a2c:	2000026e 	.word	0x2000026e
 8001a30:	20000270 	.word	0x20000270

08001a34 <SetOutputType>:

void SetOutputType() {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	//@,*,m,t,!\n
	// a, o, f, d, c, t (Type, Amplitude, Offset, Frequency, Duty cycle, Temperature
	//what we work with
	////0 = t (Type), 1 = a (Amplitude), 2 = o (Offset), 3 = f (Frequency), 4 = d (Duty Cycle), 5 = c (Temperature)
	//signalParameterState
	if (rxBuffer[4] == 't') { // Set Type
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <SetOutputType+0x6c>)
 8001a3a:	791b      	ldrb	r3, [r3, #4]
 8001a3c:	2b74      	cmp	r3, #116	; 0x74
 8001a3e:	d101      	bne.n	8001a44 <SetOutputType+0x10>
		setSignalType();
 8001a40:	f7ff ffd2 	bl	80019e8 <setSignalType>
		//signalTypeState
		//signalParameterState = 0;
		//HAL_UART_Transmit(&huart2, (uint8_t*) "OutPut Type is type", 19, 50);
	}
	if (rxBuffer[4] == 'a') { // Set Amplitude
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <SetOutputType+0x6c>)
 8001a46:	791b      	ldrb	r3, [r3, #4]
 8001a48:	2b61      	cmp	r3, #97	; 0x61
 8001a4a:	d104      	bne.n	8001a56 <SetOutputType+0x22>
		signalParameterState = 1;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <SetOutputType+0x70>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
		changeAmplitude();
 8001a52:	f7ff fcd5 	bl	8001400 <changeAmplitude>

		//HAL_UART_Transmit(&huart2, (uint8_t*) "Measure Mode is ampl", 20, 50);
	}
	if (rxBuffer[4] == 'o') { // Set Offset
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <SetOutputType+0x6c>)
 8001a58:	791b      	ldrb	r3, [r3, #4]
 8001a5a:	2b6f      	cmp	r3, #111	; 0x6f
 8001a5c:	d104      	bne.n	8001a68 <SetOutputType+0x34>
		signalParameterState = 2;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <SetOutputType+0x70>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	701a      	strb	r2, [r3, #0]
		changeOffset();
 8001a64:	f7ff fdac 	bl	80015c0 <changeOffset>
		//HAL_UART_Transmit(&huart2, (uint8_t*) "Measure Mode is Of", 18, 50);
	}
	if (rxBuffer[4] == 'f') {  // Set Frequency
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <SetOutputType+0x6c>)
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	2b66      	cmp	r3, #102	; 0x66
 8001a6e:	d104      	bne.n	8001a7a <SetOutputType+0x46>
		signalParameterState = 3;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <SetOutputType+0x70>)
 8001a72:	2203      	movs	r2, #3
 8001a74:	701a      	strb	r2, [r3, #0]
		changeFreq();
 8001a76:	f7ff fef3 	bl	8001860 <changeFreq>

		//HAL_UART_Transmit(&huart2, (uint8_t*) "Measure Mode is Fr", 18, 50);
	}
	if (rxBuffer[4] == 'd') { // Set Duty Cycle
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <SetOutputType+0x6c>)
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d104      	bne.n	8001a8c <SetOutputType+0x58>
		//HAL_UART_Transmit(&huart2, (uint8_t*) "Measure Mode is DutyC", 21, 50);
		signalParameterState = 4;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <SetOutputType+0x70>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	701a      	strb	r2, [r3, #0]
		changeDutyCycle();
 8001a88:	f7ff ff28 	bl	80018dc <changeDutyCycle>
	}
	if (rxBuffer[4] == 'c') { // Set Temperature
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SetOutputType+0x6c>)
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	2b63      	cmp	r3, #99	; 0x63
 8001a92:	d102      	bne.n	8001a9a <SetOutputType+0x66>
		//HAL_UART_Transmit(&huart2, (uint8_t*) "Measure Mode is Temp", 20, 50);
		signalParameterState = 5;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <SetOutputType+0x70>)
 8001a96:	2205      	movs	r2, #5
 8001a98:	701a      	strb	r2, [r3, #0]
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000674 	.word	0x20000674
 8001aa4:	2000026f 	.word	0x2000026f

08001aa8 <HAL_UART_RxCpltCallback>:

uint8_t uartRecieve = 0;
uint8_t measureStateFlag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

	if (msg[0] == '@') {
 8001ab0:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_UART_RxCpltCallback+0x118>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b40      	cmp	r3, #64	; 0x40
 8001ab6:	d110      	bne.n	8001ada <HAL_UART_RxCpltCallback+0x32>
		for (int x = 0; x < 20; x++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e007      	b.n	8001ace <HAL_UART_RxCpltCallback+0x26>
			rxBuffer[x] = 0; //Clear buffer on new input command
 8001abe:	4a41      	ldr	r2, [pc, #260]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
		for (int x = 0; x < 20; x++) {
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b13      	cmp	r3, #19
 8001ad2:	ddf4      	ble.n	8001abe <HAL_UART_RxCpltCallback+0x16>
		}
		rxFlag = 1;
 8001ad4:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <HAL_UART_RxCpltCallback+0x120>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
	}
	if (rxFlag == 1) {
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_UART_RxCpltCallback+0x120>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d10a      	bne.n	8001af8 <HAL_UART_RxCpltCallback+0x50>
		rxBuffer[uartCounter] = msg[0];
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_UART_RxCpltCallback+0x124>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a36      	ldr	r2, [pc, #216]	; (8001bc0 <HAL_UART_RxCpltCallback+0x118>)
 8001ae8:	7811      	ldrb	r1, [r2, #0]
 8001aea:	4a36      	ldr	r2, [pc, #216]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001aec:	54d1      	strb	r1, [r2, r3]
		uartCounter++;
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_UART_RxCpltCallback+0x124>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	4a35      	ldr	r2, [pc, #212]	; (8001bcc <HAL_UART_RxCpltCallback+0x124>)
 8001af6:	6013      	str	r3, [r2, #0]
	}
	if (msg[0] == '\n') {
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_UART_RxCpltCallback+0x118>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b0a      	cmp	r3, #10
 8001afe:	d156      	bne.n	8001bae <HAL_UART_RxCpltCallback+0x106>
		uartRecieve = 1;
 8001b00:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <HAL_UART_RxCpltCallback+0x128>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
		rxFlag = 0;
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_UART_RxCpltCallback+0x120>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
		uartCounter = 0;
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_UART_RxCpltCallback+0x124>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

		if (rxBuffer[2] == '$') { //Set State
 8001b12:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b14:	789b      	ldrb	r3, [r3, #2]
 8001b16:	2b24      	cmp	r3, #36	; 0x24
 8001b18:	d102      	bne.n	8001b20 <HAL_UART_RxCpltCallback+0x78>
			measureStateFlag = 1;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_UART_RxCpltCallback+0x12c>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
		}
		if (rxBuffer[2] == '#') { //LCD Command/Write Char
 8001b20:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b22:	789b      	ldrb	r3, [r3, #2]
 8001b24:	2b23      	cmp	r3, #35	; 0x23
 8001b26:	d105      	bne.n	8001b34 <HAL_UART_RxCpltCallback+0x8c>
			writeCharFlag = 1; //@,#,1,H,!\n -> Display H on LCD
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_UART_RxCpltCallback+0x130>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
			displayMode = 1;
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_UART_RxCpltCallback+0x134>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
		}
		if (rxBuffer[2] == '^') {
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b36:	789b      	ldrb	r3, [r3, #2]
 8001b38:	2b5e      	cmp	r3, #94	; 0x5e
 8001b3a:	d105      	bne.n	8001b48 <HAL_UART_RxCpltCallback+0xa0>
			kapFlag = 1;
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_UART_RxCpltCallback+0x138>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
			displayMode = 0;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_UART_RxCpltCallback+0x134>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]

		}
		if (rxBuffer[2] == '*') //REQUEST STATUS
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8001b4e:	d12e      	bne.n	8001bae <HAL_UART_RxCpltCallback+0x106>
		{
			displayMode = 0;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_UART_RxCpltCallback+0x134>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
			if (rxBuffer[6] == '0') {
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b58:	799b      	ldrb	r3, [r3, #6]
 8001b5a:	2b30      	cmp	r3, #48	; 0x30
 8001b5c:	d102      	bne.n	8001b64 <HAL_UART_RxCpltCallback+0xbc>
				outputOnOff = 0;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_UART_RxCpltCallback+0x13c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
			}
			if (rxBuffer[6] == '1') {
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b66:	799b      	ldrb	r3, [r3, #6]
 8001b68:	2b31      	cmp	r3, #49	; 0x31
 8001b6a:	d117      	bne.n	8001b9c <HAL_UART_RxCpltCallback+0xf4>
				outputOnOff = 1;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_UART_RxCpltCallback+0x13c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
				if (rxBuffer[4] == 'd') {
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d102      	bne.n	8001b80 <HAL_UART_RxCpltCallback+0xd8>
					signalTypeState = 0;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_UART_RxCpltCallback+0x140>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
				}
				if (rxBuffer[4] == 's') {
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	2b73      	cmp	r3, #115	; 0x73
 8001b86:	d102      	bne.n	8001b8e <HAL_UART_RxCpltCallback+0xe6>
					signalTypeState = 1;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_UART_RxCpltCallback+0x140>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
				}
				if (rxBuffer[4] == 'p') {
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	2b70      	cmp	r3, #112	; 0x70
 8001b94:	d102      	bne.n	8001b9c <HAL_UART_RxCpltCallback+0xf4>
					signalTypeState = 2;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_UART_RxCpltCallback+0x140>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	701a      	strb	r2, [r3, #0]
				}
			}
			requestStateFlag = 1;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_UART_RxCpltCallback+0x144>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
			//RequestState(); // Request Format: @,*,s,0,!\n Response Format: @,DV,p,1,!\n

			if (rxBuffer[4] == 'm') {
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_UART_RxCpltCallback+0x11c>)
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	2b6d      	cmp	r3, #109	; 0x6d
				if (measureModeState == 1) //AC State, Request format @,*,m,f,!\n
				{
					//AC_Measure(rxBuffer);
				}
			}
			uartRecieve = 1;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_UART_RxCpltCallback+0x128>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*) msg, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_UART_RxCpltCallback+0x118>)
 8001bb2:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <HAL_UART_RxCpltCallback+0x148>)
 8001bb4:	f003 ff0a 	bl	80059cc <HAL_UART_Receive_IT>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000618 	.word	0x20000618
 8001bc4:	20000674 	.word	0x20000674
 8001bc8:	20000278 	.word	0x20000278
 8001bcc:	20000274 	.word	0x20000274
 8001bd0:	2000027f 	.word	0x2000027f
 8001bd4:	20000280 	.word	0x20000280
 8001bd8:	2000027c 	.word	0x2000027c
 8001bdc:	2000026a 	.word	0x2000026a
 8001be0:	2000027e 	.word	0x2000027e
 8001be4:	20000270 	.word	0x20000270
 8001be8:	2000026e 	.word	0x2000026e
 8001bec:	2000027d 	.word	0x2000027d
 8001bf0:	200006d8 	.word	0x200006d8

08001bf4 <debugLEDs>:

void debugLEDs() {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	if (menuState == 0) {
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <debugLEDs+0xa0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10c      	bne.n	8001c1a <debugLEDs+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f001 fd84 	bl	8003714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f001 fd7e 	bl	8003714 <HAL_GPIO_WritePin>
 8001c18:	e00f      	b.n	8001c3a <debugLEDs+0x46>
	} else if (menuState == 1) {
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <debugLEDs+0xa0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10b      	bne.n	8001c3a <debugLEDs+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2140      	movs	r1, #64	; 0x40
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2a:	f001 fd73 	bl	8003714 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f001 fd6d 	bl	8003714 <HAL_GPIO_WritePin>
	}
	if (measureModeState == 2 || measureModeState == 3){ //Display if the system is in current measurement mode
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <debugLEDs+0xa4>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d003      	beq.n	8001c4a <debugLEDs+0x56>
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <debugLEDs+0xa4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d105      	bne.n	8001c56 <debugLEDs+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <debugLEDs+0xa8>)
 8001c50:	f001 fd60 	bl	8003714 <HAL_GPIO_WritePin>
 8001c54:	e004      	b.n	8001c60 <debugLEDs+0x6c>
	} else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	4810      	ldr	r0, [pc, #64]	; (8001c9c <debugLEDs+0xa8>)
 8001c5c:	f001 fd5a 	bl	8003714 <HAL_GPIO_WritePin>
	}
	if (outputOnOff == 0) { //1 for output on.
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <debugLEDs+0xac>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <debugLEDs+0x84>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f001 fd4f 	bl	8003714 <HAL_GPIO_WritePin>
	} else if (outputOnOff == 1) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
	}
}
 8001c76:	e00a      	b.n	8001c8e <debugLEDs+0x9a>
	} else if (outputOnOff == 1) {
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <debugLEDs+0xac>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <debugLEDs+0x9a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8a:	f001 fd43 	bl	8003714 <HAL_GPIO_WritePin>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000026c 	.word	0x2000026c
 8001c98:	2000026d 	.word	0x2000026d
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	20000270 	.word	0x20000270

08001ca4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	displayMode = 0;
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
	firstTime = 0;
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]

	if (GPIO_Pin == GPIO_PIN_1 && HAL_GetTick() - lastTime > 100) { //Left Button
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001cc0:	f000 fe06 	bl	80028d0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d907      	bls.n	8001ce0 <HAL_GPIO_EXTI_Callback+0x3c>
		lastTime = HAL_GetTick();
 8001cd0:	f000 fdfe 	bl	80028d0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001cd8:	601a      	str	r2, [r3, #0]
		leftButton = 1;
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x100>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_10 && HAL_GetTick() - lastTime > 100) { //Right Button
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	d10f      	bne.n	8001d08 <HAL_GPIO_EXTI_Callback+0x64>
 8001ce8:	f000 fdf2 	bl	80028d0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	d907      	bls.n	8001d08 <HAL_GPIO_EXTI_Callback+0x64>
		lastTime = HAL_GetTick(); //D4
 8001cf8:	f000 fdea 	bl	80028d0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d00:	601a      	str	r2, [r3, #0]
		rightButton = 1;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x104>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_3 && HAL_GetTick() - lastTime > 50) { //Middle Button
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d116      	bne.n	8001d3c <HAL_GPIO_EXTI_Callback+0x98>
 8001d0e:	f000 fddf 	bl	80028d0 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b32      	cmp	r3, #50	; 0x32
 8001d1c:	d90e      	bls.n	8001d3c <HAL_GPIO_EXTI_Callback+0x98>
		lastTime = HAL_GetTick(); //D4
 8001d1e:	f000 fdd7 	bl	80028d0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d26:	601a      	str	r2, [r3, #0]
		menuState = 1 - menuState;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_GPIO_EXTI_Callback+0x108>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f1c3 0301 	rsb	r3, r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_GPIO_EXTI_Callback+0x108>)
 8001d34:	701a      	strb	r2, [r3, #0]
		middleButton = 1;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_0 && HAL_GetTick() - lastTime > 100) { //Top Button
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10f      	bne.n	8001d62 <HAL_GPIO_EXTI_Callback+0xbe>
 8001d42:	f000 fdc5 	bl	80028d0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d907      	bls.n	8001d62 <HAL_GPIO_EXTI_Callback+0xbe>
		lastTime = HAL_GetTick(); //D3
 8001d52:	f000 fdbd 	bl	80028d0 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d5a:	601a      	str	r2, [r3, #0]
		topButton = 1;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x110>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_2 && HAL_GetTick() - lastTime > 100) { //Bottom Button
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d10f      	bne.n	8001d88 <HAL_GPIO_EXTI_Callback+0xe4>
 8001d68:	f000 fdb2 	bl	80028d0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	; 0x64
 8001d76:	d907      	bls.n	8001d88 <HAL_GPIO_EXTI_Callback+0xe4>
		lastTime = HAL_GetTick(); //D4
 8001d78:	f000 fdaa 	bl	80028d0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d80:	601a      	str	r2, [r3, #0]
		bottomButton = 1;
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x114>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
	}

	buttonChange = 1;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_GPIO_EXTI_Callback+0x118>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000026a 	.word	0x2000026a
 8001d9c:	2000026b 	.word	0x2000026b
 8001da0:	20000260 	.word	0x20000260
 8001da4:	20000264 	.word	0x20000264
 8001da8:	20000265 	.word	0x20000265
 8001dac:	2000026c 	.word	0x2000026c
 8001db0:	20000268 	.word	0x20000268
 8001db4:	20000266 	.word	0x20000266
 8001db8:	20000267 	.word	0x20000267
 8001dbc:	20000269 	.word	0x20000269

08001dc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dc4:	f000 fd2a 	bl	800281c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dc8:	f000 f86e 	bl	8001ea8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dcc:	f000 f9e2 	bl	8002194 <MX_GPIO_Init>
	MX_DMA_Init();
 8001dd0:	f000 f9c2 	bl	8002158 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001dd4:	f000 f990 	bl	80020f8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001dd8:	f000 f8f4 	bl	8001fc4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001ddc:	f000 f93e 	bl	800205c <MX_TIM3_Init>
	MX_DAC1_Init();
 8001de0:	f000 f8c6 	bl	8001f70 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Transmit(&huart2, (uint8_t*) "@,19303688,!\n", 13, 50);
 8001de4:	2332      	movs	r3, #50	; 0x32
 8001de6:	220d      	movs	r2, #13
 8001de8:	4925      	ldr	r1, [pc, #148]	; (8001e80 <main+0xc0>)
 8001dea:	4826      	ldr	r0, [pc, #152]	; (8001e84 <main+0xc4>)
 8001dec:	f003 fd5a 	bl	80058a4 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) msg, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	4925      	ldr	r1, [pc, #148]	; (8001e88 <main+0xc8>)
 8001df4:	4823      	ldr	r0, [pc, #140]	; (8001e84 <main+0xc4>)
 8001df6:	f003 fde9 	bl	80059cc <HAL_UART_Receive_IT>

	lcd_Init();
 8001dfa:	f7fe fff1 	bl	8000de0 <lcd_Init>

	HAL_TIM_Base_Start(&htim2);
 8001dfe:	4823      	ldr	r0, [pc, #140]	; (8001e8c <main+0xcc>)
 8001e00:	f003 f87a 	bl	8004ef8 <HAL_TIM_Base_Start>
	Freq_Get_Prescalar();
 8001e04:	f7ff fcfc 	bl	8001800 <Freq_Get_Prescalar>

	//char test[] = "test";

	updateScreen();
 8001e08:	f7ff f92a 	bl	8001060 <updateScreen>
	lastTime = HAL_GetTick();
 8001e0c:	f000 fd60 	bl	80028d0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <main+0xd0>)
 8001e14:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (uartRecieve == 1){
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <main+0xd4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d104      	bne.n	8001e28 <main+0x68>
			updateScreen();
 8001e1e:	f7ff f91f 	bl	8001060 <updateScreen>
			uartRecieve = 0;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <main+0xd4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
		}

		if (measureStateFlag == 1 ){
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <main+0xd8>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <main+0x7e>
			//SetMeasureState(rxBuffer); //Input Format: : @,$,AV,!\n. No Response
			SetMeasureState();
 8001e30:	f7ff fa02 	bl	8001238 <SetMeasureState>
			updateScreen();
 8001e34:	f7ff f914 	bl	8001060 <updateScreen>
			measureStateFlag = 0;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <main+0xd8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
		}

		debugLEDs();
 8001e3e:	f7ff fed9 	bl	8001bf4 <debugLEDs>

		//if(topScroll == 1){

		//}

		if (kapFlag == 1) {
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <main+0xdc>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d104      	bne.n	8001e54 <main+0x94>
			SetOutputType();
 8001e4a:	f7ff fdf3 	bl	8001a34 <SetOutputType>
			kapFlag = 0;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <main+0xdc>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
		}
		if (requestStateFlag == 1) {
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <main+0xe0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <main+0xa6>
			RequestState();
 8001e5c:	f7ff fa6c 	bl	8001338 <RequestState>
			requestStateFlag = 0;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <main+0xe0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
		}

		if (buttonChange == 1) {
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <main+0xe4>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d1d3      	bne.n	8001e16 <main+0x56>
			updateScreen();
 8001e6e:	f7ff f8f7 	bl	8001060 <updateScreen>
			uartRecieve = 0;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <main+0xd4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			buttonChange = 0;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <main+0xe4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
		if (uartRecieve == 1){
 8001e7e:	e7ca      	b.n	8001e16 <main+0x56>
 8001e80:	08009830 	.word	0x08009830
 8001e84:	200006d8 	.word	0x200006d8
 8001e88:	20000618 	.word	0x20000618
 8001e8c:	2000068c 	.word	0x2000068c
 8001e90:	20000260 	.word	0x20000260
 8001e94:	2000027f 	.word	0x2000027f
 8001e98:	20000280 	.word	0x20000280
 8001e9c:	2000027e 	.word	0x2000027e
 8001ea0:	2000027d 	.word	0x2000027d
 8001ea4:	20000269 	.word	0x20000269

08001ea8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0a6      	sub	sp, #152	; 0x98
 8001eac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001eae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001eb2:	2228      	movs	r2, #40	; 0x28
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 ff3a 	bl	8006d30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ebc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2258      	movs	r2, #88	; 0x58
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 ff2c 	bl	8006d30 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001edc:	2301      	movs	r3, #1
 8001ede:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ef4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ef8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fc34 	bl	8003774 <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x6e>
		Error_Handler();
 8001f12:	f000 fa45 	bl	80023a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f16:	230f      	movs	r3, #15
 8001f18:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f30:	2102      	movs	r1, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fb34 	bl	80045a0 <HAL_RCC_ClockConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0x9a>
		Error_Handler();
 8001f3e:	f000 fa2f 	bl	80023a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <SystemClock_Config+0xc4>)
 8001f44:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_TIM2 | RCC_PERIPHCLK_TIM34;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fd59 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0xbc>
		Error_Handler();
 8001f60:	f000 fa1e 	bl	80023a0 <Error_Handler>
	}
}
 8001f64:	bf00      	nop
 8001f66:	3798      	adds	r7, #152	; 0x98
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	00300002 	.word	0x00300002

08001f70 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_DAC1_Init+0x4c>)
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <MX_DAC1_Init+0x50>)
 8001f84:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <MX_DAC1_Init+0x4c>)
 8001f88:	f000 fde1 	bl	8002b4e <HAL_DAC_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_DAC1_Init+0x26>
		Error_Handler();
 8001f92:	f000 fa05 	bl	80023a0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001f96:	2324      	movs	r3, #36	; 0x24
 8001f98:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_DAC1_Init+0x4c>)
 8001fa6:	f000 ff11 	bl	8002dcc <HAL_DAC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_DAC1_Init+0x44>
		Error_Handler();
 8001fb0:	f000 f9f6 	bl	80023a0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200002a0 	.word	0x200002a0
 8001fc0:	40007400 	.word	0x40007400

08001fc4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <MX_TIM2_Init+0x94>)
 8001fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1 - 1;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <MX_TIM2_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <MX_TIM2_Init+0x94>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <MX_TIM2_Init+0x94>)
 8001ff8:	2263      	movs	r2, #99	; 0x63
 8001ffa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MX_TIM2_Init+0x94>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <MX_TIM2_Init+0x94>)
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002008:	4813      	ldr	r0, [pc, #76]	; (8002058 <MX_TIM2_Init+0x94>)
 800200a:	f002 ff1d 	bl	8004e48 <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0x54>
		Error_Handler();
 8002014:	f000 f9c4 	bl	80023a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4619      	mov	r1, r3
 8002024:	480c      	ldr	r0, [pc, #48]	; (8002058 <MX_TIM2_Init+0x94>)
 8002026:	f003 f91d 	bl	8005264 <HAL_TIM_ConfigClockSource>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM2_Init+0x70>
		Error_Handler();
 8002030:	f000 f9b6 	bl	80023a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002034:	2320      	movs	r3, #32
 8002036:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_TIM2_Init+0x94>)
 8002042:	f003 fb37 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800204c:	f000 f9a8 	bl	80023a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000068c 	.word	0x2000068c

0800205c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <MX_TIM3_Init+0x94>)
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <MX_TIM3_Init+0x98>)
 800207e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8000;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <MX_TIM3_Init+0x94>)
 8002082:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002086:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <MX_TIM3_Init+0x94>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <MX_TIM3_Init+0x94>)
 8002090:	220a      	movs	r2, #10
 8002092:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_TIM3_Init+0x94>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <MX_TIM3_Init+0x94>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80020a0:	4813      	ldr	r0, [pc, #76]	; (80020f0 <MX_TIM3_Init+0x94>)
 80020a2:	f002 fed1 	bl	8004e48 <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM3_Init+0x54>
		Error_Handler();
 80020ac:	f000 f978 	bl	80023a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80020b6:	f107 0310 	add.w	r3, r7, #16
 80020ba:	4619      	mov	r1, r3
 80020bc:	480c      	ldr	r0, [pc, #48]	; (80020f0 <MX_TIM3_Init+0x94>)
 80020be:	f003 f8d1 	bl	8005264 <HAL_TIM_ConfigClockSource>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM3_Init+0x70>
		Error_Handler();
 80020c8:	f000 f96a 	bl	80023a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_TIM3_Init+0x94>)
 80020da:	f003 faeb 	bl	80056b4 <HAL_TIMEx_MasterConfigSynchronization>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80020e4:	f000 f95c 	bl	80023a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2000061c 	.word	0x2000061c
 80020f4:	40000400 	.word	0x40000400

080020f8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_USART2_UART_Init+0x58>)
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <MX_USART2_UART_Init+0x5c>)
 8002100:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002108:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_USART2_UART_Init+0x58>)
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_USART2_UART_Init+0x58>)
 800213c:	f003 fb64 	bl	8005808 <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8002146:	f000 f92b 	bl	80023a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200006d8 	.word	0x200006d8
 8002154:	40004400 	.word	0x40004400

08002158 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_DMA_Init+0x38>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <MX_DMA_Init+0x38>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6153      	str	r3, [r2, #20]
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_DMA_Init+0x38>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	200d      	movs	r0, #13
 800217c:	f000 fcb1 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002180:	200d      	movs	r0, #13
 8002182:	f000 fcca 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000

08002194 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b7a      	ldr	r3, [pc, #488]	; (8002394 <MX_GPIO_Init+0x200>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a79      	ldr	r2, [pc, #484]	; (8002394 <MX_GPIO_Init+0x200>)
 80021b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021b4:	6153      	str	r3, [r2, #20]
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <MX_GPIO_Init+0x200>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80021c2:	4b74      	ldr	r3, [pc, #464]	; (8002394 <MX_GPIO_Init+0x200>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a73      	ldr	r2, [pc, #460]	; (8002394 <MX_GPIO_Init+0x200>)
 80021c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b71      	ldr	r3, [pc, #452]	; (8002394 <MX_GPIO_Init+0x200>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b6e      	ldr	r3, [pc, #440]	; (8002394 <MX_GPIO_Init+0x200>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4a6d      	ldr	r2, [pc, #436]	; (8002394 <MX_GPIO_Init+0x200>)
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	6153      	str	r3, [r2, #20]
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <MX_GPIO_Init+0x200>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b68      	ldr	r3, [pc, #416]	; (8002394 <MX_GPIO_Init+0x200>)
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4a67      	ldr	r2, [pc, #412]	; (8002394 <MX_GPIO_Init+0x200>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6153      	str	r3, [r2, #20]
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <MX_GPIO_Init+0x200>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800220a:	2200      	movs	r2, #0
 800220c:	f44f 51d7 	mov.w	r1, #6880	; 0x1ae0
 8002210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002214:	f001 fa7e 	bl	8003714 <HAL_GPIO_WritePin>
			LD2_Pin | D2_Pin | D3_Pin | D5_Pin | DB4_Pin | DB5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Rs_Pin | DB6_Pin | D4_Pin | DB7_Pin,
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800221e:	485e      	ldr	r0, [pc, #376]	; (8002398 <MX_GPIO_Init+0x204>)
 8002220:	f001 fa78 	bl	8003714 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RNW_Pin | E_Pin, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f640 0104 	movw	r1, #2052	; 0x804
 800222a:	485c      	ldr	r0, [pc, #368]	; (800239c <MX_GPIO_Init+0x208>)
 800222c:	f001 fa72 	bl	8003714 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002234:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002236:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800223a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4854      	ldr	r0, [pc, #336]	; (8002398 <MX_GPIO_Init+0x204>)
 8002248:	f001 f8c2 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : left_Button_Pin down_Button_Pin middle_Button_Pin */
	GPIO_InitStruct.Pin = left_Button_Pin | down_Button_Pin | middle_Button_Pin;
 800224c:	230e      	movs	r3, #14
 800224e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002250:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002254:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	484d      	ldr	r0, [pc, #308]	; (8002398 <MX_GPIO_Init+0x204>)
 8002262:	f001 f8b5 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin D2_Pin D3_Pin D5_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | D2_Pin | D3_Pin | D5_Pin;
 8002266:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800226a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f001 f8a5 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Rs_Pin D4_Pin */
	GPIO_InitStruct.Pin = Rs_Pin | D4_Pin;
 8002286:	2390      	movs	r3, #144	; 0x90
 8002288:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	483e      	ldr	r0, [pc, #248]	; (8002398 <MX_GPIO_Init+0x204>)
 800229e:	f001 f897 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : top_Button_Pin right_Button_Pin */
	GPIO_InitStruct.Pin = top_Button_Pin | right_Button_Pin;
 80022a2:	f240 4301 	movw	r3, #1025	; 0x401
 80022a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4838      	ldr	r0, [pc, #224]	; (800239c <MX_GPIO_Init+0x208>)
 80022ba:	f001 f889 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RNW_Pin E_Pin */
	GPIO_InitStruct.Pin = RNW_Pin | E_Pin;
 80022be:	f640 0304 	movw	r3, #2052	; 0x804
 80022c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4831      	ldr	r0, [pc, #196]	; (800239c <MX_GPIO_Init+0x208>)
 80022d8:	f001 f87a 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DB6_Pin DB7_Pin */
	GPIO_InitStruct.Pin = DB6_Pin | DB7_Pin;
 80022dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80022e2:	2311      	movs	r3, #17
 80022e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4828      	ldr	r0, [pc, #160]	; (8002398 <MX_GPIO_Init+0x204>)
 80022f6:	f001 f86b 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DB4_Pin DB5_Pin */
	GPIO_InitStruct.Pin = DB4_Pin | DB5_Pin;
 80022fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002300:	2311      	movs	r3, #17
 8002302:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f001 f85b 	bl	80033d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800231a:	23c0      	movs	r3, #192	; 0xc0
 800231c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	2312      	movs	r3, #18
 8002320:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800232a:	2304      	movs	r3, #4
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <MX_GPIO_Init+0x208>)
 8002336:	f001 f84b 	bl	80033d0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2006      	movs	r0, #6
 8002340:	f000 fbcf 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002344:	2006      	movs	r0, #6
 8002346:	f000 fbe8 	bl	8002b1a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2007      	movs	r0, #7
 8002350:	f000 fbc7 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002354:	2007      	movs	r0, #7
 8002356:	f000 fbe0 	bl	8002b1a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2008      	movs	r0, #8
 8002360:	f000 fbbf 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8002364:	2008      	movs	r0, #8
 8002366:	f000 fbd8 	bl	8002b1a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2009      	movs	r0, #9
 8002370:	f000 fbb7 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002374:	2009      	movs	r0, #9
 8002376:	f000 fbd0 	bl	8002b1a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2028      	movs	r0, #40	; 0x28
 8002380:	f000 fbaf 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002384:	2028      	movs	r0, #40	; 0x28
 8002386:	f000 fbc8 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	48000800 	.word	0x48000800
 800239c:	48000400 	.word	0x48000400

080023a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_MspInit+0x44>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_MspInit+0x44>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6193      	str	r3, [r2, #24]
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_MspInit+0x44>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_MspInit+0x44>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_MspInit+0x44>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_MspInit+0x44>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023e6:	2007      	movs	r0, #7
 80023e8:	f000 fb70 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <HAL_DAC_MspInit+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d152      	bne.n	80024c0 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_DAC_MspInit+0xd4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_DAC_MspInit+0xd4>)
 8002420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_DAC_MspInit+0xd4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_DAC_MspInit+0xd4>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_DAC_MspInit+0xd4>)
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	6153      	str	r3, [r2, #20]
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_DAC_MspInit+0xd4>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800244a:	2310      	movs	r3, #16
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244e:	2303      	movs	r3, #3
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f000 ffb6 	bl	80033d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 8002466:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_DAC_MspInit+0xdc>)
 8002468:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 800246c:	2210      	movs	r2, #16
 800246e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 800247e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002482:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 8002486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 800248e:	2220      	movs	r2, #32
 8002490:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 800249a:	f000 fd6e 	bl	8002f7a <HAL_DMA_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80024a4:	f7ff ff7c 	bl	80023a0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_DAC_MspInit+0xe0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_DAC_MspInit+0xe0>)
 80024ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b2:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_DAC_MspInit+0xd8>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80024c0:	bf00      	nop
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40007400 	.word	0x40007400
 80024cc:	40021000 	.word	0x40021000
 80024d0:	200005d4 	.word	0x200005d4
 80024d4:	40020030 	.word	0x40020030
 80024d8:	40010000 	.word	0x40010000

080024dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d114      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_TIM_Base_MspInit+0x78>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_TIM_Base_MspInit+0x78>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_TIM_Base_MspInit+0x78>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	201c      	movs	r0, #28
 800250c:	f000 fae9 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002510:	201c      	movs	r0, #28
 8002512:	f000 fb02 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002516:	e018      	b.n	800254a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_TIM_Base_MspInit+0x7c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d113      	bne.n	800254a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_TIM_Base_MspInit+0x78>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <HAL_TIM_Base_MspInit+0x78>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_TIM_Base_MspInit+0x78>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	201d      	movs	r0, #29
 8002540:	f000 facf 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002544:	201d      	movs	r0, #29
 8002546:	f000 fae8 	bl	8002b1a <HAL_NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40000400 	.word	0x40000400

0800255c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_UART_MspInit+0x8c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d130      	bne.n	80025e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x90>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <HAL_UART_MspInit+0x90>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_UART_MspInit+0x90>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_UART_MspInit+0x90>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <HAL_UART_MspInit+0x90>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	6153      	str	r3, [r2, #20]
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_UART_MspInit+0x90>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025ae:	230c      	movs	r3, #12
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025be:	2307      	movs	r3, #7
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025cc:	f000 ff00 	bl	80033d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2026      	movs	r0, #38	; 0x26
 80025d6:	f000 fa84 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025da:	2026      	movs	r0, #38	; 0x26
 80025dc:	f000 fa9d 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40021000 	.word	0x40021000

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <MemManage_Handler+0x4>

0800260a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <BusFault_Handler+0x4>

08002610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler+0x4>

08002616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002644:	f000 f930 	bl	80028a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002650:	2001      	movs	r0, #1
 8002652:	f001 f877 	bl	8003744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}

0800265a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800265e:	2002      	movs	r0, #2
 8002660:	f001 f870 	bl	8003744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800266c:	2004      	movs	r0, #4
 800266e:	f001 f869 	bl	8003744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}

08002676 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800267a:	2008      	movs	r0, #8
 800267c:	f001 f862 	bl	8003744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA1_Channel3_IRQHandler+0x10>)
 800268a:	f000 fd93 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200005d4 	.word	0x200005d4

08002698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800269c:	4803      	ldr	r0, [pc, #12]	; (80026ac <TIM2_IRQHandler+0x14>)
 800269e:	f002 fcc2 	bl	8005026 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 80026a2:	4802      	ldr	r0, [pc, #8]	; (80026ac <TIM2_IRQHandler+0x14>)
 80026a4:	f002 fc90 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM2_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000068c 	.word	0x2000068c

080026b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80026b4:	4816      	ldr	r0, [pc, #88]	; (8002710 <TIM3_IRQHandler+0x60>)
 80026b6:	f002 fcb6 	bl	8005026 <HAL_TIM_IRQHandler>

if(midflag == 1){
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <TIM3_IRQHandler+0x64>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d11e      	bne.n	8002700 <TIM3_IRQHandler+0x50>
	if ((mid ==  0) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <TIM3_IRQHandler+0x68>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <TIM3_IRQHandler+0x2e>
 80026ca:	2108      	movs	r1, #8
 80026cc:	4813      	ldr	r0, [pc, #76]	; (800271c <TIM3_IRQHandler+0x6c>)
 80026ce:	f001 f809 	bl	80036e4 <HAL_GPIO_ReadPin>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <TIM3_IRQHandler+0x2e>
		mid = 1;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <TIM3_IRQHandler+0x68>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
	}
	if ((mid ==  1) && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <TIM3_IRQHandler+0x68>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d109      	bne.n	80026fa <TIM3_IRQHandler+0x4a>
 80026e6:	2108      	movs	r1, #8
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <TIM3_IRQHandler+0x6c>)
 80026ea:	f000 fffb 	bl	80036e4 <HAL_GPIO_ReadPin>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <TIM3_IRQHandler+0x4a>
		mid = 0;
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <TIM3_IRQHandler+0x68>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
		}
	midflag = 0;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <TIM3_IRQHandler+0x64>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
}
	HAL_TIM_Base_Stop_IT(&htim3);
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <TIM3_IRQHandler+0x60>)
 8002702:	f002 fc61 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002706:	4802      	ldr	r0, [pc, #8]	; (8002710 <TIM3_IRQHandler+0x60>)
 8002708:	f002 fc8d 	bl	8005026 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000061c 	.word	0x2000061c
 8002714:	2000075c 	.word	0x2000075c
 8002718:	200008f4 	.word	0x200008f4
 800271c:	48000800 	.word	0x48000800

08002720 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <USART2_IRQHandler+0x10>)
 8002726:	f003 f99f 	bl	8005a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200006d8 	.word	0x200006d8

08002734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002738:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800273c:	f001 f802 	bl	8003744 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002744:	f000 fffe 	bl	8003744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x50>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x16>
		heap_end = &end;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <_sbrk+0x50>)
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <_sbrk+0x54>)
 8002760:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <_sbrk+0x50>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <_sbrk+0x50>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	466a      	mov	r2, sp
 8002772:	4293      	cmp	r3, r2
 8002774:	d907      	bls.n	8002786 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002776:	f004 fab1 	bl	8006cdc <__errno>
 800277a:	4602      	mov	r2, r0
 800277c:	230c      	movs	r3, #12
 800277e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	e006      	b.n	8002794 <_sbrk+0x48>
	}

	heap_end += incr;
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <_sbrk+0x50>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a03      	ldr	r2, [pc, #12]	; (800279c <_sbrk+0x50>)
 8002790:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000284 	.word	0x20000284
 80027a0:	20000900 	.word	0x20000900

080027a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <SystemInit+0x20>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <SystemInit+0x20>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002800 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ce:	490e      	ldr	r1, [pc, #56]	; (8002808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d0:	4a0e      	ldr	r2, [pc, #56]	; (800280c <LoopForever+0xe>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e4:	4c0b      	ldr	r4, [pc, #44]	; (8002814 <LoopForever+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027f2:	f7ff ffd7 	bl	80027a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027f6:	f004 fa77 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027fa:	f7ff fae1 	bl	8001dc0 <main>

080027fe <LoopForever>:

LoopForever:
    b LoopForever
 80027fe:	e7fe      	b.n	80027fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002800:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002808:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 800280c:	08009c80 	.word	0x08009c80
  ldr r2, =_sbss
 8002810:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8002814:	20000900 	.word	0x20000900

08002818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002818:	e7fe      	b.n	8002818 <ADC1_2_IRQHandler>
	...

0800281c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_Init+0x28>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_Init+0x28>)
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 f94d 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002832:	2000      	movs	r0, #0
 8002834:	f000 f808 	bl	8002848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002838:	f7ff fdba 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_InitTick+0x54>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_InitTick+0x58>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f965 	bl	8002b36 <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00e      	b.n	8002894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d80a      	bhi.n	8002892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287c:	2200      	movs	r2, #0
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f000 f92d 	bl	8002ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002888:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <HAL_InitTick+0x5c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000068 	.word	0x20000068
 80028a0:	20000070 	.word	0x20000070
 80028a4:	2000006c 	.word	0x2000006c

080028a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_IncTick+0x24>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_IncTick+0x24>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000070 	.word	0x20000070
 80028cc:	200008f8 	.word	0x200008f8

080028d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	200008f8 	.word	0x200008f8

080028e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d005      	beq.n	800290e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_Delay+0x40>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800290e:	bf00      	nop
 8002910:	f7ff ffde 	bl	80028d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8f7      	bhi.n	8002910 <HAL_Delay+0x28>
  {
  }
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000070 	.word	0x20000070

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff29 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af4:	f7ff ff3e 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff8e 	bl	8002a20 <NVIC_EncodePriority>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff31 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffa2 	bl	8002a88 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e014      	b.n	8002b8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	791b      	ldrb	r3, [r3, #4]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fc41 	bl	80023f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	400a      	ands	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa72 	bl	80030c6 <HAL_DMA_Abort>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e00e      	b.n	8002c16 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa62 	bl	80030c6 <HAL_DMA_Abort>
 8002c02:	4603      	mov	r3, r0
 8002c04:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c14:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	711a      	strb	r2, [r3, #4]
 8002c22:	e002      	b.n	8002c2a <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	795b      	ldrb	r3, [r3, #5]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_DAC_Start_DMA+0x1e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e08e      	b.n	8002dac <HAL_DAC_Start_DMA+0x13c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2202      	movs	r2, #2
 8002c98:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12a      	bne.n	8002cf6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_DAC_Start_DMA+0x144>)
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_DAC_Start_DMA+0x148>)
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_DAC_Start_DMA+0x14c>)
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d009      	beq.n	8002ce2 <HAL_DAC_Start_DMA+0x72>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d00c      	beq.n	8002cec <HAL_DAC_Start_DMA+0x7c>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d000      	beq.n	8002cd8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002cd6:	e039      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	617b      	str	r3, [r7, #20]
        break;
 8002ce0:	e034      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	617b      	str	r3, [r7, #20]
        break;
 8002cea:	e02f      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	617b      	str	r3, [r7, #20]
        break;
 8002cf4:	e02a      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <HAL_DAC_Start_DMA+0x150>)
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_DAC_Start_DMA+0x154>)
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <HAL_DAC_Start_DMA+0x158>)
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d009      	beq.n	8002d38 <HAL_DAC_Start_DMA+0xc8>
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d00c      	beq.n	8002d42 <HAL_DAC_Start_DMA+0xd2>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d000      	beq.n	8002d2e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d2c:	e00e      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	617b      	str	r3, [r7, #20]
        break;
 8002d36:	e009      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3318      	adds	r3, #24
 8002d3e:	617b      	str	r3, [r7, #20]
        break;
 8002d40:	e004      	b.n	8002d4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	331c      	adds	r3, #28
 8002d48:	617b      	str	r3, [r7, #20]
        break;
 8002d4a:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6898      	ldr	r0, [r3, #8]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	f000 f94c 	bl	8003008 <HAL_DMA_Start_IT>
 8002d70:	e00e      	b.n	8002d90 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d80:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68d8      	ldr	r0, [r3, #12]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	f000 f93c 	bl	8003008 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	08002ea3 	.word	0x08002ea3
 8002db8:	08002ec5 	.word	0x08002ec5
 8002dbc:	08002ee1 	.word	0x08002ee1
 8002dc0:	08002f0f 	.word	0x08002f0f
 8002dc4:	08002f31 	.word	0x08002f31
 8002dc8:	08002f4d 	.word	0x08002f4d

08002dcc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	795b      	ldrb	r3, [r3, #5]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_DAC_ConfigChannel+0x20>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e036      	b.n	8002e5a <HAL_DAC_ConfigChannel+0x8e>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002e00:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	22c0      	movs	r2, #192	; 0xc0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff febf 	bl	8002c34 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	711a      	strb	r2, [r3, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff feb8 	bl	8002c48 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff feae 	bl	8002c5c <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	711a      	strb	r2, [r3, #4]
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff ffa2 	bl	8002e66 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	711a      	strb	r2, [r3, #4]
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff ff9b 	bl	8002e7a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ff91 	bl	8002e8e <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	711a      	strb	r2, [r3, #4]
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e037      	b.n	8003000 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fa6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9b8 	bl	8003358 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}  
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Start_IT+0x20>
 8003024:	2302      	movs	r3, #2
 8003026:	e04a      	b.n	80030be <HAL_DMA_Start_IT+0xb6>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003036:	2b01      	cmp	r3, #1
 8003038:	d13a      	bne.n	80030b0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f94b 	bl	80032fa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 020e 	orr.w	r2, r2, #14
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e00f      	b.n	800309e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 020a 	orr.w	r2, r2, #10
 800308c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0204 	bic.w	r2, r2, #4
 800309c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e005      	b.n	80030bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d008      	beq.n	80030ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e020      	b.n	800312c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 020e 	bic.w	r2, r2, #14
 80030f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800314a:	2b02      	cmp	r3, #2
 800314c:	d005      	beq.n	800315a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2204      	movs	r2, #4
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e027      	b.n	80031aa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 020e 	bic.w	r2, r2, #14
 8003168:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f202 	lsl.w	r2, r1, r2
 8003188:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
    } 
  }
  return status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2204      	movs	r2, #4
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d024      	beq.n	8003226 <HAL_DMA_IRQHandler+0x72>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01f      	beq.n	8003226 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0204 	bic.w	r2, r2, #4
 8003202:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	2104      	movs	r1, #4
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d06a      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003224:	e065      	b.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2202      	movs	r2, #2
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02c      	beq.n	8003290 <HAL_DMA_IRQHandler+0xdc>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d027      	beq.n	8003290 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020a 	bic.w	r2, r2, #10
 800325c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	2102      	movs	r1, #2
 8003270:	fa01 f202 	lsl.w	r2, r1, r2
 8003274:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d035      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800328e:	e030      	b.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2208      	movs	r2, #8
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d028      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d023      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 020e 	bic.w	r2, r2, #14
 80032b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    }
  }
}  
 80032f0:	e7ff      	b.n	80032f2 <HAL_DMA_IRQHandler+0x13e>
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b10      	cmp	r3, #16
 8003326:	d108      	bne.n	800333a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003338:	e007      	b.n	800334a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <DMA_CalcBaseAndBitshift+0x60>)
 8003368:	429a      	cmp	r2, r3
 800336a:	d80f      	bhi.n	800338c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <DMA_CalcBaseAndBitshift+0x64>)
 8003374:	4413      	add	r3, r2
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800338a:	e00e      	b.n	80033aa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <DMA_CalcBaseAndBitshift+0x70>)
 8003394:	4413      	add	r3, r2
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <DMA_CalcBaseAndBitshift+0x74>)
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40020407 	.word	0x40020407
 80033bc:	bffdfff8 	.word	0xbffdfff8
 80033c0:	cccccccd 	.word	0xcccccccd
 80033c4:	40020000 	.word	0x40020000
 80033c8:	bffdfbf8 	.word	0xbffdfbf8
 80033cc:	40020400 	.word	0x40020400

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033de:	e160      	b.n	80036a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8152 	beq.w	800369c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d005      	beq.n	8003410 <HAL_GPIO_Init+0x40>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d130      	bne.n	8003472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003446:	2201      	movs	r2, #1
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 0201 	and.w	r2, r3, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b03      	cmp	r3, #3
 800347c:	d017      	beq.n	80034ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	2203      	movs	r2, #3
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d123      	bne.n	8003502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	08da      	lsrs	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	220f      	movs	r2, #15
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	6939      	ldr	r1, [r7, #16]
 80034fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0203 	and.w	r2, r3, #3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80ac 	beq.w	800369c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003544:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_GPIO_Init+0x2f0>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	4a5d      	ldr	r2, [pc, #372]	; (80036c0 <HAL_GPIO_Init+0x2f0>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6193      	str	r3, [r2, #24]
 8003550:	4b5b      	ldr	r3, [pc, #364]	; (80036c0 <HAL_GPIO_Init+0x2f0>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800355c:	4a59      	ldr	r2, [pc, #356]	; (80036c4 <HAL_GPIO_Init+0x2f4>)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003586:	d025      	beq.n	80035d4 <HAL_GPIO_Init+0x204>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a4f      	ldr	r2, [pc, #316]	; (80036c8 <HAL_GPIO_Init+0x2f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01f      	beq.n	80035d0 <HAL_GPIO_Init+0x200>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <HAL_GPIO_Init+0x2fc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d019      	beq.n	80035cc <HAL_GPIO_Init+0x1fc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a4d      	ldr	r2, [pc, #308]	; (80036d0 <HAL_GPIO_Init+0x300>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_GPIO_Init+0x1f8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a4c      	ldr	r2, [pc, #304]	; (80036d4 <HAL_GPIO_Init+0x304>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00d      	beq.n	80035c4 <HAL_GPIO_Init+0x1f4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a4b      	ldr	r2, [pc, #300]	; (80036d8 <HAL_GPIO_Init+0x308>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <HAL_GPIO_Init+0x1f0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <HAL_GPIO_Init+0x30c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_GPIO_Init+0x1ec>
 80035b8:	2306      	movs	r3, #6
 80035ba:	e00c      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035bc:	2307      	movs	r3, #7
 80035be:	e00a      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035c0:	2305      	movs	r3, #5
 80035c2:	e008      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e006      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035c8:	2303      	movs	r3, #3
 80035ca:	e004      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e002      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_GPIO_Init+0x206>
 80035d4:	2300      	movs	r3, #0
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	f002 0203 	and.w	r2, r2, #3
 80035dc:	0092      	lsls	r2, r2, #2
 80035de:	4093      	lsls	r3, r2
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035e6:	4937      	ldr	r1, [pc, #220]	; (80036c4 <HAL_GPIO_Init+0x2f4>)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	3302      	adds	r3, #2
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f4:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_GPIO_Init+0x310>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003618:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_GPIO_Init+0x310>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_GPIO_Init+0x310>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003642:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_GPIO_Init+0x310>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_GPIO_Init+0x310>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43db      	mvns	r3, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800366c:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <HAL_GPIO_Init+0x310>)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_GPIO_Init+0x310>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_GPIO_Init+0x310>)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3301      	adds	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f47f ae97 	bne.w	80033e0 <HAL_GPIO_Init+0x10>
  }
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40010000 	.word	0x40010000
 80036c8:	48000400 	.word	0x48000400
 80036cc:	48000800 	.word	0x48000800
 80036d0:	48000c00 	.word	0x48000c00
 80036d4:	48001000 	.word	0x48001000
 80036d8:	48001400 	.word	0x48001400
 80036dc:	48001800 	.word	0x48001800
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e001      	b.n	8003706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
 8003720:	4613      	mov	r3, r2
 8003722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003724:	787b      	ldrb	r3, [r7, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003730:	e002      	b.n	8003738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fa9e 	bl	8001ca4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40010400 	.word	0x40010400

08003774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800377a:	af00      	add	r7, sp, #0
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f000 bf01 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8160 	beq.w	8003a5e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800379e:	4bae      	ldr	r3, [pc, #696]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037aa:	4bab      	ldr	r3, [pc, #684]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d159      	bne.n	800386a <HAL_RCC_OscConfig+0xf6>
 80037b6:	4ba8      	ldr	r3, [pc, #672]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d152      	bne.n	800386a <HAL_RCC_OscConfig+0xf6>
 80037c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0x82>
 80037f0:	4b99      	ldr	r3, [pc, #612]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0xae>
 80037f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800380a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003812:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800381e:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003826:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800382a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003836:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f002 021f 	and.w	r2, r2, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8102 	beq.w	8003a5c <HAL_RCC_OscConfig+0x2e8>
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 80fc 	bne.w	8003a5c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f000 be93 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x110>
 8003876:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a77      	ldr	r2, [pc, #476]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e030      	b.n	80038e6 <HAL_RCC_OscConfig+0x172>
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x134>
 800388e:	4b72      	ldr	r3, [pc, #456]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a71      	ldr	r2, [pc, #452]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6e      	ldr	r2, [pc, #440]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01e      	b.n	80038e6 <HAL_RCC_OscConfig+0x172>
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b2:	d10c      	bne.n	80038ce <HAL_RCC_OscConfig+0x15a>
 80038b4:	4b68      	ldr	r3, [pc, #416]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a67      	ldr	r2, [pc, #412]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a64      	ldr	r2, [pc, #400]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	e00b      	b.n	80038e6 <HAL_RCC_OscConfig+0x172>
 80038ce:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a61      	ldr	r2, [pc, #388]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5e      	ldr	r2, [pc, #376]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80038e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d059      	beq.n	80039a4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe ffee 	bl	80028d0 <HAL_GetTick>
 80038f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fa:	f7fe ffe9 	bl	80028d0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d902      	bls.n	8003910 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	f000 be40 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>
 8003910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003914:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003924:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_RCC_OscConfig+0x1ce>
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x1fa>
 8003942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003946:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800395a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800395e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003972:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003976:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800397a:	fa92 f2a2 	rbit	r2, r2
 800397e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003982:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f042 0220 	orr.w	r2, r2, #32
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f002 021f 	and.w	r2, r2, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ab      	beq.n	80038fa <HAL_RCC_OscConfig+0x186>
 80039a2:	e05c      	b.n	8003a5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe ff94 	bl	80028d0 <HAL_GetTick>
 80039a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ae:	f7fe ff8f 	bl	80028d0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d902      	bls.n	80039c4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	f000 bde6 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>
 80039c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80039d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d102      	bne.n	80039f6 <HAL_RCC_OscConfig+0x282>
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x2ae>
 80039f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_RCC_OscConfig+0x2e4>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a26:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003a2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003a2e:	fa92 f2a2 	rbit	r2, r2
 8003a32:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003a36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ab      	bne.n	80039ae <HAL_RCC_OscConfig+0x23a>
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_OscConfig+0x2ea>
 8003a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8170 	beq.w	8003d4e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a6e:	4bd0      	ldr	r3, [pc, #832]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a7a:	4bcd      	ldr	r3, [pc, #820]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d16d      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3ee>
 8003a86:	4bca      	ldr	r3, [pc, #808]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a92:	d166      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3ee>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003aa6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x350>
 8003abe:	4bbc      	ldr	r3, [pc, #752]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e013      	b.n	8003aec <HAL_RCC_OscConfig+0x378>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003adc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ae8:	4bb1      	ldr	r3, [pc, #708]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2202      	movs	r2, #2
 8003aee:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003af2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003af6:	fa92 f2a2 	rbit	r2, r2
 8003afa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003afe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b02:	fab2 f282 	clz	r2, r2
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f042 0220 	orr.w	r2, r2, #32
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	f002 021f 	and.w	r2, r2, #31
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f202 	lsl.w	r2, r1, r2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3ba>
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f000 bd31 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	21f8      	movs	r1, #248	; 0xf8
 8003b3e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003b46:	fa91 f1a1 	rbit	r1, r1
 8003b4a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003b4e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b52:	fab1 f181 	clz	r1, r1
 8003b56:	b2c9      	uxtb	r1, r1
 8003b58:	408b      	lsls	r3, r1
 8003b5a:	4995      	ldr	r1, [pc, #596]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b60:	e0f5      	b.n	8003d4e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8085 	beq.w	8003c78 <HAL_RCC_OscConfig+0x504>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003b80:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fe99 	bl	80028d0 <HAL_GetTick>
 8003b9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fe94 	bl	80028d0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	f000 bceb 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003bcc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d102      	bne.n	8003bea <HAL_RCC_OscConfig+0x476>
 8003be4:	4b72      	ldr	r3, [pc, #456]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	e013      	b.n	8003c12 <HAL_RCC_OscConfig+0x49e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c02:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c0e:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2202      	movs	r2, #2
 8003c14:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003c18:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003c1c:	fa92 f2a2 	rbit	r2, r2
 8003c20:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003c24:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c28:	fab2 f282 	clz	r2, r2
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f042 0220 	orr.w	r2, r2, #32
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f002 021f 	and.w	r2, r2, #31
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0af      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	21f8      	movs	r1, #248	; 0xf8
 8003c54:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003c5c:	fa91 f1a1 	rbit	r1, r1
 8003c60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003c64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c68:	fab1 f181 	clz	r1, r1
 8003c6c:	b2c9      	uxtb	r1, r1
 8003c6e:	408b      	lsls	r3, r1
 8003c70:	494f      	ldr	r1, [pc, #316]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
 8003c76:	e06a      	b.n	8003d4e <HAL_RCC_OscConfig+0x5da>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fe14 	bl	80028d0 <HAL_GetTick>
 8003ca8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fe fe0f 	bl	80028d0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f000 bc66 	b.w	8004590 <HAL_RCC_OscConfig+0xe1c>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003cd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x580>
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	e013      	b.n	8003d1c <HAL_RCC_OscConfig+0x5a8>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003d06:	2302      	movs	r3, #2
 8003d08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_OscConfig+0x63c>)
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003d22:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003d26:	fa92 f2a2 	rbit	r2, r2
 8003d2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003d2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0220 	orr.w	r2, r2, #32
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1af      	bne.n	8003cae <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80da 	beq.w	8003f12 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d069      	beq.n	8003e3c <HAL_RCC_OscConfig+0x6c8>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003d7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x640>)
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fd9d 	bl	80028d0 <HAL_GetTick>
 8003d96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	e00d      	b.n	8003db8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fe fd98 	bl	80028d0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d905      	bls.n	8003db8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e3ef      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	10908120 	.word	0x10908120
 8003db8:	2302      	movs	r3, #2
 8003dba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc2:	fa93 f2a3 	rbit	r2, r3
 8003dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	fa93 f2a3 	rbit	r2, r3
 8003dde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003de8:	2202      	movs	r2, #2
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003dfa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfc:	4ba4      	ldr	r3, [pc, #656]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e04:	2102      	movs	r1, #2
 8003e06:	6019      	str	r1, [r3, #0]
 8003e08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	fa93 f1a3 	rbit	r1, r3
 8003e12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e16:	6019      	str	r1, [r3, #0]
  return result;
 8003e18:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0b0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x628>
 8003e3a:	e06a      	b.n	8003f12 <HAL_RCC_OscConfig+0x79e>
 8003e3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e52:	601a      	str	r2, [r3, #0]
  return result;
 8003e54:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e58:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b8c      	ldr	r3, [pc, #560]	; (8004094 <HAL_RCC_OscConfig+0x920>)
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fd2f 	bl	80028d0 <HAL_GetTick>
 8003e72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e76:	e009      	b.n	8003e8c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe fd2a 	bl	80028d0 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e381      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 8003e8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e90:	2202      	movs	r2, #2
 8003e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	fa93 f2a3 	rbit	r2, r3
 8003e9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	fa93 f2a3 	rbit	r2, r3
 8003eb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f2a3 	rbit	r2, r3
 8003ece:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ed2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	4b6e      	ldr	r3, [pc, #440]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003edc:	2102      	movs	r1, #2
 8003ede:	6019      	str	r1, [r3, #0]
 8003ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f1a3 	rbit	r1, r3
 8003eea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003eee:	6019      	str	r1, [r3, #0]
  return result;
 8003ef0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1b2      	bne.n	8003e78 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8157 	beq.w	80041d0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d112      	bne.n	8003f5a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b56      	ldr	r3, [pc, #344]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	61d3      	str	r3, [r2, #28]
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b4f      	ldr	r3, [pc, #316]	; (8004098 <HAL_RCC_OscConfig+0x924>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11a      	bne.n	8003f9c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f66:	4b4c      	ldr	r3, [pc, #304]	; (8004098 <HAL_RCC_OscConfig+0x924>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a4b      	ldr	r2, [pc, #300]	; (8004098 <HAL_RCC_OscConfig+0x924>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fe fcad 	bl	80028d0 <HAL_GetTick>
 8003f76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	e009      	b.n	8003f90 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7c:	f7fe fca8 	bl	80028d0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e2ff      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_OscConfig+0x924>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x840>
 8003fa6:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a39      	ldr	r2, [pc, #228]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6213      	str	r3, [r2, #32]
 8003fb2:	e02f      	b.n	8004014 <HAL_RCC_OscConfig+0x8a0>
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x864>
 8003fbe:	4b34      	ldr	r3, [pc, #208]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4a33      	ldr	r2, [pc, #204]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6213      	str	r3, [r2, #32]
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4a30      	ldr	r2, [pc, #192]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	6213      	str	r3, [r2, #32]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0x8a0>
 8003fd8:	1d3b      	adds	r3, r7, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x888>
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6213      	str	r3, [r2, #32]
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6213      	str	r3, [r2, #32]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0x8a0>
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4a23      	ldr	r2, [pc, #140]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6213      	str	r3, [r2, #32]
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d06a      	beq.n	80040f4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401e:	f7fe fc57 	bl	80028d0 <HAL_GetTick>
 8004022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fe fc52 	bl	80028d0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e2a7      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 8004040:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004044:	2202      	movs	r2, #2
 8004046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	fa93 f2a3 	rbit	r2, r3
 8004052:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800405c:	2202      	movs	r2, #2
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	fa93 f2a3 	rbit	r2, r3
 800406a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800406e:	601a      	str	r2, [r3, #0]
  return result;
 8004070:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004074:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d108      	bne.n	800409c <HAL_RCC_OscConfig+0x928>
 800408a:	4b01      	ldr	r3, [pc, #4]	; (8004090 <HAL_RCC_OscConfig+0x91c>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	e013      	b.n	80040b8 <HAL_RCC_OscConfig+0x944>
 8004090:	40021000 	.word	0x40021000
 8004094:	10908120 	.word	0x10908120
 8004098:	40007000 	.word	0x40007000
 800409c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040a0:	2202      	movs	r2, #2
 80040a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa93 f2a3 	rbit	r2, r3
 80040ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	4bc0      	ldr	r3, [pc, #768]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80040bc:	2102      	movs	r1, #2
 80040be:	6011      	str	r1, [r2, #0]
 80040c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	fa92 f1a2 	rbit	r1, r2
 80040ca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80040ce:	6011      	str	r1, [r2, #0]
  return result;
 80040d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	fab2 f282 	clz	r2, r2
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	f002 021f 	and.w	r2, r2, #31
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d09a      	beq.n	8004028 <HAL_RCC_OscConfig+0x8b4>
 80040f2:	e063      	b.n	80041bc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fe fbec 	bl	80028d0 <HAL_GetTick>
 80040f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fc:	e00b      	b.n	8004116 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fe fbe7 	bl	80028d0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e23c      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 8004116:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800411a:	2202      	movs	r2, #2
 800411c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	fa93 f2a3 	rbit	r2, r3
 8004128:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004132:	2202      	movs	r2, #2
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004144:	601a      	str	r2, [r3, #0]
  return result;
 8004146:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800414a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f043 0302 	orr.w	r3, r3, #2
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d102      	bne.n	8004166 <HAL_RCC_OscConfig+0x9f2>
 8004160:	4b95      	ldr	r3, [pc, #596]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	e00d      	b.n	8004182 <HAL_RCC_OscConfig+0xa0e>
 8004166:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800416a:	2202      	movs	r2, #2
 800416c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	fa93 f2a3 	rbit	r2, r3
 8004178:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	4b8e      	ldr	r3, [pc, #568]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004186:	2102      	movs	r1, #2
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	fa92 f1a2 	rbit	r1, r2
 8004194:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004198:	6011      	str	r1, [r2, #0]
  return result;
 800419a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	fab2 f282 	clz	r2, r2
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	f002 021f 	and.w	r2, r2, #31
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f202 	lsl.w	r2, r1, r2
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1a0      	bne.n	80040fe <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041bc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d105      	bne.n	80041d0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c4:	4b7c      	ldr	r3, [pc, #496]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	4a7b      	ldr	r2, [pc, #492]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80041ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 81d9 	beq.w	800458e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041dc:	4b76      	ldr	r3, [pc, #472]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	f000 81a6 	beq.w	8004536 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	f040 811e 	bne.w	8004432 <HAL_RCC_OscConfig+0xcbe>
 80041f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80041fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	fa93 f2a3 	rbit	r2, r3
 800420a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800420e:	601a      	str	r2, [r3, #0]
  return result;
 8004210:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004214:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fe fb50 	bl	80028d0 <HAL_GetTick>
 8004230:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004234:	e009      	b.n	800424a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fe fb4b 	bl	80028d0 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e1a2      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 800424a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800424e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004262:	601a      	str	r2, [r3, #0]
  return result;
 8004264:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004268:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d102      	bne.n	8004284 <HAL_RCC_OscConfig+0xb10>
 800427e:	4b4e      	ldr	r3, [pc, #312]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	e01b      	b.n	80042bc <HAL_RCC_OscConfig+0xb48>
 8004284:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	fa93 f2a3 	rbit	r2, r3
 8004298:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80042c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	fa92 f1a2 	rbit	r1, r2
 80042d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042d4:	6011      	str	r1, [r2, #0]
  return result;
 80042d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	fab2 f282 	clz	r2, r2
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f002 021f 	and.w	r2, r2, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d19e      	bne.n	8004236 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f023 020f 	bic.w	r2, r3, #15
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	492c      	ldr	r1, [pc, #176]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 8004308:	4313      	orrs	r3, r2
 800430a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a19      	ldr	r1, [r3, #32]
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	430b      	orrs	r3, r1
 8004322:	4925      	ldr	r1, [pc, #148]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
 8004328:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800432c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	fa93 f2a3 	rbit	r2, r3
 800433c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004340:	601a      	str	r2, [r3, #0]
  return result;
 8004342:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004346:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	461a      	mov	r2, r3
 800435a:	2301      	movs	r3, #1
 800435c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe fab7 	bl	80028d0 <HAL_GetTick>
 8004362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004366:	e009      	b.n	800437c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe fab2 	bl	80028d0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e109      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 800437c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004380:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	fa93 f2a3 	rbit	r2, r3
 8004390:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004394:	601a      	str	r2, [r3, #0]
  return result;
 8004396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800439a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d105      	bne.n	80043bc <HAL_RCC_OscConfig+0xc48>
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <HAL_RCC_OscConfig+0xc44>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	e01e      	b.n	80043f4 <HAL_RCC_OscConfig+0xc80>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	fa93 f2a3 	rbit	r2, r3
 80043ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_OscConfig+0xe28>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043fc:	6011      	str	r1, [r2, #0]
 80043fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	fa92 f1a2 	rbit	r1, r2
 8004408:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800440c:	6011      	str	r1, [r2, #0]
  return result;
 800440e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	fab2 f282 	clz	r2, r2
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	f042 0220 	orr.w	r2, r2, #32
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	f002 021f 	and.w	r2, r2, #31
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f202 	lsl.w	r2, r1, r2
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d09b      	beq.n	8004368 <HAL_RCC_OscConfig+0xbf4>
 8004430:	e0ad      	b.n	800458e <HAL_RCC_OscConfig+0xe1a>
 8004432:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800443a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	fa93 f2a3 	rbit	r2, r3
 8004446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800444a:	601a      	str	r2, [r3, #0]
  return result;
 800444c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004450:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800445c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fa32 	bl	80028d0 <HAL_GetTick>
 800446c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004470:	e009      	b.n	8004486 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fe fa2d 	bl	80028d0 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e084      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
 8004486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800448a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800448e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	fa93 f2a3 	rbit	r2, r3
 800449a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800449e:	601a      	str	r2, [r3, #0]
  return result;
 80044a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d102      	bne.n	80044c0 <HAL_RCC_OscConfig+0xd4c>
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <HAL_RCC_OscConfig+0xe28>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	e01b      	b.n	80044f8 <HAL_RCC_OscConfig+0xd84>
 80044c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	fa93 f2a3 	rbit	r2, r3
 80044d4:	f107 0320 	add.w	r3, r7, #32
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f107 031c 	add.w	r3, r7, #28
 80044de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f107 031c 	add.w	r3, r7, #28
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	fa93 f2a3 	rbit	r2, r3
 80044ee:	f107 0318 	add.w	r3, r7, #24
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <HAL_RCC_OscConfig+0xe28>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f107 0214 	add.w	r2, r7, #20
 80044fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004500:	6011      	str	r1, [r2, #0]
 8004502:	f107 0214 	add.w	r2, r7, #20
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	fa92 f1a2 	rbit	r1, r2
 800450c:	f107 0210 	add.w	r2, r7, #16
 8004510:	6011      	str	r1, [r2, #0]
  return result;
 8004512:	f107 0210 	add.w	r2, r7, #16
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	fab2 f282 	clz	r2, r2
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f042 0220 	orr.w	r2, r2, #32
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	f002 021f 	and.w	r2, r2, #31
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f202 	lsl.w	r2, r1, r2
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d19e      	bne.n	8004472 <HAL_RCC_OscConfig+0xcfe>
 8004534:	e02b      	b.n	800458e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e025      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004544:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_RCC_OscConfig+0xe28>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800454c:	4b13      	ldr	r3, [pc, #76]	; (800459c <HAL_RCC_OscConfig+0xe28>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004554:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004558:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	429a      	cmp	r2, r3
 8004564:	d111      	bne.n	800458a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004566:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800456a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004574:	429a      	cmp	r2, r3
 8004576:	d108      	bne.n	800458a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457c:	f003 020f 	and.w	r2, r3, #15
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004586:	429a      	cmp	r2, r3
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b09e      	sub	sp, #120	; 0x78
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e162      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b8:	4b90      	ldr	r3, [pc, #576]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d910      	bls.n	80045e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b8d      	ldr	r3, [pc, #564]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 0207 	bic.w	r2, r3, #7
 80045ce:	498b      	ldr	r1, [pc, #556]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b89      	ldr	r3, [pc, #548]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e14a      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f4:	4b82      	ldr	r3, [pc, #520]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	497f      	ldr	r1, [pc, #508]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80dc 	beq.w	80047cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d13c      	bne.n	8004696 <HAL_RCC_ClockConfig+0xf6>
 800461c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004620:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462c:	fab3 f383 	clz	r3, r3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d102      	bne.n	8004646 <HAL_RCC_ClockConfig+0xa6>
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	e00f      	b.n	8004666 <HAL_RCC_ClockConfig+0xc6>
 8004646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800464a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	667b      	str	r3, [r7, #100]	; 0x64
 8004654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004658:	663b      	str	r3, [r7, #96]	; 0x60
 800465a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465c:	fa93 f3a3 	rbit	r3, r3
 8004660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004662:	4b67      	ldr	r3, [pc, #412]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800466a:	65ba      	str	r2, [r7, #88]	; 0x58
 800466c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800466e:	fa92 f2a2 	rbit	r2, r2
 8004672:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004676:	fab2 f282 	clz	r2, r2
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	f042 0220 	orr.w	r2, r2, #32
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	f002 021f 	and.w	r2, r2, #31
 8004686:	2101      	movs	r1, #1
 8004688:	fa01 f202 	lsl.w	r2, r1, r2
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d17b      	bne.n	800478a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0f3      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d13c      	bne.n	8004718 <HAL_RCC_ClockConfig+0x178>
 800469e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d102      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x128>
 80046c2:	4b4f      	ldr	r3, [pc, #316]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	e00f      	b.n	80046e8 <HAL_RCC_ClockConfig+0x148>
 80046c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e4:	4b46      	ldr	r3, [pc, #280]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80046ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f0:	fa92 f2a2 	rbit	r2, r2
 80046f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046f8:	fab2 f282 	clz	r2, r2
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	f042 0220 	orr.w	r2, r2, #32
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f002 021f 	and.w	r2, r2, #31
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f202 	lsl.w	r2, r1, r2
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d13a      	bne.n	800478a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b2      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
 8004718:	2302      	movs	r3, #2
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b01      	cmp	r3, #1
 8004738:	d102      	bne.n	8004740 <HAL_RCC_ClockConfig+0x1a0>
 800473a:	4b31      	ldr	r3, [pc, #196]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	e00d      	b.n	800475c <HAL_RCC_ClockConfig+0x1bc>
 8004740:	2302      	movs	r3, #2
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	2302      	movs	r3, #2
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	4b29      	ldr	r3, [pc, #164]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2202      	movs	r2, #2
 800475e:	61ba      	str	r2, [r7, #24]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	fa92 f2a2 	rbit	r2, r2
 8004766:	617a      	str	r2, [r7, #20]
  return result;
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	fab2 f282 	clz	r2, r2
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f042 0220 	orr.w	r2, r2, #32
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	f002 021f 	and.w	r2, r2, #31
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f202 	lsl.w	r2, r1, r2
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e079      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	491a      	ldr	r1, [pc, #104]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479c:	f7fe f898 	bl	80028d0 <HAL_GetTick>
 80047a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fe f894 	bl	80028d0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e061      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 020c 	and.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1eb      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d214      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0207 	bic.w	r2, r3, #7
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCC_ClockConfig+0x25c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e040      	b.n	800487e <HAL_RCC_ClockConfig+0x2de>
 80047fc:	40022000 	.word	0x40022000
 8004800:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <HAL_RCC_ClockConfig+0x2e8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	491a      	ldr	r1, [pc, #104]	; (8004888 <HAL_RCC_ClockConfig+0x2e8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <HAL_RCC_ClockConfig+0x2e8>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4912      	ldr	r1, [pc, #72]	; (8004888 <HAL_RCC_ClockConfig+0x2e8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004842:	f000 f829 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8004846:	4601      	mov	r1, r0
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HAL_RCC_ClockConfig+0x2e8>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004850:	22f0      	movs	r2, #240	; 0xf0
 8004852:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	fa92 f2a2 	rbit	r2, r2
 800485a:	60fa      	str	r2, [r7, #12]
  return result;
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	fab2 f282 	clz	r2, r2
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	40d3      	lsrs	r3, r2
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x2ec>)
 8004868:	5cd3      	ldrb	r3, [r2, r3]
 800486a:	fa21 f303 	lsr.w	r3, r1, r3
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <HAL_RCC_ClockConfig+0x2f0>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_RCC_ClockConfig+0x2f4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd ffe6 	bl	8002848 <HAL_InitTick>
  
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3778      	adds	r7, #120	; 0x78
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	08009840 	.word	0x08009840
 8004890:	20000068 	.word	0x20000068
 8004894:	2000006c 	.word	0x2000006c

08004898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b08b      	sub	sp, #44	; 0x2c
 800489c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80048b2:	4b2a      	ldr	r3, [pc, #168]	; (800495c <HAL_RCC_GetSysClockFreq+0xc4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x30>
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x36>
 80048c6:	e03f      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048ca:	623b      	str	r3, [r7, #32]
      break;
 80048cc:	e03f      	b.n	800494e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80048d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	fa92 f2a2 	rbit	r2, r2
 80048e0:	607a      	str	r2, [r7, #4]
  return result;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	fab2 f282 	clz	r2, r2
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	40d3      	lsrs	r3, r2
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048ee:	5cd3      	ldrb	r3, [r2, r3]
 80048f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_RCC_GetSysClockFreq+0xc4>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	220f      	movs	r2, #15
 80048fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	fa92 f2a2 	rbit	r2, r2
 8004904:	60fa      	str	r2, [r7, #12]
  return result;
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	fab2 f282 	clz	r2, r2
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	40d3      	lsrs	r3, r2
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004920:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	e007      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004932:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fbb2 f2f3 	udiv	r2, r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	623b      	str	r3, [r7, #32]
      break;
 8004946:	e002      	b.n	800494e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc8>)
 800494a:	623b      	str	r3, [r7, #32]
      break;
 800494c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494e:	6a3b      	ldr	r3, [r7, #32]
}
 8004950:	4618      	mov	r0, r3
 8004952:	372c      	adds	r7, #44	; 0x2c
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40021000 	.word	0x40021000
 8004960:	007a1200 	.word	0x007a1200
 8004964:	08009858 	.word	0x08009858
 8004968:	08009868 	.word	0x08009868

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000068 	.word	0x20000068

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800498a:	f7ff ffef 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498e:	4601      	mov	r1, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004998:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800499c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	fa92 f2a2 	rbit	r2, r2
 80049a4:	603a      	str	r2, [r7, #0]
  return result;
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	fab2 f282 	clz	r2, r2
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	40d3      	lsrs	r3, r2
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	08009850 	.word	0x08009850

080049c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80049ce:	f7ff ffcd 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049d2:	4601      	mov	r1, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80049dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80049e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	fa92 f2a2 	rbit	r2, r2
 80049e8:	603a      	str	r2, [r7, #0]
  return result;
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	fab2 f282 	clz	r2, r2
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	40d3      	lsrs	r3, r2
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x40>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	08009850 	.word	0x08009850

08004a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b092      	sub	sp, #72	; 0x48
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80d4 	beq.w	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a30:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10e      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4a4a      	ldr	r2, [pc, #296]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	61d3      	str	r3, [r2, #28]
 8004a48:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b45      	ldr	r3, [pc, #276]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a66:	4b42      	ldr	r3, [pc, #264]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a41      	ldr	r2, [pc, #260]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fd ff2d 	bl	80028d0 <HAL_GetTick>
 8004a76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fd ff29 	bl	80028d0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1d6      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a98:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8084 	beq.w	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d07c      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad2:	fab3 f383 	clz	r3, r3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	461a      	mov	r2, r3
 8004b06:	2300      	movs	r3, #0
 8004b08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d04b      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1a:	f7fd fed9 	bl	80028d0 <HAL_GetTick>
 8004b1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fd fed5 	bl	80028d0 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e180      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	2302      	movs	r3, #2
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	61fb      	str	r3, [r7, #28]
  return result;
 8004b50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f043 0302 	orr.w	r3, r3, #2
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d108      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b66:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	e00d      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
 8004b74:	10908100 	.word	0x10908100
 8004b78:	2302      	movs	r3, #2
 8004b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	4ba0      	ldr	r3, [pc, #640]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2202      	movs	r2, #2
 8004b8a:	613a      	str	r2, [r7, #16]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	fa92 f2a2 	rbit	r2, r2
 8004b92:	60fa      	str	r2, [r7, #12]
  return result;
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	fab2 f282 	clz	r2, r2
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f002 021f 	and.w	r2, r2, #31
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0b7      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004bb2:	4b95      	ldr	r3, [pc, #596]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4992      	ldr	r1, [pc, #584]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bcc:	4b8e      	ldr	r3, [pc, #568]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4a8d      	ldr	r2, [pc, #564]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004be4:	4b88      	ldr	r3, [pc, #544]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f023 0203 	bic.w	r2, r3, #3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4985      	ldr	r1, [pc, #532]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c02:	4b81      	ldr	r3, [pc, #516]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	497e      	ldr	r1, [pc, #504]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c20:	4b79      	ldr	r3, [pc, #484]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4976      	ldr	r1, [pc, #472]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c3e:	4b72      	ldr	r3, [pc, #456]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	496f      	ldr	r1, [pc, #444]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c5c:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	4967      	ldr	r1, [pc, #412]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f023 0220 	bic.w	r2, r3, #32
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4960      	ldr	r1, [pc, #384]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c98:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	4958      	ldr	r1, [pc, #352]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb6:	4b54      	ldr	r3, [pc, #336]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	4951      	ldr	r1, [pc, #324]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd4:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	4949      	ldr	r1, [pc, #292]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cf2:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4942      	ldr	r1, [pc, #264]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	493a      	ldr	r1, [pc, #232]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	4933      	ldr	r1, [pc, #204]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	492b      	ldr	r1, [pc, #172]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d6a:	4b27      	ldr	r3, [pc, #156]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4924      	ldr	r1, [pc, #144]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004d88:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	491c      	ldr	r1, [pc, #112]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	4915      	ldr	r1, [pc, #84]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	490d      	ldr	r1, [pc, #52]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	4906      	ldr	r1, [pc, #24]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00c      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e00:	4b01      	ldr	r3, [pc, #4]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	490b      	ldr	r1, [pc, #44]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e32:	4904      	ldr	r1, [pc, #16]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3748      	adds	r7, #72	; 0x48
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e049      	b.n	8004eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd fb34 	bl	80024dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 fadc 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e047      	b.n	8004fa0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a23      	ldr	r2, [pc, #140]	; (8004fac <HAL_TIM_Base_Start+0xb4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_Base_Start+0x66>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_Base_Start+0x66>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_TIM_Base_Start+0xb8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_Base_Start+0x66>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_TIM_Base_Start+0xbc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_Base_Start+0x66>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_TIM_Base_Start+0xc0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_Base_Start+0x66>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <HAL_TIM_Base_Start+0xc4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_Base_Start+0x66>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_TIM_Base_Start+0xc8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d115      	bne.n	8004f8a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_TIM_Base_Start+0xcc>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d015      	beq.n	8004f9c <HAL_TIM_Base_Start+0xa4>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f76:	d011      	beq.n	8004f9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f88:	e008      	b.n	8004f9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e000      	b.n	8004f9e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40013400 	.word	0x40013400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40015000 	.word	0x40015000
 8004fc4:	00010007 	.word	0x00010007

08004fc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
 8004fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_TIM_Base_Stop_IT+0x48>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_Base_Stop_IT+0x48>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d122      	bne.n	8005082 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d11b      	bne.n	8005082 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f06f 0202 	mvn.w	r2, #2
 8005052:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9cd 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 800506e:	e005      	b.n	800507c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f9bf 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9d0 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d122      	bne.n	80050d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d11b      	bne.n	80050d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0204 	mvn.w	r2, #4
 80050a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f9a3 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 80050c2:	e005      	b.n	80050d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f995 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f9a6 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d122      	bne.n	800512a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d11b      	bne.n	800512a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0208 	mvn.w	r2, #8
 80050fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2204      	movs	r2, #4
 8005100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f979 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8005116:	e005      	b.n	8005124 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f96b 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f97c 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d122      	bne.n	800517e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d11b      	bne.n	800517e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0210 	mvn.w	r2, #16
 800514e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2208      	movs	r2, #8
 8005154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f94f 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 800516a:	e005      	b.n	8005178 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f941 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f952 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d10e      	bne.n	80051aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0201 	mvn.w	r2, #1
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f91b 	bl	80053e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d10e      	bne.n	80051d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d107      	bne.n	80051d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fb05 	bl	80057e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e4:	d10e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d107      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 faf8 	bl	80057f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d10e      	bne.n	8005230 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d107      	bne.n	8005230 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f900 	bl	8005430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d10e      	bne.n	800525c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b20      	cmp	r3, #32
 800524a:	d107      	bne.n	800525c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0220 	mvn.w	r2, #32
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fab8 	bl	80057cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x1c>
 800527c:	2302      	movs	r3, #2
 800527e:	e0ab      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x174>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d067      	beq.n	800538c <HAL_TIM_ConfigClockSource+0x128>
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d80b      	bhi.n	80052d8 <HAL_TIM_ConfigClockSource+0x74>
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d073      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x148>
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d802      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x6a>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d06f      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x148>
 80052cc:	e077      	b.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d06c      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x148>
 80052d2:	2b30      	cmp	r3, #48	; 0x30
 80052d4:	d06a      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x148>
 80052d6:	e072      	b.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052d8:	2b70      	cmp	r3, #112	; 0x70
 80052da:	d00d      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0x94>
 80052dc:	2b70      	cmp	r3, #112	; 0x70
 80052de:	d804      	bhi.n	80052ea <HAL_TIM_ConfigClockSource+0x86>
 80052e0:	2b50      	cmp	r3, #80	; 0x50
 80052e2:	d033      	beq.n	800534c <HAL_TIM_ConfigClockSource+0xe8>
 80052e4:	2b60      	cmp	r3, #96	; 0x60
 80052e6:	d041      	beq.n	800536c <HAL_TIM_ConfigClockSource+0x108>
 80052e8:	e069      	b.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d069      	beq.n	80053c4 <HAL_TIM_ConfigClockSource+0x160>
 80052f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f4:	d017      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0xc2>
 80052f6:	e062      	b.n	80053be <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6899      	ldr	r1, [r3, #8]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f000 f9b4 	bl	8005674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800531a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
      break;
 8005324:	e04f      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6899      	ldr	r1, [r3, #8]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f000 f99d 	bl	8005674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005348:	609a      	str	r2, [r3, #8]
      break;
 800534a:	e03c      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	461a      	mov	r2, r3
 800535a:	f000 f911 	bl	8005580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2150      	movs	r1, #80	; 0x50
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f96a 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 800536a:	e02c      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	461a      	mov	r2, r3
 800537a:	f000 f930 	bl	80055de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2160      	movs	r1, #96	; 0x60
 8005384:	4618      	mov	r0, r3
 8005386:	f000 f95a 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 800538a:	e01c      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	461a      	mov	r2, r3
 800539a:	f000 f8f1 	bl	8005580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2140      	movs	r1, #64	; 0x40
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f94a 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 80053aa:	e00c      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 f941 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 80053bc:	e003      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80053c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a42      	ldr	r2, [pc, #264]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3f      	ldr	r2, [pc, #252]	; (8005564 <TIM_Base_SetConfig+0x120>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3d      	ldr	r2, [pc, #244]	; (800556c <TIM_Base_SetConfig+0x128>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3c      	ldr	r2, [pc, #240]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a31      	ldr	r2, [pc, #196]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01f      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d01b      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2e      	ldr	r2, [pc, #184]	; (8005564 <TIM_Base_SetConfig+0x120>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d017      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <TIM_Base_SetConfig+0x124>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2c      	ldr	r2, [pc, #176]	; (800556c <TIM_Base_SetConfig+0x128>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00f      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <TIM_Base_SetConfig+0x130>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00b      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <TIM_Base_SetConfig+0x134>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d007      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2a      	ldr	r2, [pc, #168]	; (800557c <TIM_Base_SetConfig+0x138>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_Base_SetConfig+0x9a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d108      	bne.n	80054f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a12      	ldr	r2, [pc, #72]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <TIM_Base_SetConfig+0x128>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00f      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <TIM_Base_SetConfig+0x130>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a12      	ldr	r2, [pc, #72]	; (8005578 <TIM_Base_SetConfig+0x134>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a11      	ldr	r2, [pc, #68]	; (800557c <TIM_Base_SetConfig+0x138>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x100>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	615a      	str	r2, [r3, #20]
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40013400 	.word	0x40013400
 8005570:	40015000 	.word	0x40015000
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f023 030a 	bic.w	r3, r3, #10
 80055bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055de:	b480      	push	{r7}
 80055e0:	b087      	sub	sp, #28
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0210 	bic.w	r2, r3, #16
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	f043 0307 	orr.w	r3, r3, #7
 8005660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	609a      	str	r2, [r3, #8]
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800568e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	021a      	lsls	r2, r3, #8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	431a      	orrs	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e06d      	b.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2d      	ldr	r2, [pc, #180]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d108      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005710:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d01d      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d018      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00e      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d009      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a11      	ldr	r2, [pc, #68]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40013400 	.word	0x40013400
 80057bc:	40015000 	.word	0x40015000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40014000 	.word	0x40014000

080057cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e040      	b.n	800589c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fc fe96 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2224      	movs	r2, #36	; 0x24
 8005834:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fc0e 	bl	8006068 <UART_SetConfig>
 800584c:	4603      	mov	r3, r0
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e022      	b.n	800589c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fdd6 	bl	8006410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fe5d 	bl	8006554 <UART_CheckIdleState>
 800589a:	4603      	mov	r3, r0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	f040 8082 	bne.w	80059c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_UART_Transmit+0x26>
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07a      	b.n	80059c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_UART_Transmit+0x38>
 80058d8:	2302      	movs	r3, #2
 80058da:	e073      	b.n	80059c4 <HAL_UART_Transmit+0x120>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2221      	movs	r2, #33	; 0x21
 80058f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f2:	f7fc ffed 	bl	80028d0 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005910:	d108      	bne.n	8005924 <HAL_UART_Transmit+0x80>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e003      	b.n	800592c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005934:	e02d      	b.n	8005992 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2200      	movs	r2, #0
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fe50 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e039      	b.n	80059c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005962:	b292      	uxth	r2, r2
 8005964:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	3302      	adds	r3, #2
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	e008      	b.n	8005980 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	b292      	uxth	r2, r2
 8005978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1cb      	bne.n	8005936 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fe1c 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e005      	b.n	80059c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e000      	b.n	80059c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d13d      	bne.n	8005a5e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_UART_Receive_IT+0x22>
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e036      	b.n	8005a60 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Receive_IT+0x34>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e02f      	b.n	8005a60 <HAL_UART_Receive_IT+0x94>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d018      	beq.n	8005a4e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	69f9      	ldr	r1, [r7, #28]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e6      	bne.n	8005a1c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	461a      	mov	r2, r3
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fe8b 	bl	8006770 <UART_Start_Receive_IT>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	e000      	b.n	8005a60 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b0ba      	sub	sp, #232	; 0xe8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a96:	4013      	ands	r3, r2
 8005a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d115      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00f      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 82a4 	beq.w	800600e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
      }
      return;
 8005ace:	e29e      	b.n	800600e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8117 	beq.w	8005d08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aea:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <HAL_UART_IRQHandler+0x298>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 810a 	beq.w	8005d08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d011      	beq.n	8005b24 <HAL_UART_IRQHandler+0xbc>
 8005b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1a:	f043 0201 	orr.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d011      	beq.n	8005b54 <HAL_UART_IRQHandler+0xec>
 8005b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2202      	movs	r2, #2
 8005b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b4a:	f043 0204 	orr.w	r2, r3, #4
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d011      	beq.n	8005b84 <HAL_UART_IRQHandler+0x11c>
 8005b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2204      	movs	r2, #4
 8005b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7a:	f043 0202 	orr.w	r2, r3, #2
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d017      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2208      	movs	r2, #8
 8005bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb6:	f043 0208 	orr.w	r2, r3, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d012      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x18a>
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00c      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 820a 	beq.w	8006012 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d04f      	beq.n	8005cea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fe3c 	bl	80068c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d141      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3308      	adds	r3, #8
 8005c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1d9      	bne.n	8005c5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d013      	beq.n	8005cda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <HAL_UART_IRQHandler+0x29c>)
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd fa3a 	bl	8003138 <HAL_DMA_Abort_IT>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d017      	beq.n	8005cfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	e00f      	b.n	8005cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f9ae 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	e00b      	b.n	8005cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9aa 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e007      	b.n	8005cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9a6 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005cf8:	e18b      	b.n	8006012 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfa:	bf00      	nop
    return;
 8005cfc:	e189      	b.n	8006012 <HAL_UART_IRQHandler+0x5aa>
 8005cfe:	bf00      	nop
 8005d00:	04000120 	.word	0x04000120
 8005d04:	0800698f 	.word	0x0800698f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	f040 8143 	bne.w	8005f98 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 813c 	beq.w	8005f98 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8135 	beq.w	8005f98 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2210      	movs	r2, #16
 8005d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	f040 80b1 	bne.w	8005ea8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 815d 	beq.w	8006016 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d66:	429a      	cmp	r2, r3
 8005d68:	f080 8155 	bcs.w	8006016 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f000 8085 	beq.w	8005e8c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005db0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005db8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1da      	bne.n	8005d82 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3308      	adds	r3, #8
 8005dec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005df0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005df4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005df8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e1      	bne.n	8005dcc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3308      	adds	r3, #8
 8005e28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e3      	bne.n	8005e08 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e4      	bne.n	8005e4c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd f91d 	bl	80030c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f8d5 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ea6:	e0b6      	b.n	8006016 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a8 	beq.w	800601a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80a3 	beq.w	800601a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e4      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	623b      	str	r3, [r7, #32]
   return(result);
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e3      	bne.n	8005f0a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f023 0310 	bic.w	r3, r3, #16
 8005f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	617b      	str	r3, [r7, #20]
   return(result);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e4      	bne.n	8005f54 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f85d 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f96:	e040      	b.n	800601a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00e      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x55a>
 8005fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fe83 	bl	8006cc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fc0:	e02e      	b.n	8006020 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00e      	beq.n	8005fec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d008      	beq.n	8005fec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01d      	beq.n	800601e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
    }
    return;
 8005fea:	e018      	b.n	800601e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_UART_IRQHandler+0x5b8>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fcd8 	bl	80069ba <UART_EndTransmit_IT>
    return;
 800600a:	bf00      	nop
 800600c:	e008      	b.n	8006020 <HAL_UART_IRQHandler+0x5b8>
      return;
 800600e:	bf00      	nop
 8006010:	e006      	b.n	8006020 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006012:	bf00      	nop
 8006014:	e004      	b.n	8006020 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <HAL_UART_IRQHandler+0x5b8>
      return;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <HAL_UART_IRQHandler+0x5b8>
    return;
 800601e:	bf00      	nop
  }

}
 8006020:	37e8      	adds	r7, #232	; 0xe8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop

08006028 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4baa      	ldr	r3, [pc, #680]	; (800633c <UART_SetConfig+0x2d4>)
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	6979      	ldr	r1, [r7, #20]
 800609c:	430b      	orrs	r3, r1
 800609e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a98      	ldr	r2, [pc, #608]	; (8006340 <UART_SetConfig+0x2d8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d121      	bne.n	8006128 <UART_SetConfig+0xc0>
 80060e4:	4b97      	ldr	r3, [pc, #604]	; (8006344 <UART_SetConfig+0x2dc>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d817      	bhi.n	8006120 <UART_SetConfig+0xb8>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <UART_SetConfig+0x90>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	08006109 	.word	0x08006109
 80060fc:	08006115 	.word	0x08006115
 8006100:	0800611b 	.word	0x0800611b
 8006104:	0800610f 	.word	0x0800610f
 8006108:	2301      	movs	r3, #1
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e0b2      	b.n	8006274 <UART_SetConfig+0x20c>
 800610e:	2302      	movs	r3, #2
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e0af      	b.n	8006274 <UART_SetConfig+0x20c>
 8006114:	2304      	movs	r3, #4
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e0ac      	b.n	8006274 <UART_SetConfig+0x20c>
 800611a:	2308      	movs	r3, #8
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e0a9      	b.n	8006274 <UART_SetConfig+0x20c>
 8006120:	2310      	movs	r3, #16
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	bf00      	nop
 8006126:	e0a5      	b.n	8006274 <UART_SetConfig+0x20c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a86      	ldr	r2, [pc, #536]	; (8006348 <UART_SetConfig+0x2e0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d123      	bne.n	800617a <UART_SetConfig+0x112>
 8006132:	4b84      	ldr	r3, [pc, #528]	; (8006344 <UART_SetConfig+0x2dc>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613e:	d012      	beq.n	8006166 <UART_SetConfig+0xfe>
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006144:	d802      	bhi.n	800614c <UART_SetConfig+0xe4>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <UART_SetConfig+0xf2>
 800614a:	e012      	b.n	8006172 <UART_SetConfig+0x10a>
 800614c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006150:	d00c      	beq.n	800616c <UART_SetConfig+0x104>
 8006152:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006156:	d003      	beq.n	8006160 <UART_SetConfig+0xf8>
 8006158:	e00b      	b.n	8006172 <UART_SetConfig+0x10a>
 800615a:	2300      	movs	r3, #0
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e089      	b.n	8006274 <UART_SetConfig+0x20c>
 8006160:	2302      	movs	r3, #2
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e086      	b.n	8006274 <UART_SetConfig+0x20c>
 8006166:	2304      	movs	r3, #4
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e083      	b.n	8006274 <UART_SetConfig+0x20c>
 800616c:	2308      	movs	r3, #8
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e080      	b.n	8006274 <UART_SetConfig+0x20c>
 8006172:	2310      	movs	r3, #16
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	bf00      	nop
 8006178:	e07c      	b.n	8006274 <UART_SetConfig+0x20c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a73      	ldr	r2, [pc, #460]	; (800634c <UART_SetConfig+0x2e4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d123      	bne.n	80061cc <UART_SetConfig+0x164>
 8006184:	4b6f      	ldr	r3, [pc, #444]	; (8006344 <UART_SetConfig+0x2dc>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800618c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006190:	d012      	beq.n	80061b8 <UART_SetConfig+0x150>
 8006192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006196:	d802      	bhi.n	800619e <UART_SetConfig+0x136>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <UART_SetConfig+0x144>
 800619c:	e012      	b.n	80061c4 <UART_SetConfig+0x15c>
 800619e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061a2:	d00c      	beq.n	80061be <UART_SetConfig+0x156>
 80061a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061a8:	d003      	beq.n	80061b2 <UART_SetConfig+0x14a>
 80061aa:	e00b      	b.n	80061c4 <UART_SetConfig+0x15c>
 80061ac:	2300      	movs	r3, #0
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e060      	b.n	8006274 <UART_SetConfig+0x20c>
 80061b2:	2302      	movs	r3, #2
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e05d      	b.n	8006274 <UART_SetConfig+0x20c>
 80061b8:	2304      	movs	r3, #4
 80061ba:	77fb      	strb	r3, [r7, #31]
 80061bc:	e05a      	b.n	8006274 <UART_SetConfig+0x20c>
 80061be:	2308      	movs	r3, #8
 80061c0:	77fb      	strb	r3, [r7, #31]
 80061c2:	e057      	b.n	8006274 <UART_SetConfig+0x20c>
 80061c4:	2310      	movs	r3, #16
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	bf00      	nop
 80061ca:	e053      	b.n	8006274 <UART_SetConfig+0x20c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a5f      	ldr	r2, [pc, #380]	; (8006350 <UART_SetConfig+0x2e8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d123      	bne.n	800621e <UART_SetConfig+0x1b6>
 80061d6:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <UART_SetConfig+0x2dc>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e2:	d012      	beq.n	800620a <UART_SetConfig+0x1a2>
 80061e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e8:	d802      	bhi.n	80061f0 <UART_SetConfig+0x188>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <UART_SetConfig+0x196>
 80061ee:	e012      	b.n	8006216 <UART_SetConfig+0x1ae>
 80061f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061f4:	d00c      	beq.n	8006210 <UART_SetConfig+0x1a8>
 80061f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061fa:	d003      	beq.n	8006204 <UART_SetConfig+0x19c>
 80061fc:	e00b      	b.n	8006216 <UART_SetConfig+0x1ae>
 80061fe:	2300      	movs	r3, #0
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e037      	b.n	8006274 <UART_SetConfig+0x20c>
 8006204:	2302      	movs	r3, #2
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e034      	b.n	8006274 <UART_SetConfig+0x20c>
 800620a:	2304      	movs	r3, #4
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e031      	b.n	8006274 <UART_SetConfig+0x20c>
 8006210:	2308      	movs	r3, #8
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e02e      	b.n	8006274 <UART_SetConfig+0x20c>
 8006216:	2310      	movs	r3, #16
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	bf00      	nop
 800621c:	e02a      	b.n	8006274 <UART_SetConfig+0x20c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a4c      	ldr	r2, [pc, #304]	; (8006354 <UART_SetConfig+0x2ec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d123      	bne.n	8006270 <UART_SetConfig+0x208>
 8006228:	4b46      	ldr	r3, [pc, #280]	; (8006344 <UART_SetConfig+0x2dc>)
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006234:	d012      	beq.n	800625c <UART_SetConfig+0x1f4>
 8006236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800623a:	d802      	bhi.n	8006242 <UART_SetConfig+0x1da>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <UART_SetConfig+0x1e8>
 8006240:	e012      	b.n	8006268 <UART_SetConfig+0x200>
 8006242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006246:	d00c      	beq.n	8006262 <UART_SetConfig+0x1fa>
 8006248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800624c:	d003      	beq.n	8006256 <UART_SetConfig+0x1ee>
 800624e:	e00b      	b.n	8006268 <UART_SetConfig+0x200>
 8006250:	2300      	movs	r3, #0
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e00e      	b.n	8006274 <UART_SetConfig+0x20c>
 8006256:	2302      	movs	r3, #2
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e00b      	b.n	8006274 <UART_SetConfig+0x20c>
 800625c:	2304      	movs	r3, #4
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e008      	b.n	8006274 <UART_SetConfig+0x20c>
 8006262:	2308      	movs	r3, #8
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e005      	b.n	8006274 <UART_SetConfig+0x20c>
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	bf00      	nop
 800626e:	e001      	b.n	8006274 <UART_SetConfig+0x20c>
 8006270:	2310      	movs	r3, #16
 8006272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	d16e      	bne.n	800635c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800627e:	7ffb      	ldrb	r3, [r7, #31]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d828      	bhi.n	80062d6 <UART_SetConfig+0x26e>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <UART_SetConfig+0x224>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062c1 	.word	0x080062c1
 8006298:	080062d7 	.word	0x080062d7
 800629c:	080062c7 	.word	0x080062c7
 80062a0:	080062d7 	.word	0x080062d7
 80062a4:	080062d7 	.word	0x080062d7
 80062a8:	080062d7 	.word	0x080062d7
 80062ac:	080062cf 	.word	0x080062cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b0:	f7fe fb68 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80062b4:	61b8      	str	r0, [r7, #24]
        break;
 80062b6:	e013      	b.n	80062e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fe fb86 	bl	80049c8 <HAL_RCC_GetPCLK2Freq>
 80062bc:	61b8      	str	r0, [r7, #24]
        break;
 80062be:	e00f      	b.n	80062e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <UART_SetConfig+0x2f0>)
 80062c2:	61bb      	str	r3, [r7, #24]
        break;
 80062c4:	e00c      	b.n	80062e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fe fae7 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80062ca:	61b8      	str	r0, [r7, #24]
        break;
 80062cc:	e008      	b.n	80062e0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d2:	61bb      	str	r3, [r7, #24]
        break;
 80062d4:	e004      	b.n	80062e0 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	77bb      	strb	r3, [r7, #30]
        break;
 80062de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8086 	beq.w	80063f4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	005a      	lsls	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	441a      	add	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d916      	bls.n	8006334 <UART_SetConfig+0x2cc>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d212      	bcs.n	8006334 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f023 030f 	bic.w	r3, r3, #15
 8006316:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	b29a      	uxth	r2, r3
 8006324:	89fb      	ldrh	r3, [r7, #14]
 8006326:	4313      	orrs	r3, r2
 8006328:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	89fa      	ldrh	r2, [r7, #14]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	e05f      	b.n	80063f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77bb      	strb	r3, [r7, #30]
 8006338:	e05c      	b.n	80063f4 <UART_SetConfig+0x38c>
 800633a:	bf00      	nop
 800633c:	efff69f3 	.word	0xefff69f3
 8006340:	40013800 	.word	0x40013800
 8006344:	40021000 	.word	0x40021000
 8006348:	40004400 	.word	0x40004400
 800634c:	40004800 	.word	0x40004800
 8006350:	40004c00 	.word	0x40004c00
 8006354:	40005000 	.word	0x40005000
 8006358:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	2b08      	cmp	r3, #8
 8006360:	d827      	bhi.n	80063b2 <UART_SetConfig+0x34a>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x300>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800638d 	.word	0x0800638d
 800636c:	08006395 	.word	0x08006395
 8006370:	0800639d 	.word	0x0800639d
 8006374:	080063b3 	.word	0x080063b3
 8006378:	080063a3 	.word	0x080063a3
 800637c:	080063b3 	.word	0x080063b3
 8006380:	080063b3 	.word	0x080063b3
 8006384:	080063b3 	.word	0x080063b3
 8006388:	080063ab 	.word	0x080063ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fe fafa 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006390:	61b8      	str	r0, [r7, #24]
        break;
 8006392:	e013      	b.n	80063bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006394:	f7fe fb18 	bl	80049c8 <HAL_RCC_GetPCLK2Freq>
 8006398:	61b8      	str	r0, [r7, #24]
        break;
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <UART_SetConfig+0x3a4>)
 800639e:	61bb      	str	r3, [r7, #24]
        break;
 80063a0:	e00c      	b.n	80063bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a2:	f7fe fa79 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80063a6:	61b8      	str	r0, [r7, #24]
        break;
 80063a8:	e008      	b.n	80063bc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ae:	61bb      	str	r3, [r7, #24]
        break;
 80063b0:	e004      	b.n	80063bc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	77bb      	strb	r3, [r7, #30]
        break;
 80063ba:	bf00      	nop
    }

    if (pclk != 0U)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d018      	beq.n	80063f4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	085a      	lsrs	r2, r3, #1
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	441a      	add	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	d908      	bls.n	80063f0 <UART_SetConfig+0x388>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e4:	d204      	bcs.n	80063f0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	e001      	b.n	80063f4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006400:	7fbb      	ldrb	r3, [r7, #30]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	007a1200 	.word	0x007a1200

08006410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01a      	beq.n	8006526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650e:	d10a      	bne.n	8006526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af02      	add	r7, sp, #8
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006564:	f7fc f9b4 	bl	80028d0 <HAL_GetTick>
 8006568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d10e      	bne.n	8006596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f82d 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e023      	b.n	80065de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d10e      	bne.n	80065c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f817 	bl	80065e6 <UART_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e00d      	b.n	80065de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f6:	e0a5      	b.n	8006744 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	f000 80a1 	beq.w	8006744 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006602:	f7fc f965 	bl	80028d0 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <UART_WaitOnFlagUntilTimeout+0x32>
 8006612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13e      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662c:	667b      	str	r3, [r7, #100]	; 0x64
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006638:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800663c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	663b      	str	r3, [r7, #96]	; 0x60
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800666a:	64ba      	str	r2, [r7, #72]	; 0x48
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e067      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d04f      	beq.n	8006744 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d147      	bne.n	8006744 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
 80066de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e6      	bne.n	80066be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	66bb      	str	r3, [r7, #104]	; 0x68
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3308      	adds	r3, #8
 800670e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006710:	623a      	str	r2, [r7, #32]
 8006712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	69f9      	ldr	r1, [r7, #28]
 8006716:	6a3a      	ldr	r2, [r7, #32]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	61bb      	str	r3, [r7, #24]
   return(result);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e010      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4013      	ands	r3, r2
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	429a      	cmp	r2, r3
 8006760:	f43f af4a 	beq.w	80065f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3770      	adds	r7, #112	; 0x70
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006770:	b480      	push	{r7}
 8006772:	b091      	sub	sp, #68	; 0x44
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d10e      	bne.n	80067c2 <UART_Start_Receive_IT+0x52>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d105      	bne.n	80067b8 <UART_Start_Receive_IT+0x48>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b6:	e02d      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	22ff      	movs	r2, #255	; 0xff
 80067bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067c0:	e028      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <UART_Start_Receive_IT+0x76>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <UART_Start_Receive_IT+0x6c>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067da:	e01b      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	227f      	movs	r2, #127	; 0x7f
 80067e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067e4:	e016      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ee:	d10d      	bne.n	800680c <UART_Start_Receive_IT+0x9c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <UART_Start_Receive_IT+0x92>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	227f      	movs	r2, #127	; 0x7f
 80067fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006800:	e008      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	223f      	movs	r2, #63	; 0x3f
 8006806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800680a:	e003      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2222      	movs	r2, #34	; 0x22
 8006820:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006842:	637a      	str	r2, [r7, #52]	; 0x34
 8006844:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d107      	bne.n	8006870 <UART_Start_Receive_IT+0x100>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <UART_Start_Receive_IT+0x150>)
 800686c:	665a      	str	r2, [r3, #100]	; 0x64
 800686e:	e002      	b.n	8006876 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <UART_Start_Receive_IT+0x154>)
 8006874:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	613b      	str	r3, [r7, #16]
   return(result);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006892:	63bb      	str	r3, [r7, #56]	; 0x38
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	69f9      	ldr	r1, [r7, #28]
 80068a2:	6a3a      	ldr	r2, [r7, #32]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e6      	bne.n	800687e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3744      	adds	r7, #68	; 0x44
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	08006b6b 	.word	0x08006b6b
 80068c4:	08006a0f 	.word	0x08006a0f

080068c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b095      	sub	sp, #84	; 0x54
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ee:	643b      	str	r3, [r7, #64]	; 0x40
 80068f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e6      	bne.n	80068d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	61fb      	str	r3, [r7, #28]
   return(result);
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	64bb      	str	r3, [r7, #72]	; 0x48
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e5      	bne.n	8006902 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693a:	2b01      	cmp	r3, #1
 800693c:	d118      	bne.n	8006970 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	60bb      	str	r3, [r7, #8]
   return(result);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0310 	bic.w	r3, r3, #16
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	613b      	str	r3, [r7, #16]
   return(result);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e6      	bne.n	800693e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006982:	bf00      	nop
 8006984:	3754      	adds	r7, #84	; 0x54
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fb45 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b088      	sub	sp, #32
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6979      	ldr	r1, [r7, #20]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	613b      	str	r3, [r7, #16]
   return(result);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e6      	bne.n	80069c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fb11 	bl	8006028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a06:	bf00      	nop
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b096      	sub	sp, #88	; 0x58
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a24:	2b22      	cmp	r3, #34	; 0x22
 8006a26:	f040 8094 	bne.w	8006b52 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a38:	b2d9      	uxtb	r1, r3
 8006a3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	400a      	ands	r2, r1
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d177      	bne.n	8006b62 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a86:	653b      	str	r3, [r7, #80]	; 0x50
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
 8006a92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ac4:	633a      	str	r2, [r7, #48]	; 0x30
 8006ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d12e      	bne.n	8006b4a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	69b9      	ldr	r1, [r7, #24]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e6      	bne.n	8006af2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d103      	bne.n	8006b3a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2210      	movs	r2, #16
 8006b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fa84 	bl	8006050 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b48:	e00b      	b.n	8006b62 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fa ffac 	bl	8001aa8 <HAL_UART_RxCpltCallback>
}
 8006b50:	e007      	b.n	8006b62 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0208 	orr.w	r2, r2, #8
 8006b60:	619a      	str	r2, [r3, #24]
}
 8006b62:	bf00      	nop
 8006b64:	3758      	adds	r7, #88	; 0x58
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b096      	sub	sp, #88	; 0x58
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b80:	2b22      	cmp	r3, #34	; 0x22
 8006b82:	f040 8094 	bne.w	8006cae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b96:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	1c9a      	adds	r2, r3, #2
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d177      	bne.n	8006cbe <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bec:	643b      	str	r3, [r7, #64]	; 0x40
 8006bee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e6      	bne.n	8006bce <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f023 0301 	bic.w	r3, r3, #1
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e5      	bne.n	8006c00 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d12e      	bne.n	8006ca6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 0310 	bic.w	r3, r3, #16
 8006c62:	647b      	str	r3, [r7, #68]	; 0x44
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6979      	ldr	r1, [r7, #20]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d103      	bne.n	8006c96 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2210      	movs	r2, #16
 8006c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff f9d6 	bl	8006050 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ca4:	e00b      	b.n	8006cbe <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa fefe 	bl	8001aa8 <HAL_UART_RxCpltCallback>
}
 8006cac:	e007      	b.n	8006cbe <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0208 	orr.w	r2, r2, #8
 8006cbc:	619a      	str	r2, [r3, #24]
}
 8006cbe:	bf00      	nop
 8006cc0:	3758      	adds	r7, #88	; 0x58
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000074 	.word	0x20000074

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4e0d      	ldr	r6, [pc, #52]	; (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	; (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1ba4      	subs	r4, r4, r6
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	42a5      	cmp	r5, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4e0b      	ldr	r6, [pc, #44]	; (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	; (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f002 fd5a 	bl	80097b4 <_init>
 8006d00:	1ba4      	subs	r4, r4, r6
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2500      	movs	r5, #0
 8006d06:	42a5      	cmp	r5, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d10:	4798      	blx	r3
 8006d12:	3501      	adds	r5, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d1a:	4798      	blx	r3
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	08009c78 	.word	0x08009c78
 8006d24:	08009c78 	.word	0x08009c78
 8006d28:	08009c78 	.word	0x08009c78
 8006d2c:	08009c7c 	.word	0x08009c7c

08006d30 <memset>:
 8006d30:	4402      	add	r2, r0
 8006d32:	4603      	mov	r3, r0
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d100      	bne.n	8006d3a <memset+0xa>
 8006d38:	4770      	bx	lr
 8006d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3e:	e7f9      	b.n	8006d34 <memset+0x4>

08006d40 <__cvt>:
 8006d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d44:	ec55 4b10 	vmov	r4, r5, d0
 8006d48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d4a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	460e      	mov	r6, r1
 8006d52:	4691      	mov	r9, r2
 8006d54:	4619      	mov	r1, r3
 8006d56:	bfb8      	it	lt
 8006d58:	4622      	movlt	r2, r4
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	f027 0720 	bic.w	r7, r7, #32
 8006d60:	bfbb      	ittet	lt
 8006d62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d66:	461d      	movlt	r5, r3
 8006d68:	2300      	movge	r3, #0
 8006d6a:	232d      	movlt	r3, #45	; 0x2d
 8006d6c:	bfb8      	it	lt
 8006d6e:	4614      	movlt	r4, r2
 8006d70:	2f46      	cmp	r7, #70	; 0x46
 8006d72:	700b      	strb	r3, [r1, #0]
 8006d74:	d004      	beq.n	8006d80 <__cvt+0x40>
 8006d76:	2f45      	cmp	r7, #69	; 0x45
 8006d78:	d100      	bne.n	8006d7c <__cvt+0x3c>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	e000      	b.n	8006d82 <__cvt+0x42>
 8006d80:	2103      	movs	r1, #3
 8006d82:	ab03      	add	r3, sp, #12
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	ab02      	add	r3, sp, #8
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	4653      	mov	r3, sl
 8006d8e:	ec45 4b10 	vmov	d0, r4, r5
 8006d92:	f000 fbad 	bl	80074f0 <_dtoa_r>
 8006d96:	2f47      	cmp	r7, #71	; 0x47
 8006d98:	4680      	mov	r8, r0
 8006d9a:	d102      	bne.n	8006da2 <__cvt+0x62>
 8006d9c:	f019 0f01 	tst.w	r9, #1
 8006da0:	d026      	beq.n	8006df0 <__cvt+0xb0>
 8006da2:	2f46      	cmp	r7, #70	; 0x46
 8006da4:	eb08 0906 	add.w	r9, r8, r6
 8006da8:	d111      	bne.n	8006dce <__cvt+0x8e>
 8006daa:	f898 3000 	ldrb.w	r3, [r8]
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	d10a      	bne.n	8006dc8 <__cvt+0x88>
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fe39 	bl	8000a30 <__aeabi_dcmpeq>
 8006dbe:	b918      	cbnz	r0, 8006dc8 <__cvt+0x88>
 8006dc0:	f1c6 0601 	rsb	r6, r6, #1
 8006dc4:	f8ca 6000 	str.w	r6, [sl]
 8006dc8:	f8da 3000 	ldr.w	r3, [sl]
 8006dcc:	4499      	add	r9, r3
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 fe2b 	bl	8000a30 <__aeabi_dcmpeq>
 8006dda:	b938      	cbnz	r0, 8006dec <__cvt+0xac>
 8006ddc:	2230      	movs	r2, #48	; 0x30
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	454b      	cmp	r3, r9
 8006de2:	d205      	bcs.n	8006df0 <__cvt+0xb0>
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	9103      	str	r1, [sp, #12]
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e7f8      	b.n	8006dde <__cvt+0x9e>
 8006dec:	f8cd 900c 	str.w	r9, [sp, #12]
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006df4:	eba3 0308 	sub.w	r3, r3, r8
 8006df8:	4640      	mov	r0, r8
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	b004      	add	sp, #16
 8006dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e02 <__exponent>:
 8006e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e04:	2900      	cmp	r1, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	bfba      	itte	lt
 8006e0a:	4249      	neglt	r1, r1
 8006e0c:	232d      	movlt	r3, #45	; 0x2d
 8006e0e:	232b      	movge	r3, #43	; 0x2b
 8006e10:	2909      	cmp	r1, #9
 8006e12:	f804 2b02 	strb.w	r2, [r4], #2
 8006e16:	7043      	strb	r3, [r0, #1]
 8006e18:	dd20      	ble.n	8006e5c <__exponent+0x5a>
 8006e1a:	f10d 0307 	add.w	r3, sp, #7
 8006e1e:	461f      	mov	r7, r3
 8006e20:	260a      	movs	r6, #10
 8006e22:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e26:	fb06 1115 	mls	r1, r6, r5, r1
 8006e2a:	3130      	adds	r1, #48	; 0x30
 8006e2c:	2d09      	cmp	r5, #9
 8006e2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e32:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e36:	4629      	mov	r1, r5
 8006e38:	dc09      	bgt.n	8006e4e <__exponent+0x4c>
 8006e3a:	3130      	adds	r1, #48	; 0x30
 8006e3c:	3b02      	subs	r3, #2
 8006e3e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e42:	42bb      	cmp	r3, r7
 8006e44:	4622      	mov	r2, r4
 8006e46:	d304      	bcc.n	8006e52 <__exponent+0x50>
 8006e48:	1a10      	subs	r0, r2, r0
 8006e4a:	b003      	add	sp, #12
 8006e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4e:	4613      	mov	r3, r2
 8006e50:	e7e7      	b.n	8006e22 <__exponent+0x20>
 8006e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e56:	f804 2b01 	strb.w	r2, [r4], #1
 8006e5a:	e7f2      	b.n	8006e42 <__exponent+0x40>
 8006e5c:	2330      	movs	r3, #48	; 0x30
 8006e5e:	4419      	add	r1, r3
 8006e60:	7083      	strb	r3, [r0, #2]
 8006e62:	1d02      	adds	r2, r0, #4
 8006e64:	70c1      	strb	r1, [r0, #3]
 8006e66:	e7ef      	b.n	8006e48 <__exponent+0x46>

08006e68 <_printf_float>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	b08d      	sub	sp, #52	; 0x34
 8006e6e:	460c      	mov	r4, r1
 8006e70:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006e74:	4616      	mov	r6, r2
 8006e76:	461f      	mov	r7, r3
 8006e78:	4605      	mov	r5, r0
 8006e7a:	f001 f8f1 	bl	8008060 <_localeconv_r>
 8006e7e:	6803      	ldr	r3, [r0, #0]
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7f9 f9a8 	bl	80001d8 <strlen>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e90:	9005      	str	r0, [sp, #20]
 8006e92:	3307      	adds	r3, #7
 8006e94:	f023 0307 	bic.w	r3, r3, #7
 8006e98:	f103 0208 	add.w	r2, r3, #8
 8006e9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ea0:	f8d4 b000 	ldr.w	fp, [r4]
 8006ea4:	f8c8 2000 	str.w	r2, [r8]
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006eb0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006eb4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	4ba7      	ldr	r3, [pc, #668]	; (8007160 <_printf_float+0x2f8>)
 8006ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec8:	f7f9 fde4 	bl	8000a94 <__aeabi_dcmpun>
 8006ecc:	bb70      	cbnz	r0, 8006f2c <_printf_float+0xc4>
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	4ba3      	ldr	r3, [pc, #652]	; (8007160 <_printf_float+0x2f8>)
 8006ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ed8:	f7f9 fdbe 	bl	8000a58 <__aeabi_dcmple>
 8006edc:	bb30      	cbnz	r0, 8006f2c <_printf_float+0xc4>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f7f9 fdad 	bl	8000a44 <__aeabi_dcmplt>
 8006eea:	b110      	cbz	r0, 8006ef2 <_printf_float+0x8a>
 8006eec:	232d      	movs	r3, #45	; 0x2d
 8006eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef2:	4a9c      	ldr	r2, [pc, #624]	; (8007164 <_printf_float+0x2fc>)
 8006ef4:	4b9c      	ldr	r3, [pc, #624]	; (8007168 <_printf_float+0x300>)
 8006ef6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006efa:	bf8c      	ite	hi
 8006efc:	4690      	movhi	r8, r2
 8006efe:	4698      	movls	r8, r3
 8006f00:	2303      	movs	r3, #3
 8006f02:	f02b 0204 	bic.w	r2, fp, #4
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	6022      	str	r2, [r4, #0]
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	9700      	str	r7, [sp, #0]
 8006f10:	4633      	mov	r3, r6
 8006f12:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f14:	4621      	mov	r1, r4
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 f9e6 	bl	80072e8 <_printf_common>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f040 808d 	bne.w	800703c <_printf_float+0x1d4>
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	b00d      	add	sp, #52	; 0x34
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 fdae 	bl	8000a94 <__aeabi_dcmpun>
 8006f38:	b110      	cbz	r0, 8006f40 <_printf_float+0xd8>
 8006f3a:	4a8c      	ldr	r2, [pc, #560]	; (800716c <_printf_float+0x304>)
 8006f3c:	4b8c      	ldr	r3, [pc, #560]	; (8007170 <_printf_float+0x308>)
 8006f3e:	e7da      	b.n	8006ef6 <_printf_float+0x8e>
 8006f40:	6861      	ldr	r1, [r4, #4]
 8006f42:	1c4b      	adds	r3, r1, #1
 8006f44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f48:	a80a      	add	r0, sp, #40	; 0x28
 8006f4a:	d13e      	bne.n	8006fca <_printf_float+0x162>
 8006f4c:	2306      	movs	r3, #6
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	2300      	movs	r3, #0
 8006f52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f56:	ab09      	add	r3, sp, #36	; 0x24
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	ec49 8b10 	vmov	d0, r8, r9
 8006f5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f62:	6022      	str	r2, [r4, #0]
 8006f64:	f8cd a004 	str.w	sl, [sp, #4]
 8006f68:	6861      	ldr	r1, [r4, #4]
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f7ff fee8 	bl	8006d40 <__cvt>
 8006f70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006f74:	2b47      	cmp	r3, #71	; 0x47
 8006f76:	4680      	mov	r8, r0
 8006f78:	d109      	bne.n	8006f8e <_printf_float+0x126>
 8006f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7c:	1cd8      	adds	r0, r3, #3
 8006f7e:	db02      	blt.n	8006f86 <_printf_float+0x11e>
 8006f80:	6862      	ldr	r2, [r4, #4]
 8006f82:	4293      	cmp	r3, r2
 8006f84:	dd47      	ble.n	8007016 <_printf_float+0x1ae>
 8006f86:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f8a:	fa5f fa8a 	uxtb.w	sl, sl
 8006f8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f94:	d824      	bhi.n	8006fe0 <_printf_float+0x178>
 8006f96:	3901      	subs	r1, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f9e:	9109      	str	r1, [sp, #36]	; 0x24
 8006fa0:	f7ff ff2f 	bl	8006e02 <__exponent>
 8006fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa6:	1813      	adds	r3, r2, r0
 8006fa8:	2a01      	cmp	r2, #1
 8006faa:	4681      	mov	r9, r0
 8006fac:	6123      	str	r3, [r4, #16]
 8006fae:	dc02      	bgt.n	8006fb6 <_printf_float+0x14e>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	07d1      	lsls	r1, r2, #31
 8006fb4:	d501      	bpl.n	8006fba <_printf_float+0x152>
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0a5      	beq.n	8006f0e <_printf_float+0xa6>
 8006fc2:	232d      	movs	r3, #45	; 0x2d
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc8:	e7a1      	b.n	8006f0e <_printf_float+0xa6>
 8006fca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006fce:	f000 8177 	beq.w	80072c0 <_printf_float+0x458>
 8006fd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006fd6:	d1bb      	bne.n	8006f50 <_printf_float+0xe8>
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	d1b9      	bne.n	8006f50 <_printf_float+0xe8>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e7b6      	b.n	8006f4e <_printf_float+0xe6>
 8006fe0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006fe4:	d119      	bne.n	800701a <_printf_float+0x1b2>
 8006fe6:	2900      	cmp	r1, #0
 8006fe8:	6863      	ldr	r3, [r4, #4]
 8006fea:	dd0c      	ble.n	8007006 <_printf_float+0x19e>
 8006fec:	6121      	str	r1, [r4, #16]
 8006fee:	b913      	cbnz	r3, 8006ff6 <_printf_float+0x18e>
 8006ff0:	6822      	ldr	r2, [r4, #0]
 8006ff2:	07d2      	lsls	r2, r2, #31
 8006ff4:	d502      	bpl.n	8006ffc <_printf_float+0x194>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	440b      	add	r3, r1
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffe:	65a3      	str	r3, [r4, #88]	; 0x58
 8007000:	f04f 0900 	mov.w	r9, #0
 8007004:	e7d9      	b.n	8006fba <_printf_float+0x152>
 8007006:	b913      	cbnz	r3, 800700e <_printf_float+0x1a6>
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	07d0      	lsls	r0, r2, #31
 800700c:	d501      	bpl.n	8007012 <_printf_float+0x1aa>
 800700e:	3302      	adds	r3, #2
 8007010:	e7f3      	b.n	8006ffa <_printf_float+0x192>
 8007012:	2301      	movs	r3, #1
 8007014:	e7f1      	b.n	8006ffa <_printf_float+0x192>
 8007016:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800701a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800701e:	4293      	cmp	r3, r2
 8007020:	db05      	blt.n	800702e <_printf_float+0x1c6>
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	07d1      	lsls	r1, r2, #31
 8007028:	d5e8      	bpl.n	8006ffc <_printf_float+0x194>
 800702a:	3301      	adds	r3, #1
 800702c:	e7e5      	b.n	8006ffa <_printf_float+0x192>
 800702e:	2b00      	cmp	r3, #0
 8007030:	bfd4      	ite	le
 8007032:	f1c3 0302 	rsble	r3, r3, #2
 8007036:	2301      	movgt	r3, #1
 8007038:	4413      	add	r3, r2
 800703a:	e7de      	b.n	8006ffa <_printf_float+0x192>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	055a      	lsls	r2, r3, #21
 8007040:	d407      	bmi.n	8007052 <_printf_float+0x1ea>
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	4642      	mov	r2, r8
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	d12b      	bne.n	80070a8 <_printf_float+0x240>
 8007050:	e767      	b.n	8006f22 <_printf_float+0xba>
 8007052:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007056:	f240 80dc 	bls.w	8007212 <_printf_float+0x3aa>
 800705a:	2200      	movs	r2, #0
 800705c:	2300      	movs	r3, #0
 800705e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007062:	f7f9 fce5 	bl	8000a30 <__aeabi_dcmpeq>
 8007066:	2800      	cmp	r0, #0
 8007068:	d033      	beq.n	80070d2 <_printf_float+0x26a>
 800706a:	2301      	movs	r3, #1
 800706c:	4a41      	ldr	r2, [pc, #260]	; (8007174 <_printf_float+0x30c>)
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	f43f af54 	beq.w	8006f22 <_printf_float+0xba>
 800707a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800707e:	429a      	cmp	r2, r3
 8007080:	db02      	blt.n	8007088 <_printf_float+0x220>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	07d8      	lsls	r0, r3, #31
 8007086:	d50f      	bpl.n	80070a8 <_printf_float+0x240>
 8007088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f af45 	beq.w	8006f22 <_printf_float+0xba>
 8007098:	f04f 0800 	mov.w	r8, #0
 800709c:	f104 091a 	add.w	r9, r4, #26
 80070a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a2:	3b01      	subs	r3, #1
 80070a4:	4543      	cmp	r3, r8
 80070a6:	dc09      	bgt.n	80070bc <_printf_float+0x254>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	079b      	lsls	r3, r3, #30
 80070ac:	f100 8103 	bmi.w	80072b6 <_printf_float+0x44e>
 80070b0:	68e0      	ldr	r0, [r4, #12]
 80070b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b4:	4298      	cmp	r0, r3
 80070b6:	bfb8      	it	lt
 80070b8:	4618      	movlt	r0, r3
 80070ba:	e734      	b.n	8006f26 <_printf_float+0xbe>
 80070bc:	2301      	movs	r3, #1
 80070be:	464a      	mov	r2, r9
 80070c0:	4631      	mov	r1, r6
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	f43f af2b 	beq.w	8006f22 <_printf_float+0xba>
 80070cc:	f108 0801 	add.w	r8, r8, #1
 80070d0:	e7e6      	b.n	80070a0 <_printf_float+0x238>
 80070d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc2b      	bgt.n	8007130 <_printf_float+0x2c8>
 80070d8:	2301      	movs	r3, #1
 80070da:	4a26      	ldr	r2, [pc, #152]	; (8007174 <_printf_float+0x30c>)
 80070dc:	4631      	mov	r1, r6
 80070de:	4628      	mov	r0, r5
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	f43f af1d 	beq.w	8006f22 <_printf_float+0xba>
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	b923      	cbnz	r3, 80070f6 <_printf_float+0x28e>
 80070ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ee:	b913      	cbnz	r3, 80070f6 <_printf_float+0x28e>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	07d9      	lsls	r1, r3, #31
 80070f4:	d5d8      	bpl.n	80070a8 <_printf_float+0x240>
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f af0e 	beq.w	8006f22 <_printf_float+0xba>
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	f104 0a1a 	add.w	sl, r4, #26
 800710e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007110:	425b      	negs	r3, r3
 8007112:	454b      	cmp	r3, r9
 8007114:	dc01      	bgt.n	800711a <_printf_float+0x2b2>
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	e794      	b.n	8007044 <_printf_float+0x1dc>
 800711a:	2301      	movs	r3, #1
 800711c:	4652      	mov	r2, sl
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f aefc 	beq.w	8006f22 <_printf_float+0xba>
 800712a:	f109 0901 	add.w	r9, r9, #1
 800712e:	e7ee      	b.n	800710e <_printf_float+0x2a6>
 8007130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007134:	429a      	cmp	r2, r3
 8007136:	bfa8      	it	ge
 8007138:	461a      	movge	r2, r3
 800713a:	2a00      	cmp	r2, #0
 800713c:	4691      	mov	r9, r2
 800713e:	dd07      	ble.n	8007150 <_printf_float+0x2e8>
 8007140:	4613      	mov	r3, r2
 8007142:	4631      	mov	r1, r6
 8007144:	4642      	mov	r2, r8
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f aee9 	beq.w	8006f22 <_printf_float+0xba>
 8007150:	f104 031a 	add.w	r3, r4, #26
 8007154:	f04f 0b00 	mov.w	fp, #0
 8007158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800715c:	9306      	str	r3, [sp, #24]
 800715e:	e015      	b.n	800718c <_printf_float+0x324>
 8007160:	7fefffff 	.word	0x7fefffff
 8007164:	0800987c 	.word	0x0800987c
 8007168:	08009878 	.word	0x08009878
 800716c:	08009884 	.word	0x08009884
 8007170:	08009880 	.word	0x08009880
 8007174:	08009888 	.word	0x08009888
 8007178:	2301      	movs	r3, #1
 800717a:	9a06      	ldr	r2, [sp, #24]
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f aecd 	beq.w	8006f22 <_printf_float+0xba>
 8007188:	f10b 0b01 	add.w	fp, fp, #1
 800718c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007190:	ebaa 0309 	sub.w	r3, sl, r9
 8007194:	455b      	cmp	r3, fp
 8007196:	dcef      	bgt.n	8007178 <_printf_float+0x310>
 8007198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800719c:	429a      	cmp	r2, r3
 800719e:	44d0      	add	r8, sl
 80071a0:	db15      	blt.n	80071ce <_printf_float+0x366>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	07da      	lsls	r2, r3, #31
 80071a6:	d412      	bmi.n	80071ce <_printf_float+0x366>
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ac:	eba3 020a 	sub.w	r2, r3, sl
 80071b0:	eba3 0a01 	sub.w	sl, r3, r1
 80071b4:	4592      	cmp	sl, r2
 80071b6:	bfa8      	it	ge
 80071b8:	4692      	movge	sl, r2
 80071ba:	f1ba 0f00 	cmp.w	sl, #0
 80071be:	dc0e      	bgt.n	80071de <_printf_float+0x376>
 80071c0:	f04f 0800 	mov.w	r8, #0
 80071c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071c8:	f104 091a 	add.w	r9, r4, #26
 80071cc:	e019      	b.n	8007202 <_printf_float+0x39a>
 80071ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d1e5      	bne.n	80071a8 <_printf_float+0x340>
 80071dc:	e6a1      	b.n	8006f22 <_printf_float+0xba>
 80071de:	4653      	mov	r3, sl
 80071e0:	4642      	mov	r2, r8
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	d1e9      	bne.n	80071c0 <_printf_float+0x358>
 80071ec:	e699      	b.n	8006f22 <_printf_float+0xba>
 80071ee:	2301      	movs	r3, #1
 80071f0:	464a      	mov	r2, r9
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	f43f ae92 	beq.w	8006f22 <_printf_float+0xba>
 80071fe:	f108 0801 	add.w	r8, r8, #1
 8007202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	eba3 030a 	sub.w	r3, r3, sl
 800720c:	4543      	cmp	r3, r8
 800720e:	dcee      	bgt.n	80071ee <_printf_float+0x386>
 8007210:	e74a      	b.n	80070a8 <_printf_float+0x240>
 8007212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007214:	2a01      	cmp	r2, #1
 8007216:	dc01      	bgt.n	800721c <_printf_float+0x3b4>
 8007218:	07db      	lsls	r3, r3, #31
 800721a:	d53a      	bpl.n	8007292 <_printf_float+0x42a>
 800721c:	2301      	movs	r3, #1
 800721e:	4642      	mov	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f ae7b 	beq.w	8006f22 <_printf_float+0xba>
 800722c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f108 0801 	add.w	r8, r8, #1
 800723c:	f43f ae71 	beq.w	8006f22 <_printf_float+0xba>
 8007240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007242:	2200      	movs	r2, #0
 8007244:	f103 3aff 	add.w	sl, r3, #4294967295
 8007248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800724c:	2300      	movs	r3, #0
 800724e:	f7f9 fbef 	bl	8000a30 <__aeabi_dcmpeq>
 8007252:	b9c8      	cbnz	r0, 8007288 <_printf_float+0x420>
 8007254:	4653      	mov	r3, sl
 8007256:	4642      	mov	r2, r8
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	d10e      	bne.n	8007280 <_printf_float+0x418>
 8007262:	e65e      	b.n	8006f22 <_printf_float+0xba>
 8007264:	2301      	movs	r3, #1
 8007266:	4652      	mov	r2, sl
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f ae57 	beq.w	8006f22 <_printf_float+0xba>
 8007274:	f108 0801 	add.w	r8, r8, #1
 8007278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727a:	3b01      	subs	r3, #1
 800727c:	4543      	cmp	r3, r8
 800727e:	dcf1      	bgt.n	8007264 <_printf_float+0x3fc>
 8007280:	464b      	mov	r3, r9
 8007282:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007286:	e6de      	b.n	8007046 <_printf_float+0x1de>
 8007288:	f04f 0800 	mov.w	r8, #0
 800728c:	f104 0a1a 	add.w	sl, r4, #26
 8007290:	e7f2      	b.n	8007278 <_printf_float+0x410>
 8007292:	2301      	movs	r3, #1
 8007294:	e7df      	b.n	8007256 <_printf_float+0x3ee>
 8007296:	2301      	movs	r3, #1
 8007298:	464a      	mov	r2, r9
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	f43f ae3e 	beq.w	8006f22 <_printf_float+0xba>
 80072a6:	f108 0801 	add.w	r8, r8, #1
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	4543      	cmp	r3, r8
 80072b2:	dcf0      	bgt.n	8007296 <_printf_float+0x42e>
 80072b4:	e6fc      	b.n	80070b0 <_printf_float+0x248>
 80072b6:	f04f 0800 	mov.w	r8, #0
 80072ba:	f104 0919 	add.w	r9, r4, #25
 80072be:	e7f4      	b.n	80072aa <_printf_float+0x442>
 80072c0:	2900      	cmp	r1, #0
 80072c2:	f43f ae8b 	beq.w	8006fdc <_printf_float+0x174>
 80072c6:	2300      	movs	r3, #0
 80072c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80072cc:	ab09      	add	r3, sp, #36	; 0x24
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	ec49 8b10 	vmov	d0, r8, r9
 80072d4:	6022      	str	r2, [r4, #0]
 80072d6:	f8cd a004 	str.w	sl, [sp, #4]
 80072da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072de:	4628      	mov	r0, r5
 80072e0:	f7ff fd2e 	bl	8006d40 <__cvt>
 80072e4:	4680      	mov	r8, r0
 80072e6:	e648      	b.n	8006f7a <_printf_float+0x112>

080072e8 <_printf_common>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	4691      	mov	r9, r2
 80072ee:	461f      	mov	r7, r3
 80072f0:	688a      	ldr	r2, [r1, #8]
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bfb8      	it	lt
 80072fc:	4613      	movlt	r3, r2
 80072fe:	f8c9 3000 	str.w	r3, [r9]
 8007302:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	b112      	cbz	r2, 8007312 <_printf_common+0x2a>
 800730c:	3301      	adds	r3, #1
 800730e:	f8c9 3000 	str.w	r3, [r9]
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	0699      	lsls	r1, r3, #26
 8007316:	bf42      	ittt	mi
 8007318:	f8d9 3000 	ldrmi.w	r3, [r9]
 800731c:	3302      	addmi	r3, #2
 800731e:	f8c9 3000 	strmi.w	r3, [r9]
 8007322:	6825      	ldr	r5, [r4, #0]
 8007324:	f015 0506 	ands.w	r5, r5, #6
 8007328:	d107      	bne.n	800733a <_printf_common+0x52>
 800732a:	f104 0a19 	add.w	sl, r4, #25
 800732e:	68e3      	ldr	r3, [r4, #12]
 8007330:	f8d9 2000 	ldr.w	r2, [r9]
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	42ab      	cmp	r3, r5
 8007338:	dc28      	bgt.n	800738c <_printf_common+0xa4>
 800733a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	3300      	adds	r3, #0
 8007342:	bf18      	it	ne
 8007344:	2301      	movne	r3, #1
 8007346:	0692      	lsls	r2, r2, #26
 8007348:	d42d      	bmi.n	80073a6 <_printf_common+0xbe>
 800734a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800734e:	4639      	mov	r1, r7
 8007350:	4630      	mov	r0, r6
 8007352:	47c0      	blx	r8
 8007354:	3001      	adds	r0, #1
 8007356:	d020      	beq.n	800739a <_printf_common+0xb2>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	68e5      	ldr	r5, [r4, #12]
 800735c:	f8d9 2000 	ldr.w	r2, [r9]
 8007360:	f003 0306 	and.w	r3, r3, #6
 8007364:	2b04      	cmp	r3, #4
 8007366:	bf08      	it	eq
 8007368:	1aad      	subeq	r5, r5, r2
 800736a:	68a3      	ldr	r3, [r4, #8]
 800736c:	6922      	ldr	r2, [r4, #16]
 800736e:	bf0c      	ite	eq
 8007370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007374:	2500      	movne	r5, #0
 8007376:	4293      	cmp	r3, r2
 8007378:	bfc4      	itt	gt
 800737a:	1a9b      	subgt	r3, r3, r2
 800737c:	18ed      	addgt	r5, r5, r3
 800737e:	f04f 0900 	mov.w	r9, #0
 8007382:	341a      	adds	r4, #26
 8007384:	454d      	cmp	r5, r9
 8007386:	d11a      	bne.n	80073be <_printf_common+0xd6>
 8007388:	2000      	movs	r0, #0
 800738a:	e008      	b.n	800739e <_printf_common+0xb6>
 800738c:	2301      	movs	r3, #1
 800738e:	4652      	mov	r2, sl
 8007390:	4639      	mov	r1, r7
 8007392:	4630      	mov	r0, r6
 8007394:	47c0      	blx	r8
 8007396:	3001      	adds	r0, #1
 8007398:	d103      	bne.n	80073a2 <_printf_common+0xba>
 800739a:	f04f 30ff 	mov.w	r0, #4294967295
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	3501      	adds	r5, #1
 80073a4:	e7c3      	b.n	800732e <_printf_common+0x46>
 80073a6:	18e1      	adds	r1, r4, r3
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	2030      	movs	r0, #48	; 0x30
 80073ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073b0:	4422      	add	r2, r4
 80073b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ba:	3302      	adds	r3, #2
 80073bc:	e7c5      	b.n	800734a <_printf_common+0x62>
 80073be:	2301      	movs	r3, #1
 80073c0:	4622      	mov	r2, r4
 80073c2:	4639      	mov	r1, r7
 80073c4:	4630      	mov	r0, r6
 80073c6:	47c0      	blx	r8
 80073c8:	3001      	adds	r0, #1
 80073ca:	d0e6      	beq.n	800739a <_printf_common+0xb2>
 80073cc:	f109 0901 	add.w	r9, r9, #1
 80073d0:	e7d8      	b.n	8007384 <_printf_common+0x9c>

080073d2 <quorem>:
 80073d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d6:	6903      	ldr	r3, [r0, #16]
 80073d8:	690c      	ldr	r4, [r1, #16]
 80073da:	42a3      	cmp	r3, r4
 80073dc:	4680      	mov	r8, r0
 80073de:	f2c0 8082 	blt.w	80074e6 <quorem+0x114>
 80073e2:	3c01      	subs	r4, #1
 80073e4:	f101 0714 	add.w	r7, r1, #20
 80073e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80073ec:	f100 0614 	add.w	r6, r0, #20
 80073f0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80073f4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80073f8:	eb06 030c 	add.w	r3, r6, ip
 80073fc:	3501      	adds	r5, #1
 80073fe:	eb07 090c 	add.w	r9, r7, ip
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	fbb0 f5f5 	udiv	r5, r0, r5
 8007408:	b395      	cbz	r5, 8007470 <quorem+0x9e>
 800740a:	f04f 0a00 	mov.w	sl, #0
 800740e:	4638      	mov	r0, r7
 8007410:	46b6      	mov	lr, r6
 8007412:	46d3      	mov	fp, sl
 8007414:	f850 2b04 	ldr.w	r2, [r0], #4
 8007418:	b293      	uxth	r3, r2
 800741a:	fb05 a303 	mla	r3, r5, r3, sl
 800741e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007422:	b29b      	uxth	r3, r3
 8007424:	ebab 0303 	sub.w	r3, fp, r3
 8007428:	0c12      	lsrs	r2, r2, #16
 800742a:	f8de b000 	ldr.w	fp, [lr]
 800742e:	fb05 a202 	mla	r2, r5, r2, sl
 8007432:	fa13 f38b 	uxtah	r3, r3, fp
 8007436:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800743a:	fa1f fb82 	uxth.w	fp, r2
 800743e:	f8de 2000 	ldr.w	r2, [lr]
 8007442:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007446:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800744a:	b29b      	uxth	r3, r3
 800744c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007450:	4581      	cmp	r9, r0
 8007452:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007456:	f84e 3b04 	str.w	r3, [lr], #4
 800745a:	d2db      	bcs.n	8007414 <quorem+0x42>
 800745c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007460:	b933      	cbnz	r3, 8007470 <quorem+0x9e>
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	3b04      	subs	r3, #4
 8007466:	429e      	cmp	r6, r3
 8007468:	461a      	mov	r2, r3
 800746a:	d330      	bcc.n	80074ce <quorem+0xfc>
 800746c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007470:	4640      	mov	r0, r8
 8007472:	f001 f82b 	bl	80084cc <__mcmp>
 8007476:	2800      	cmp	r0, #0
 8007478:	db25      	blt.n	80074c6 <quorem+0xf4>
 800747a:	3501      	adds	r5, #1
 800747c:	4630      	mov	r0, r6
 800747e:	f04f 0c00 	mov.w	ip, #0
 8007482:	f857 2b04 	ldr.w	r2, [r7], #4
 8007486:	f8d0 e000 	ldr.w	lr, [r0]
 800748a:	b293      	uxth	r3, r2
 800748c:	ebac 0303 	sub.w	r3, ip, r3
 8007490:	0c12      	lsrs	r2, r2, #16
 8007492:	fa13 f38e 	uxtah	r3, r3, lr
 8007496:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800749a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800749e:	b29b      	uxth	r3, r3
 80074a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a4:	45b9      	cmp	r9, r7
 80074a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074aa:	f840 3b04 	str.w	r3, [r0], #4
 80074ae:	d2e8      	bcs.n	8007482 <quorem+0xb0>
 80074b0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80074b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80074b8:	b92a      	cbnz	r2, 80074c6 <quorem+0xf4>
 80074ba:	3b04      	subs	r3, #4
 80074bc:	429e      	cmp	r6, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	d30b      	bcc.n	80074da <quorem+0x108>
 80074c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80074c6:	4628      	mov	r0, r5
 80074c8:	b003      	add	sp, #12
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	d1ca      	bne.n	800746c <quorem+0x9a>
 80074d6:	3c01      	subs	r4, #1
 80074d8:	e7c5      	b.n	8007466 <quorem+0x94>
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	3b04      	subs	r3, #4
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d1ef      	bne.n	80074c2 <quorem+0xf0>
 80074e2:	3c01      	subs	r4, #1
 80074e4:	e7ea      	b.n	80074bc <quorem+0xea>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e7ee      	b.n	80074c8 <quorem+0xf6>
 80074ea:	0000      	movs	r0, r0
 80074ec:	0000      	movs	r0, r0
	...

080074f0 <_dtoa_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	ec57 6b10 	vmov	r6, r7, d0
 80074f8:	b097      	sub	sp, #92	; 0x5c
 80074fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074fc:	9106      	str	r1, [sp, #24]
 80074fe:	4604      	mov	r4, r0
 8007500:	920b      	str	r2, [sp, #44]	; 0x2c
 8007502:	9312      	str	r3, [sp, #72]	; 0x48
 8007504:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007508:	e9cd 6700 	strd	r6, r7, [sp]
 800750c:	b93d      	cbnz	r5, 800751e <_dtoa_r+0x2e>
 800750e:	2010      	movs	r0, #16
 8007510:	f000 fdb4 	bl	800807c <malloc>
 8007514:	6260      	str	r0, [r4, #36]	; 0x24
 8007516:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800751a:	6005      	str	r5, [r0, #0]
 800751c:	60c5      	str	r5, [r0, #12]
 800751e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	b151      	cbz	r1, 800753a <_dtoa_r+0x4a>
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	604a      	str	r2, [r1, #4]
 8007528:	2301      	movs	r3, #1
 800752a:	4093      	lsls	r3, r2
 800752c:	608b      	str	r3, [r1, #8]
 800752e:	4620      	mov	r0, r4
 8007530:	f000 fdeb 	bl	800810a <_Bfree>
 8007534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	1e3b      	subs	r3, r7, #0
 800753c:	bfbb      	ittet	lt
 800753e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007542:	9301      	strlt	r3, [sp, #4]
 8007544:	2300      	movge	r3, #0
 8007546:	2201      	movlt	r2, #1
 8007548:	bfac      	ite	ge
 800754a:	f8c8 3000 	strge.w	r3, [r8]
 800754e:	f8c8 2000 	strlt.w	r2, [r8]
 8007552:	4baf      	ldr	r3, [pc, #700]	; (8007810 <_dtoa_r+0x320>)
 8007554:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007558:	ea33 0308 	bics.w	r3, r3, r8
 800755c:	d114      	bne.n	8007588 <_dtoa_r+0x98>
 800755e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007560:	f242 730f 	movw	r3, #9999	; 0x270f
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	b923      	cbnz	r3, 8007574 <_dtoa_r+0x84>
 800756a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800756e:	2800      	cmp	r0, #0
 8007570:	f000 8542 	beq.w	8007ff8 <_dtoa_r+0xb08>
 8007574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007576:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007824 <_dtoa_r+0x334>
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8544 	beq.w	8008008 <_dtoa_r+0xb18>
 8007580:	f10b 0303 	add.w	r3, fp, #3
 8007584:	f000 bd3e 	b.w	8008004 <_dtoa_r+0xb14>
 8007588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800758c:	2200      	movs	r2, #0
 800758e:	2300      	movs	r3, #0
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f9 fa4c 	bl	8000a30 <__aeabi_dcmpeq>
 8007598:	4681      	mov	r9, r0
 800759a:	b168      	cbz	r0, 80075b8 <_dtoa_r+0xc8>
 800759c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800759e:	2301      	movs	r3, #1
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8524 	beq.w	8007ff2 <_dtoa_r+0xb02>
 80075aa:	4b9a      	ldr	r3, [pc, #616]	; (8007814 <_dtoa_r+0x324>)
 80075ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	f000 bd28 	b.w	8008008 <_dtoa_r+0xb18>
 80075b8:	aa14      	add	r2, sp, #80	; 0x50
 80075ba:	a915      	add	r1, sp, #84	; 0x54
 80075bc:	ec47 6b10 	vmov	d0, r6, r7
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fffa 	bl	80085ba <__d2b>
 80075c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075ca:	9004      	str	r0, [sp, #16]
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	d07c      	beq.n	80076ca <_dtoa_r+0x1da>
 80075d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80075d8:	46b2      	mov	sl, r6
 80075da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80075de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80075e6:	2200      	movs	r2, #0
 80075e8:	4b8b      	ldr	r3, [pc, #556]	; (8007818 <_dtoa_r+0x328>)
 80075ea:	4650      	mov	r0, sl
 80075ec:	4659      	mov	r1, fp
 80075ee:	f7f8 fdff 	bl	80001f0 <__aeabi_dsub>
 80075f2:	a381      	add	r3, pc, #516	; (adr r3, 80077f8 <_dtoa_r+0x308>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f7f8 ffb2 	bl	8000560 <__aeabi_dmul>
 80075fc:	a380      	add	r3, pc, #512	; (adr r3, 8007800 <_dtoa_r+0x310>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fdf7 	bl	80001f4 <__adddf3>
 8007606:	4606      	mov	r6, r0
 8007608:	4628      	mov	r0, r5
 800760a:	460f      	mov	r7, r1
 800760c:	f7f8 ff3e 	bl	800048c <__aeabi_i2d>
 8007610:	a37d      	add	r3, pc, #500	; (adr r3, 8007808 <_dtoa_r+0x318>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 ffa3 	bl	8000560 <__aeabi_dmul>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4630      	mov	r0, r6
 8007620:	4639      	mov	r1, r7
 8007622:	f7f8 fde7 	bl	80001f4 <__adddf3>
 8007626:	4606      	mov	r6, r0
 8007628:	460f      	mov	r7, r1
 800762a:	f7f9 fa49 	bl	8000ac0 <__aeabi_d2iz>
 800762e:	2200      	movs	r2, #0
 8007630:	4682      	mov	sl, r0
 8007632:	2300      	movs	r3, #0
 8007634:	4630      	mov	r0, r6
 8007636:	4639      	mov	r1, r7
 8007638:	f7f9 fa04 	bl	8000a44 <__aeabi_dcmplt>
 800763c:	b148      	cbz	r0, 8007652 <_dtoa_r+0x162>
 800763e:	4650      	mov	r0, sl
 8007640:	f7f8 ff24 	bl	800048c <__aeabi_i2d>
 8007644:	4632      	mov	r2, r6
 8007646:	463b      	mov	r3, r7
 8007648:	f7f9 f9f2 	bl	8000a30 <__aeabi_dcmpeq>
 800764c:	b908      	cbnz	r0, 8007652 <_dtoa_r+0x162>
 800764e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007652:	f1ba 0f16 	cmp.w	sl, #22
 8007656:	d859      	bhi.n	800770c <_dtoa_r+0x21c>
 8007658:	4970      	ldr	r1, [pc, #448]	; (800781c <_dtoa_r+0x32c>)
 800765a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800765e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007666:	f7f9 fa0b 	bl	8000a80 <__aeabi_dcmpgt>
 800766a:	2800      	cmp	r0, #0
 800766c:	d050      	beq.n	8007710 <_dtoa_r+0x220>
 800766e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007672:	2300      	movs	r3, #0
 8007674:	930f      	str	r3, [sp, #60]	; 0x3c
 8007676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007678:	1b5d      	subs	r5, r3, r5
 800767a:	f1b5 0801 	subs.w	r8, r5, #1
 800767e:	bf49      	itett	mi
 8007680:	f1c5 0301 	rsbmi	r3, r5, #1
 8007684:	2300      	movpl	r3, #0
 8007686:	9305      	strmi	r3, [sp, #20]
 8007688:	f04f 0800 	movmi.w	r8, #0
 800768c:	bf58      	it	pl
 800768e:	9305      	strpl	r3, [sp, #20]
 8007690:	f1ba 0f00 	cmp.w	sl, #0
 8007694:	db3e      	blt.n	8007714 <_dtoa_r+0x224>
 8007696:	2300      	movs	r3, #0
 8007698:	44d0      	add	r8, sl
 800769a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800769e:	9307      	str	r3, [sp, #28]
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	2b09      	cmp	r3, #9
 80076a4:	f200 8090 	bhi.w	80077c8 <_dtoa_r+0x2d8>
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	bfc4      	itt	gt
 80076ac:	3b04      	subgt	r3, #4
 80076ae:	9306      	strgt	r3, [sp, #24]
 80076b0:	9b06      	ldr	r3, [sp, #24]
 80076b2:	f1a3 0302 	sub.w	r3, r3, #2
 80076b6:	bfcc      	ite	gt
 80076b8:	2500      	movgt	r5, #0
 80076ba:	2501      	movle	r5, #1
 80076bc:	2b03      	cmp	r3, #3
 80076be:	f200 808f 	bhi.w	80077e0 <_dtoa_r+0x2f0>
 80076c2:	e8df f003 	tbb	[pc, r3]
 80076c6:	7f7d      	.short	0x7f7d
 80076c8:	7131      	.short	0x7131
 80076ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80076ce:	441d      	add	r5, r3
 80076d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076d4:	2820      	cmp	r0, #32
 80076d6:	dd13      	ble.n	8007700 <_dtoa_r+0x210>
 80076d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076dc:	9b00      	ldr	r3, [sp, #0]
 80076de:	fa08 f800 	lsl.w	r8, r8, r0
 80076e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076e6:	fa23 f000 	lsr.w	r0, r3, r0
 80076ea:	ea48 0000 	orr.w	r0, r8, r0
 80076ee:	f7f8 febd 	bl	800046c <__aeabi_ui2d>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4682      	mov	sl, r0
 80076f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80076fa:	3d01      	subs	r5, #1
 80076fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80076fe:	e772      	b.n	80075e6 <_dtoa_r+0xf6>
 8007700:	9b00      	ldr	r3, [sp, #0]
 8007702:	f1c0 0020 	rsb	r0, r0, #32
 8007706:	fa03 f000 	lsl.w	r0, r3, r0
 800770a:	e7f0      	b.n	80076ee <_dtoa_r+0x1fe>
 800770c:	2301      	movs	r3, #1
 800770e:	e7b1      	b.n	8007674 <_dtoa_r+0x184>
 8007710:	900f      	str	r0, [sp, #60]	; 0x3c
 8007712:	e7b0      	b.n	8007676 <_dtoa_r+0x186>
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	eba3 030a 	sub.w	r3, r3, sl
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	f1ca 0300 	rsb	r3, sl, #0
 8007720:	9307      	str	r3, [sp, #28]
 8007722:	2300      	movs	r3, #0
 8007724:	930e      	str	r3, [sp, #56]	; 0x38
 8007726:	e7bb      	b.n	80076a0 <_dtoa_r+0x1b0>
 8007728:	2301      	movs	r3, #1
 800772a:	930a      	str	r3, [sp, #40]	; 0x28
 800772c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd59      	ble.n	80077e6 <_dtoa_r+0x2f6>
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	4699      	mov	r9, r3
 8007736:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007738:	2200      	movs	r2, #0
 800773a:	6072      	str	r2, [r6, #4]
 800773c:	2204      	movs	r2, #4
 800773e:	f102 0014 	add.w	r0, r2, #20
 8007742:	4298      	cmp	r0, r3
 8007744:	6871      	ldr	r1, [r6, #4]
 8007746:	d953      	bls.n	80077f0 <_dtoa_r+0x300>
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fcaa 	bl	80080a2 <_Balloc>
 800774e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	f1b9 0f0e 	cmp.w	r9, #14
 8007756:	f8d3 b000 	ldr.w	fp, [r3]
 800775a:	f200 80e6 	bhi.w	800792a <_dtoa_r+0x43a>
 800775e:	2d00      	cmp	r5, #0
 8007760:	f000 80e3 	beq.w	800792a <_dtoa_r+0x43a>
 8007764:	ed9d 7b00 	vldr	d7, [sp]
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007770:	dd74      	ble.n	800785c <_dtoa_r+0x36c>
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <_dtoa_r+0x32c>)
 8007774:	f00a 030f 	and.w	r3, sl, #15
 8007778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800777c:	ed93 7b00 	vldr	d7, [r3]
 8007780:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007784:	06f0      	lsls	r0, r6, #27
 8007786:	ed8d 7b08 	vstr	d7, [sp, #32]
 800778a:	d565      	bpl.n	8007858 <_dtoa_r+0x368>
 800778c:	4b24      	ldr	r3, [pc, #144]	; (8007820 <_dtoa_r+0x330>)
 800778e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007792:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007796:	f7f9 f80d 	bl	80007b4 <__aeabi_ddiv>
 800779a:	e9cd 0100 	strd	r0, r1, [sp]
 800779e:	f006 060f 	and.w	r6, r6, #15
 80077a2:	2503      	movs	r5, #3
 80077a4:	4f1e      	ldr	r7, [pc, #120]	; (8007820 <_dtoa_r+0x330>)
 80077a6:	e04c      	b.n	8007842 <_dtoa_r+0x352>
 80077a8:	2301      	movs	r3, #1
 80077aa:	930a      	str	r3, [sp, #40]	; 0x28
 80077ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ae:	4453      	add	r3, sl
 80077b0:	f103 0901 	add.w	r9, r3, #1
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	464b      	mov	r3, r9
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	bfb8      	it	lt
 80077bc:	2301      	movlt	r3, #1
 80077be:	e7ba      	b.n	8007736 <_dtoa_r+0x246>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e7b2      	b.n	800772a <_dtoa_r+0x23a>
 80077c4:	2300      	movs	r3, #0
 80077c6:	e7f0      	b.n	80077aa <_dtoa_r+0x2ba>
 80077c8:	2501      	movs	r5, #1
 80077ca:	2300      	movs	r3, #0
 80077cc:	9306      	str	r3, [sp, #24]
 80077ce:	950a      	str	r5, [sp, #40]	; 0x28
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295
 80077d4:	9302      	str	r3, [sp, #8]
 80077d6:	4699      	mov	r9, r3
 80077d8:	2200      	movs	r2, #0
 80077da:	2312      	movs	r3, #18
 80077dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80077de:	e7aa      	b.n	8007736 <_dtoa_r+0x246>
 80077e0:	2301      	movs	r3, #1
 80077e2:	930a      	str	r3, [sp, #40]	; 0x28
 80077e4:	e7f4      	b.n	80077d0 <_dtoa_r+0x2e0>
 80077e6:	2301      	movs	r3, #1
 80077e8:	9302      	str	r3, [sp, #8]
 80077ea:	4699      	mov	r9, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	e7f5      	b.n	80077dc <_dtoa_r+0x2ec>
 80077f0:	3101      	adds	r1, #1
 80077f2:	6071      	str	r1, [r6, #4]
 80077f4:	0052      	lsls	r2, r2, #1
 80077f6:	e7a2      	b.n	800773e <_dtoa_r+0x24e>
 80077f8:	636f4361 	.word	0x636f4361
 80077fc:	3fd287a7 	.word	0x3fd287a7
 8007800:	8b60c8b3 	.word	0x8b60c8b3
 8007804:	3fc68a28 	.word	0x3fc68a28
 8007808:	509f79fb 	.word	0x509f79fb
 800780c:	3fd34413 	.word	0x3fd34413
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	08009889 	.word	0x08009889
 8007818:	3ff80000 	.word	0x3ff80000
 800781c:	080098c0 	.word	0x080098c0
 8007820:	08009898 	.word	0x08009898
 8007824:	08009893 	.word	0x08009893
 8007828:	07f1      	lsls	r1, r6, #31
 800782a:	d508      	bpl.n	800783e <_dtoa_r+0x34e>
 800782c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	f7f8 fe94 	bl	8000560 <__aeabi_dmul>
 8007838:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800783c:	3501      	adds	r5, #1
 800783e:	1076      	asrs	r6, r6, #1
 8007840:	3708      	adds	r7, #8
 8007842:	2e00      	cmp	r6, #0
 8007844:	d1f0      	bne.n	8007828 <_dtoa_r+0x338>
 8007846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800784a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800784e:	f7f8 ffb1 	bl	80007b4 <__aeabi_ddiv>
 8007852:	e9cd 0100 	strd	r0, r1, [sp]
 8007856:	e01a      	b.n	800788e <_dtoa_r+0x39e>
 8007858:	2502      	movs	r5, #2
 800785a:	e7a3      	b.n	80077a4 <_dtoa_r+0x2b4>
 800785c:	f000 80a0 	beq.w	80079a0 <_dtoa_r+0x4b0>
 8007860:	f1ca 0600 	rsb	r6, sl, #0
 8007864:	4b9f      	ldr	r3, [pc, #636]	; (8007ae4 <_dtoa_r+0x5f4>)
 8007866:	4fa0      	ldr	r7, [pc, #640]	; (8007ae8 <_dtoa_r+0x5f8>)
 8007868:	f006 020f 	and.w	r2, r6, #15
 800786c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007878:	f7f8 fe72 	bl	8000560 <__aeabi_dmul>
 800787c:	e9cd 0100 	strd	r0, r1, [sp]
 8007880:	1136      	asrs	r6, r6, #4
 8007882:	2300      	movs	r3, #0
 8007884:	2502      	movs	r5, #2
 8007886:	2e00      	cmp	r6, #0
 8007888:	d17f      	bne.n	800798a <_dtoa_r+0x49a>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e1      	bne.n	8007852 <_dtoa_r+0x362>
 800788e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8087 	beq.w	80079a4 <_dtoa_r+0x4b4>
 8007896:	e9dd 6700 	ldrd	r6, r7, [sp]
 800789a:	2200      	movs	r2, #0
 800789c:	4b93      	ldr	r3, [pc, #588]	; (8007aec <_dtoa_r+0x5fc>)
 800789e:	4630      	mov	r0, r6
 80078a0:	4639      	mov	r1, r7
 80078a2:	f7f9 f8cf 	bl	8000a44 <__aeabi_dcmplt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d07c      	beq.n	80079a4 <_dtoa_r+0x4b4>
 80078aa:	f1b9 0f00 	cmp.w	r9, #0
 80078ae:	d079      	beq.n	80079a4 <_dtoa_r+0x4b4>
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dd35      	ble.n	8007922 <_dtoa_r+0x432>
 80078b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	4639      	mov	r1, r7
 80078be:	2200      	movs	r2, #0
 80078c0:	4b8b      	ldr	r3, [pc, #556]	; (8007af0 <_dtoa_r+0x600>)
 80078c2:	4630      	mov	r0, r6
 80078c4:	f7f8 fe4c 	bl	8000560 <__aeabi_dmul>
 80078c8:	e9cd 0100 	strd	r0, r1, [sp]
 80078cc:	9f02      	ldr	r7, [sp, #8]
 80078ce:	3501      	adds	r5, #1
 80078d0:	4628      	mov	r0, r5
 80078d2:	f7f8 fddb 	bl	800048c <__aeabi_i2d>
 80078d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078da:	f7f8 fe41 	bl	8000560 <__aeabi_dmul>
 80078de:	2200      	movs	r2, #0
 80078e0:	4b84      	ldr	r3, [pc, #528]	; (8007af4 <_dtoa_r+0x604>)
 80078e2:	f7f8 fc87 	bl	80001f4 <__adddf3>
 80078e6:	4605      	mov	r5, r0
 80078e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078ec:	2f00      	cmp	r7, #0
 80078ee:	d15d      	bne.n	80079ac <_dtoa_r+0x4bc>
 80078f0:	2200      	movs	r2, #0
 80078f2:	4b81      	ldr	r3, [pc, #516]	; (8007af8 <_dtoa_r+0x608>)
 80078f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f8:	f7f8 fc7a 	bl	80001f0 <__aeabi_dsub>
 80078fc:	462a      	mov	r2, r5
 80078fe:	4633      	mov	r3, r6
 8007900:	e9cd 0100 	strd	r0, r1, [sp]
 8007904:	f7f9 f8bc 	bl	8000a80 <__aeabi_dcmpgt>
 8007908:	2800      	cmp	r0, #0
 800790a:	f040 8288 	bne.w	8007e1e <_dtoa_r+0x92e>
 800790e:	462a      	mov	r2, r5
 8007910:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007918:	f7f9 f894 	bl	8000a44 <__aeabi_dcmplt>
 800791c:	2800      	cmp	r0, #0
 800791e:	f040 827c 	bne.w	8007e1a <_dtoa_r+0x92a>
 8007922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007926:	e9cd 2300 	strd	r2, r3, [sp]
 800792a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800792c:	2b00      	cmp	r3, #0
 800792e:	f2c0 8150 	blt.w	8007bd2 <_dtoa_r+0x6e2>
 8007932:	f1ba 0f0e 	cmp.w	sl, #14
 8007936:	f300 814c 	bgt.w	8007bd2 <_dtoa_r+0x6e2>
 800793a:	4b6a      	ldr	r3, [pc, #424]	; (8007ae4 <_dtoa_r+0x5f4>)
 800793c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007940:	ed93 7b00 	vldr	d7, [r3]
 8007944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007946:	2b00      	cmp	r3, #0
 8007948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800794c:	f280 80d8 	bge.w	8007b00 <_dtoa_r+0x610>
 8007950:	f1b9 0f00 	cmp.w	r9, #0
 8007954:	f300 80d4 	bgt.w	8007b00 <_dtoa_r+0x610>
 8007958:	f040 825e 	bne.w	8007e18 <_dtoa_r+0x928>
 800795c:	2200      	movs	r2, #0
 800795e:	4b66      	ldr	r3, [pc, #408]	; (8007af8 <_dtoa_r+0x608>)
 8007960:	ec51 0b17 	vmov	r0, r1, d7
 8007964:	f7f8 fdfc 	bl	8000560 <__aeabi_dmul>
 8007968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796c:	f7f9 f87e 	bl	8000a6c <__aeabi_dcmpge>
 8007970:	464f      	mov	r7, r9
 8007972:	464e      	mov	r6, r9
 8007974:	2800      	cmp	r0, #0
 8007976:	f040 8234 	bne.w	8007de2 <_dtoa_r+0x8f2>
 800797a:	2331      	movs	r3, #49	; 0x31
 800797c:	f10b 0501 	add.w	r5, fp, #1
 8007980:	f88b 3000 	strb.w	r3, [fp]
 8007984:	f10a 0a01 	add.w	sl, sl, #1
 8007988:	e22f      	b.n	8007dea <_dtoa_r+0x8fa>
 800798a:	07f2      	lsls	r2, r6, #31
 800798c:	d505      	bpl.n	800799a <_dtoa_r+0x4aa>
 800798e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007992:	f7f8 fde5 	bl	8000560 <__aeabi_dmul>
 8007996:	3501      	adds	r5, #1
 8007998:	2301      	movs	r3, #1
 800799a:	1076      	asrs	r6, r6, #1
 800799c:	3708      	adds	r7, #8
 800799e:	e772      	b.n	8007886 <_dtoa_r+0x396>
 80079a0:	2502      	movs	r5, #2
 80079a2:	e774      	b.n	800788e <_dtoa_r+0x39e>
 80079a4:	f8cd a020 	str.w	sl, [sp, #32]
 80079a8:	464f      	mov	r7, r9
 80079aa:	e791      	b.n	80078d0 <_dtoa_r+0x3e0>
 80079ac:	4b4d      	ldr	r3, [pc, #308]	; (8007ae4 <_dtoa_r+0x5f4>)
 80079ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80079b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d047      	beq.n	8007a4c <_dtoa_r+0x55c>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	2000      	movs	r0, #0
 80079c2:	494e      	ldr	r1, [pc, #312]	; (8007afc <_dtoa_r+0x60c>)
 80079c4:	f7f8 fef6 	bl	80007b4 <__aeabi_ddiv>
 80079c8:	462a      	mov	r2, r5
 80079ca:	4633      	mov	r3, r6
 80079cc:	f7f8 fc10 	bl	80001f0 <__aeabi_dsub>
 80079d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80079d4:	465d      	mov	r5, fp
 80079d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079da:	f7f9 f871 	bl	8000ac0 <__aeabi_d2iz>
 80079de:	4606      	mov	r6, r0
 80079e0:	f7f8 fd54 	bl	800048c <__aeabi_i2d>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ec:	f7f8 fc00 	bl	80001f0 <__aeabi_dsub>
 80079f0:	3630      	adds	r6, #48	; 0x30
 80079f2:	f805 6b01 	strb.w	r6, [r5], #1
 80079f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079fa:	e9cd 0100 	strd	r0, r1, [sp]
 80079fe:	f7f9 f821 	bl	8000a44 <__aeabi_dcmplt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d163      	bne.n	8007ace <_dtoa_r+0x5de>
 8007a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	4937      	ldr	r1, [pc, #220]	; (8007aec <_dtoa_r+0x5fc>)
 8007a0e:	f7f8 fbef 	bl	80001f0 <__aeabi_dsub>
 8007a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a16:	f7f9 f815 	bl	8000a44 <__aeabi_dcmplt>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f040 80b7 	bne.w	8007b8e <_dtoa_r+0x69e>
 8007a20:	eba5 030b 	sub.w	r3, r5, fp
 8007a24:	429f      	cmp	r7, r3
 8007a26:	f77f af7c 	ble.w	8007922 <_dtoa_r+0x432>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4b30      	ldr	r3, [pc, #192]	; (8007af0 <_dtoa_r+0x600>)
 8007a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a32:	f7f8 fd95 	bl	8000560 <__aeabi_dmul>
 8007a36:	2200      	movs	r2, #0
 8007a38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a3c:	4b2c      	ldr	r3, [pc, #176]	; (8007af0 <_dtoa_r+0x600>)
 8007a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a42:	f7f8 fd8d 	bl	8000560 <__aeabi_dmul>
 8007a46:	e9cd 0100 	strd	r0, r1, [sp]
 8007a4a:	e7c4      	b.n	80079d6 <_dtoa_r+0x4e6>
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	4633      	mov	r3, r6
 8007a50:	f7f8 fd86 	bl	8000560 <__aeabi_dmul>
 8007a54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a58:	eb0b 0507 	add.w	r5, fp, r7
 8007a5c:	465e      	mov	r6, fp
 8007a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a62:	f7f9 f82d 	bl	8000ac0 <__aeabi_d2iz>
 8007a66:	4607      	mov	r7, r0
 8007a68:	f7f8 fd10 	bl	800048c <__aeabi_i2d>
 8007a6c:	3730      	adds	r7, #48	; 0x30
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a76:	f7f8 fbbb 	bl	80001f0 <__aeabi_dsub>
 8007a7a:	f806 7b01 	strb.w	r7, [r6], #1
 8007a7e:	42ae      	cmp	r6, r5
 8007a80:	e9cd 0100 	strd	r0, r1, [sp]
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	d126      	bne.n	8007ad8 <_dtoa_r+0x5e8>
 8007a8a:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <_dtoa_r+0x60c>)
 8007a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a90:	f7f8 fbb0 	bl	80001f4 <__adddf3>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a9c:	f7f8 fff0 	bl	8000a80 <__aeabi_dcmpgt>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d174      	bne.n	8007b8e <_dtoa_r+0x69e>
 8007aa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4914      	ldr	r1, [pc, #80]	; (8007afc <_dtoa_r+0x60c>)
 8007aac:	f7f8 fba0 	bl	80001f0 <__aeabi_dsub>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ab8:	f7f8 ffc4 	bl	8000a44 <__aeabi_dcmplt>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f43f af30 	beq.w	8007922 <_dtoa_r+0x432>
 8007ac2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ac6:	2b30      	cmp	r3, #48	; 0x30
 8007ac8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007acc:	d002      	beq.n	8007ad4 <_dtoa_r+0x5e4>
 8007ace:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ad2:	e04a      	b.n	8007b6a <_dtoa_r+0x67a>
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	e7f4      	b.n	8007ac2 <_dtoa_r+0x5d2>
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <_dtoa_r+0x600>)
 8007ada:	f7f8 fd41 	bl	8000560 <__aeabi_dmul>
 8007ade:	e9cd 0100 	strd	r0, r1, [sp]
 8007ae2:	e7bc      	b.n	8007a5e <_dtoa_r+0x56e>
 8007ae4:	080098c0 	.word	0x080098c0
 8007ae8:	08009898 	.word	0x08009898
 8007aec:	3ff00000 	.word	0x3ff00000
 8007af0:	40240000 	.word	0x40240000
 8007af4:	401c0000 	.word	0x401c0000
 8007af8:	40140000 	.word	0x40140000
 8007afc:	3fe00000 	.word	0x3fe00000
 8007b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b04:	465d      	mov	r5, fp
 8007b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	f7f8 fe51 	bl	80007b4 <__aeabi_ddiv>
 8007b12:	f7f8 ffd5 	bl	8000ac0 <__aeabi_d2iz>
 8007b16:	4680      	mov	r8, r0
 8007b18:	f7f8 fcb8 	bl	800048c <__aeabi_i2d>
 8007b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b20:	f7f8 fd1e 	bl	8000560 <__aeabi_dmul>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007b30:	f7f8 fb5e 	bl	80001f0 <__aeabi_dsub>
 8007b34:	f805 6b01 	strb.w	r6, [r5], #1
 8007b38:	eba5 060b 	sub.w	r6, r5, fp
 8007b3c:	45b1      	cmp	r9, r6
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	d139      	bne.n	8007bb8 <_dtoa_r+0x6c8>
 8007b44:	f7f8 fb56 	bl	80001f4 <__adddf3>
 8007b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	460f      	mov	r7, r1
 8007b50:	f7f8 ff96 	bl	8000a80 <__aeabi_dcmpgt>
 8007b54:	b9c8      	cbnz	r0, 8007b8a <_dtoa_r+0x69a>
 8007b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7f8 ff67 	bl	8000a30 <__aeabi_dcmpeq>
 8007b62:	b110      	cbz	r0, 8007b6a <_dtoa_r+0x67a>
 8007b64:	f018 0f01 	tst.w	r8, #1
 8007b68:	d10f      	bne.n	8007b8a <_dtoa_r+0x69a>
 8007b6a:	9904      	ldr	r1, [sp, #16]
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 facc 	bl	800810a <_Bfree>
 8007b72:	2300      	movs	r3, #0
 8007b74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b76:	702b      	strb	r3, [r5, #0]
 8007b78:	f10a 0301 	add.w	r3, sl, #1
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8241 	beq.w	8008008 <_dtoa_r+0xb18>
 8007b86:	601d      	str	r5, [r3, #0]
 8007b88:	e23e      	b.n	8008008 <_dtoa_r+0xb18>
 8007b8a:	f8cd a020 	str.w	sl, [sp, #32]
 8007b8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b92:	2a39      	cmp	r2, #57	; 0x39
 8007b94:	f105 33ff 	add.w	r3, r5, #4294967295
 8007b98:	d108      	bne.n	8007bac <_dtoa_r+0x6bc>
 8007b9a:	459b      	cmp	fp, r3
 8007b9c:	d10a      	bne.n	8007bb4 <_dtoa_r+0x6c4>
 8007b9e:	9b08      	ldr	r3, [sp, #32]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	9308      	str	r3, [sp, #32]
 8007ba4:	2330      	movs	r3, #48	; 0x30
 8007ba6:	f88b 3000 	strb.w	r3, [fp]
 8007baa:	465b      	mov	r3, fp
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	3201      	adds	r2, #1
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	e78c      	b.n	8007ace <_dtoa_r+0x5de>
 8007bb4:	461d      	mov	r5, r3
 8007bb6:	e7ea      	b.n	8007b8e <_dtoa_r+0x69e>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4b9b      	ldr	r3, [pc, #620]	; (8007e28 <_dtoa_r+0x938>)
 8007bbc:	f7f8 fcd0 	bl	8000560 <__aeabi_dmul>
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	f7f8 ff32 	bl	8000a30 <__aeabi_dcmpeq>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d09a      	beq.n	8007b06 <_dtoa_r+0x616>
 8007bd0:	e7cb      	b.n	8007b6a <_dtoa_r+0x67a>
 8007bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	f000 808b 	beq.w	8007cf0 <_dtoa_r+0x800>
 8007bda:	9a06      	ldr	r2, [sp, #24]
 8007bdc:	2a01      	cmp	r2, #1
 8007bde:	dc6e      	bgt.n	8007cbe <_dtoa_r+0x7ce>
 8007be0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	d067      	beq.n	8007cb6 <_dtoa_r+0x7c6>
 8007be6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bea:	9f07      	ldr	r7, [sp, #28]
 8007bec:	9d05      	ldr	r5, [sp, #20]
 8007bee:	9a05      	ldr	r2, [sp, #20]
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	441a      	add	r2, r3
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	9205      	str	r2, [sp, #20]
 8007bf8:	4498      	add	r8, r3
 8007bfa:	f000 fb26 	bl	800824a <__i2b>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	dd0c      	ble.n	8007c1e <_dtoa_r+0x72e>
 8007c04:	f1b8 0f00 	cmp.w	r8, #0
 8007c08:	dd09      	ble.n	8007c1e <_dtoa_r+0x72e>
 8007c0a:	4545      	cmp	r5, r8
 8007c0c:	9a05      	ldr	r2, [sp, #20]
 8007c0e:	462b      	mov	r3, r5
 8007c10:	bfa8      	it	ge
 8007c12:	4643      	movge	r3, r8
 8007c14:	1ad2      	subs	r2, r2, r3
 8007c16:	9205      	str	r2, [sp, #20]
 8007c18:	1aed      	subs	r5, r5, r3
 8007c1a:	eba8 0803 	sub.w	r8, r8, r3
 8007c1e:	9b07      	ldr	r3, [sp, #28]
 8007c20:	b1eb      	cbz	r3, 8007c5e <_dtoa_r+0x76e>
 8007c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d067      	beq.n	8007cf8 <_dtoa_r+0x808>
 8007c28:	b18f      	cbz	r7, 8007c4e <_dtoa_r+0x75e>
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	463a      	mov	r2, r7
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fbaa 	bl	8008388 <__pow5mult>
 8007c34:	9a04      	ldr	r2, [sp, #16]
 8007c36:	4601      	mov	r1, r0
 8007c38:	4606      	mov	r6, r0
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fb0e 	bl	800825c <__multiply>
 8007c40:	9904      	ldr	r1, [sp, #16]
 8007c42:	9008      	str	r0, [sp, #32]
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 fa60 	bl	800810a <_Bfree>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	9b07      	ldr	r3, [sp, #28]
 8007c50:	1bda      	subs	r2, r3, r7
 8007c52:	d004      	beq.n	8007c5e <_dtoa_r+0x76e>
 8007c54:	9904      	ldr	r1, [sp, #16]
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 fb96 	bl	8008388 <__pow5mult>
 8007c5c:	9004      	str	r0, [sp, #16]
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 faf2 	bl	800824a <__i2b>
 8007c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c68:	4607      	mov	r7, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 81d0 	beq.w	8008010 <_dtoa_r+0xb20>
 8007c70:	461a      	mov	r2, r3
 8007c72:	4601      	mov	r1, r0
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 fb87 	bl	8008388 <__pow5mult>
 8007c7a:	9b06      	ldr	r3, [sp, #24]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	4607      	mov	r7, r0
 8007c80:	dc40      	bgt.n	8007d04 <_dtoa_r+0x814>
 8007c82:	9b00      	ldr	r3, [sp, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d139      	bne.n	8007cfc <_dtoa_r+0x80c>
 8007c88:	9b01      	ldr	r3, [sp, #4]
 8007c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d136      	bne.n	8007d00 <_dtoa_r+0x810>
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	0d1b      	lsrs	r3, r3, #20
 8007c9a:	051b      	lsls	r3, r3, #20
 8007c9c:	b12b      	cbz	r3, 8007caa <_dtoa_r+0x7ba>
 8007c9e:	9b05      	ldr	r3, [sp, #20]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	f108 0801 	add.w	r8, r8, #1
 8007ca8:	2301      	movs	r3, #1
 8007caa:	9307      	str	r3, [sp, #28]
 8007cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d12a      	bne.n	8007d08 <_dtoa_r+0x818>
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	e030      	b.n	8007d18 <_dtoa_r+0x828>
 8007cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cbc:	e795      	b.n	8007bea <_dtoa_r+0x6fa>
 8007cbe:	9b07      	ldr	r3, [sp, #28]
 8007cc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8007cc4:	42bb      	cmp	r3, r7
 8007cc6:	bfbf      	itttt	lt
 8007cc8:	9b07      	ldrlt	r3, [sp, #28]
 8007cca:	9707      	strlt	r7, [sp, #28]
 8007ccc:	1afa      	sublt	r2, r7, r3
 8007cce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007cd0:	bfbb      	ittet	lt
 8007cd2:	189b      	addlt	r3, r3, r2
 8007cd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cd6:	1bdf      	subge	r7, r3, r7
 8007cd8:	2700      	movlt	r7, #0
 8007cda:	f1b9 0f00 	cmp.w	r9, #0
 8007cde:	bfb5      	itete	lt
 8007ce0:	9b05      	ldrlt	r3, [sp, #20]
 8007ce2:	9d05      	ldrge	r5, [sp, #20]
 8007ce4:	eba3 0509 	sublt.w	r5, r3, r9
 8007ce8:	464b      	movge	r3, r9
 8007cea:	bfb8      	it	lt
 8007cec:	2300      	movlt	r3, #0
 8007cee:	e77e      	b.n	8007bee <_dtoa_r+0x6fe>
 8007cf0:	9f07      	ldr	r7, [sp, #28]
 8007cf2:	9d05      	ldr	r5, [sp, #20]
 8007cf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007cf6:	e783      	b.n	8007c00 <_dtoa_r+0x710>
 8007cf8:	9a07      	ldr	r2, [sp, #28]
 8007cfa:	e7ab      	b.n	8007c54 <_dtoa_r+0x764>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e7d4      	b.n	8007caa <_dtoa_r+0x7ba>
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	e7d2      	b.n	8007caa <_dtoa_r+0x7ba>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007d0e:	6918      	ldr	r0, [r3, #16]
 8007d10:	f000 fa4d 	bl	80081ae <__hi0bits>
 8007d14:	f1c0 0020 	rsb	r0, r0, #32
 8007d18:	4440      	add	r0, r8
 8007d1a:	f010 001f 	ands.w	r0, r0, #31
 8007d1e:	d047      	beq.n	8007db0 <_dtoa_r+0x8c0>
 8007d20:	f1c0 0320 	rsb	r3, r0, #32
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	dd3b      	ble.n	8007da0 <_dtoa_r+0x8b0>
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	f1c0 001c 	rsb	r0, r0, #28
 8007d2e:	4403      	add	r3, r0
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	4405      	add	r5, r0
 8007d34:	4480      	add	r8, r0
 8007d36:	9b05      	ldr	r3, [sp, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dd05      	ble.n	8007d48 <_dtoa_r+0x858>
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	9904      	ldr	r1, [sp, #16]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fb6f 	bl	8008424 <__lshift>
 8007d46:	9004      	str	r0, [sp, #16]
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	dd05      	ble.n	8007d5a <_dtoa_r+0x86a>
 8007d4e:	4639      	mov	r1, r7
 8007d50:	4642      	mov	r2, r8
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fb66 	bl	8008424 <__lshift>
 8007d58:	4607      	mov	r7, r0
 8007d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d5c:	b353      	cbz	r3, 8007db4 <_dtoa_r+0x8c4>
 8007d5e:	4639      	mov	r1, r7
 8007d60:	9804      	ldr	r0, [sp, #16]
 8007d62:	f000 fbb3 	bl	80084cc <__mcmp>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	da24      	bge.n	8007db4 <_dtoa_r+0x8c4>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	9904      	ldr	r1, [sp, #16]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 f9e1 	bl	8008138 <__multadd>
 8007d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d78:	9004      	str	r0, [sp, #16]
 8007d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 814d 	beq.w	800801e <_dtoa_r+0xb2e>
 8007d84:	2300      	movs	r3, #0
 8007d86:	4631      	mov	r1, r6
 8007d88:	220a      	movs	r2, #10
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f9d4 	bl	8008138 <__multadd>
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	4606      	mov	r6, r0
 8007d96:	dc4f      	bgt.n	8007e38 <_dtoa_r+0x948>
 8007d98:	9b06      	ldr	r3, [sp, #24]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	dd4c      	ble.n	8007e38 <_dtoa_r+0x948>
 8007d9e:	e011      	b.n	8007dc4 <_dtoa_r+0x8d4>
 8007da0:	d0c9      	beq.n	8007d36 <_dtoa_r+0x846>
 8007da2:	9a05      	ldr	r2, [sp, #20]
 8007da4:	331c      	adds	r3, #28
 8007da6:	441a      	add	r2, r3
 8007da8:	9205      	str	r2, [sp, #20]
 8007daa:	441d      	add	r5, r3
 8007dac:	4498      	add	r8, r3
 8007dae:	e7c2      	b.n	8007d36 <_dtoa_r+0x846>
 8007db0:	4603      	mov	r3, r0
 8007db2:	e7f6      	b.n	8007da2 <_dtoa_r+0x8b2>
 8007db4:	f1b9 0f00 	cmp.w	r9, #0
 8007db8:	dc38      	bgt.n	8007e2c <_dtoa_r+0x93c>
 8007dba:	9b06      	ldr	r3, [sp, #24]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	dd35      	ble.n	8007e2c <_dtoa_r+0x93c>
 8007dc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007dc4:	9b02      	ldr	r3, [sp, #8]
 8007dc6:	b963      	cbnz	r3, 8007de2 <_dtoa_r+0x8f2>
 8007dc8:	4639      	mov	r1, r7
 8007dca:	2205      	movs	r2, #5
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f9b3 	bl	8008138 <__multadd>
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	9804      	ldr	r0, [sp, #16]
 8007dd8:	f000 fb78 	bl	80084cc <__mcmp>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f73f adcc 	bgt.w	800797a <_dtoa_r+0x48a>
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	465d      	mov	r5, fp
 8007de6:	ea6f 0a03 	mvn.w	sl, r3
 8007dea:	f04f 0900 	mov.w	r9, #0
 8007dee:	4639      	mov	r1, r7
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f98a 	bl	800810a <_Bfree>
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	f43f aeb7 	beq.w	8007b6a <_dtoa_r+0x67a>
 8007dfc:	f1b9 0f00 	cmp.w	r9, #0
 8007e00:	d005      	beq.n	8007e0e <_dtoa_r+0x91e>
 8007e02:	45b1      	cmp	r9, r6
 8007e04:	d003      	beq.n	8007e0e <_dtoa_r+0x91e>
 8007e06:	4649      	mov	r1, r9
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 f97e 	bl	800810a <_Bfree>
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 f97a 	bl	800810a <_Bfree>
 8007e16:	e6a8      	b.n	8007b6a <_dtoa_r+0x67a>
 8007e18:	2700      	movs	r7, #0
 8007e1a:	463e      	mov	r6, r7
 8007e1c:	e7e1      	b.n	8007de2 <_dtoa_r+0x8f2>
 8007e1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e22:	463e      	mov	r6, r7
 8007e24:	e5a9      	b.n	800797a <_dtoa_r+0x48a>
 8007e26:	bf00      	nop
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80fa 	beq.w	800802c <_dtoa_r+0xb3c>
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	dd05      	ble.n	8007e48 <_dtoa_r+0x958>
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	462a      	mov	r2, r5
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 faef 	bl	8008424 <__lshift>
 8007e46:	4606      	mov	r6, r0
 8007e48:	9b07      	ldr	r3, [sp, #28]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d04c      	beq.n	8007ee8 <_dtoa_r+0x9f8>
 8007e4e:	6871      	ldr	r1, [r6, #4]
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 f926 	bl	80080a2 <_Balloc>
 8007e56:	6932      	ldr	r2, [r6, #16]
 8007e58:	3202      	adds	r2, #2
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	0092      	lsls	r2, r2, #2
 8007e5e:	f106 010c 	add.w	r1, r6, #12
 8007e62:	300c      	adds	r0, #12
 8007e64:	f000 f912 	bl	800808c <memcpy>
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 fad9 	bl	8008424 <__lshift>
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	f8cd b014 	str.w	fp, [sp, #20]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	46b1      	mov	r9, r6
 8007e7e:	9307      	str	r3, [sp, #28]
 8007e80:	4606      	mov	r6, r0
 8007e82:	4639      	mov	r1, r7
 8007e84:	9804      	ldr	r0, [sp, #16]
 8007e86:	f7ff faa4 	bl	80073d2 <quorem>
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e92:	9804      	ldr	r0, [sp, #16]
 8007e94:	f000 fb1a 	bl	80084cc <__mcmp>
 8007e98:	4632      	mov	r2, r6
 8007e9a:	9000      	str	r0, [sp, #0]
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fb2e 	bl	8008500 <__mdiff>
 8007ea4:	68c3      	ldr	r3, [r0, #12]
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	bb03      	cbnz	r3, 8007eec <_dtoa_r+0x9fc>
 8007eaa:	4601      	mov	r1, r0
 8007eac:	9008      	str	r0, [sp, #32]
 8007eae:	9804      	ldr	r0, [sp, #16]
 8007eb0:	f000 fb0c 	bl	80084cc <__mcmp>
 8007eb4:	9a08      	ldr	r2, [sp, #32]
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4620      	mov	r0, r4
 8007ebc:	9308      	str	r3, [sp, #32]
 8007ebe:	f000 f924 	bl	800810a <_Bfree>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	b9a3      	cbnz	r3, 8007ef0 <_dtoa_r+0xa00>
 8007ec6:	9a06      	ldr	r2, [sp, #24]
 8007ec8:	b992      	cbnz	r2, 8007ef0 <_dtoa_r+0xa00>
 8007eca:	9a07      	ldr	r2, [sp, #28]
 8007ecc:	b982      	cbnz	r2, 8007ef0 <_dtoa_r+0xa00>
 8007ece:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ed2:	d029      	beq.n	8007f28 <_dtoa_r+0xa38>
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd01      	ble.n	8007ede <_dtoa_r+0x9ee>
 8007eda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	1c5d      	adds	r5, r3, #1
 8007ee2:	f883 8000 	strb.w	r8, [r3]
 8007ee6:	e782      	b.n	8007dee <_dtoa_r+0x8fe>
 8007ee8:	4630      	mov	r0, r6
 8007eea:	e7c2      	b.n	8007e72 <_dtoa_r+0x982>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e7e3      	b.n	8007eb8 <_dtoa_r+0x9c8>
 8007ef0:	9a00      	ldr	r2, [sp, #0]
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	db04      	blt.n	8007f00 <_dtoa_r+0xa10>
 8007ef6:	d125      	bne.n	8007f44 <_dtoa_r+0xa54>
 8007ef8:	9a06      	ldr	r2, [sp, #24]
 8007efa:	bb1a      	cbnz	r2, 8007f44 <_dtoa_r+0xa54>
 8007efc:	9a07      	ldr	r2, [sp, #28]
 8007efe:	bb0a      	cbnz	r2, 8007f44 <_dtoa_r+0xa54>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	ddec      	ble.n	8007ede <_dtoa_r+0x9ee>
 8007f04:	2201      	movs	r2, #1
 8007f06:	9904      	ldr	r1, [sp, #16]
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fa8b 	bl	8008424 <__lshift>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	9004      	str	r0, [sp, #16]
 8007f12:	f000 fadb 	bl	80084cc <__mcmp>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	dc03      	bgt.n	8007f22 <_dtoa_r+0xa32>
 8007f1a:	d1e0      	bne.n	8007ede <_dtoa_r+0x9ee>
 8007f1c:	f018 0f01 	tst.w	r8, #1
 8007f20:	d0dd      	beq.n	8007ede <_dtoa_r+0x9ee>
 8007f22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f26:	d1d8      	bne.n	8007eda <_dtoa_r+0x9ea>
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	9a05      	ldr	r2, [sp, #20]
 8007f2c:	1c5d      	adds	r5, r3, #1
 8007f2e:	2339      	movs	r3, #57	; 0x39
 8007f30:	7013      	strb	r3, [r2, #0]
 8007f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f36:	2b39      	cmp	r3, #57	; 0x39
 8007f38:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f3c:	d04f      	beq.n	8007fde <_dtoa_r+0xaee>
 8007f3e:	3301      	adds	r3, #1
 8007f40:	7013      	strb	r3, [r2, #0]
 8007f42:	e754      	b.n	8007dee <_dtoa_r+0x8fe>
 8007f44:	9a05      	ldr	r2, [sp, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f102 0501 	add.w	r5, r2, #1
 8007f4c:	dd06      	ble.n	8007f5c <_dtoa_r+0xa6c>
 8007f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f52:	d0e9      	beq.n	8007f28 <_dtoa_r+0xa38>
 8007f54:	f108 0801 	add.w	r8, r8, #1
 8007f58:	9b05      	ldr	r3, [sp, #20]
 8007f5a:	e7c2      	b.n	8007ee2 <_dtoa_r+0x9f2>
 8007f5c:	9a02      	ldr	r2, [sp, #8]
 8007f5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f62:	eba5 030b 	sub.w	r3, r5, fp
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d021      	beq.n	8007fae <_dtoa_r+0xabe>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	9904      	ldr	r1, [sp, #16]
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 f8e1 	bl	8008138 <__multadd>
 8007f76:	45b1      	cmp	r9, r6
 8007f78:	9004      	str	r0, [sp, #16]
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	f04f 020a 	mov.w	r2, #10
 8007f82:	4649      	mov	r1, r9
 8007f84:	4620      	mov	r0, r4
 8007f86:	d105      	bne.n	8007f94 <_dtoa_r+0xaa4>
 8007f88:	f000 f8d6 	bl	8008138 <__multadd>
 8007f8c:	4681      	mov	r9, r0
 8007f8e:	4606      	mov	r6, r0
 8007f90:	9505      	str	r5, [sp, #20]
 8007f92:	e776      	b.n	8007e82 <_dtoa_r+0x992>
 8007f94:	f000 f8d0 	bl	8008138 <__multadd>
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4681      	mov	r9, r0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f8c9 	bl	8008138 <__multadd>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	e7f2      	b.n	8007f90 <_dtoa_r+0xaa0>
 8007faa:	f04f 0900 	mov.w	r9, #0
 8007fae:	2201      	movs	r2, #1
 8007fb0:	9904      	ldr	r1, [sp, #16]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fa36 	bl	8008424 <__lshift>
 8007fb8:	4639      	mov	r1, r7
 8007fba:	9004      	str	r0, [sp, #16]
 8007fbc:	f000 fa86 	bl	80084cc <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	dcb6      	bgt.n	8007f32 <_dtoa_r+0xa42>
 8007fc4:	d102      	bne.n	8007fcc <_dtoa_r+0xadc>
 8007fc6:	f018 0f01 	tst.w	r8, #1
 8007fca:	d1b2      	bne.n	8007f32 <_dtoa_r+0xa42>
 8007fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fd0:	2b30      	cmp	r3, #48	; 0x30
 8007fd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fd6:	f47f af0a 	bne.w	8007dee <_dtoa_r+0x8fe>
 8007fda:	4615      	mov	r5, r2
 8007fdc:	e7f6      	b.n	8007fcc <_dtoa_r+0xadc>
 8007fde:	4593      	cmp	fp, r2
 8007fe0:	d105      	bne.n	8007fee <_dtoa_r+0xafe>
 8007fe2:	2331      	movs	r3, #49	; 0x31
 8007fe4:	f10a 0a01 	add.w	sl, sl, #1
 8007fe8:	f88b 3000 	strb.w	r3, [fp]
 8007fec:	e6ff      	b.n	8007dee <_dtoa_r+0x8fe>
 8007fee:	4615      	mov	r5, r2
 8007ff0:	e79f      	b.n	8007f32 <_dtoa_r+0xa42>
 8007ff2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008058 <_dtoa_r+0xb68>
 8007ff6:	e007      	b.n	8008008 <_dtoa_r+0xb18>
 8007ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ffa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800805c <_dtoa_r+0xb6c>
 8007ffe:	b11b      	cbz	r3, 8008008 <_dtoa_r+0xb18>
 8008000:	f10b 0308 	add.w	r3, fp, #8
 8008004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	4658      	mov	r0, fp
 800800a:	b017      	add	sp, #92	; 0x5c
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	2b01      	cmp	r3, #1
 8008014:	f77f ae35 	ble.w	8007c82 <_dtoa_r+0x792>
 8008018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800801a:	9307      	str	r3, [sp, #28]
 800801c:	e649      	b.n	8007cb2 <_dtoa_r+0x7c2>
 800801e:	9b02      	ldr	r3, [sp, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dc03      	bgt.n	800802c <_dtoa_r+0xb3c>
 8008024:	9b06      	ldr	r3, [sp, #24]
 8008026:	2b02      	cmp	r3, #2
 8008028:	f73f aecc 	bgt.w	8007dc4 <_dtoa_r+0x8d4>
 800802c:	465d      	mov	r5, fp
 800802e:	4639      	mov	r1, r7
 8008030:	9804      	ldr	r0, [sp, #16]
 8008032:	f7ff f9ce 	bl	80073d2 <quorem>
 8008036:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800803a:	f805 8b01 	strb.w	r8, [r5], #1
 800803e:	9a02      	ldr	r2, [sp, #8]
 8008040:	eba5 030b 	sub.w	r3, r5, fp
 8008044:	429a      	cmp	r2, r3
 8008046:	ddb0      	ble.n	8007faa <_dtoa_r+0xaba>
 8008048:	2300      	movs	r3, #0
 800804a:	220a      	movs	r2, #10
 800804c:	9904      	ldr	r1, [sp, #16]
 800804e:	4620      	mov	r0, r4
 8008050:	f000 f872 	bl	8008138 <__multadd>
 8008054:	9004      	str	r0, [sp, #16]
 8008056:	e7ea      	b.n	800802e <_dtoa_r+0xb3e>
 8008058:	08009888 	.word	0x08009888
 800805c:	0800988a 	.word	0x0800988a

08008060 <_localeconv_r>:
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <_localeconv_r+0x14>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a18      	ldr	r0, [r3, #32]
 8008066:	4b04      	ldr	r3, [pc, #16]	; (8008078 <_localeconv_r+0x18>)
 8008068:	2800      	cmp	r0, #0
 800806a:	bf08      	it	eq
 800806c:	4618      	moveq	r0, r3
 800806e:	30f0      	adds	r0, #240	; 0xf0
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000074 	.word	0x20000074
 8008078:	200000d8 	.word	0x200000d8

0800807c <malloc>:
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <malloc+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f000 baf7 	b.w	8008674 <_malloc_r>
 8008086:	bf00      	nop
 8008088:	20000074 	.word	0x20000074

0800808c <memcpy>:
 800808c:	b510      	push	{r4, lr}
 800808e:	1e43      	subs	r3, r0, #1
 8008090:	440a      	add	r2, r1
 8008092:	4291      	cmp	r1, r2
 8008094:	d100      	bne.n	8008098 <memcpy+0xc>
 8008096:	bd10      	pop	{r4, pc}
 8008098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080a0:	e7f7      	b.n	8008092 <memcpy+0x6>

080080a2 <_Balloc>:
 80080a2:	b570      	push	{r4, r5, r6, lr}
 80080a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080a6:	4604      	mov	r4, r0
 80080a8:	460e      	mov	r6, r1
 80080aa:	b93d      	cbnz	r5, 80080bc <_Balloc+0x1a>
 80080ac:	2010      	movs	r0, #16
 80080ae:	f7ff ffe5 	bl	800807c <malloc>
 80080b2:	6260      	str	r0, [r4, #36]	; 0x24
 80080b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080b8:	6005      	str	r5, [r0, #0]
 80080ba:	60c5      	str	r5, [r0, #12]
 80080bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80080be:	68eb      	ldr	r3, [r5, #12]
 80080c0:	b183      	cbz	r3, 80080e4 <_Balloc+0x42>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80080ca:	b9b8      	cbnz	r0, 80080fc <_Balloc+0x5a>
 80080cc:	2101      	movs	r1, #1
 80080ce:	fa01 f506 	lsl.w	r5, r1, r6
 80080d2:	1d6a      	adds	r2, r5, #5
 80080d4:	0092      	lsls	r2, r2, #2
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 fabe 	bl	8008658 <_calloc_r>
 80080dc:	b160      	cbz	r0, 80080f8 <_Balloc+0x56>
 80080de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80080e2:	e00e      	b.n	8008102 <_Balloc+0x60>
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	2104      	movs	r1, #4
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 fab5 	bl	8008658 <_calloc_r>
 80080ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f0:	60e8      	str	r0, [r5, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <_Balloc+0x20>
 80080f8:	2000      	movs	r0, #0
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	6802      	ldr	r2, [r0, #0]
 80080fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008102:	2300      	movs	r3, #0
 8008104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008108:	e7f7      	b.n	80080fa <_Balloc+0x58>

0800810a <_Bfree>:
 800810a:	b570      	push	{r4, r5, r6, lr}
 800810c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800810e:	4606      	mov	r6, r0
 8008110:	460d      	mov	r5, r1
 8008112:	b93c      	cbnz	r4, 8008124 <_Bfree+0x1a>
 8008114:	2010      	movs	r0, #16
 8008116:	f7ff ffb1 	bl	800807c <malloc>
 800811a:	6270      	str	r0, [r6, #36]	; 0x24
 800811c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008120:	6004      	str	r4, [r0, #0]
 8008122:	60c4      	str	r4, [r0, #12]
 8008124:	b13d      	cbz	r5, 8008136 <_Bfree+0x2c>
 8008126:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008128:	686a      	ldr	r2, [r5, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008130:	6029      	str	r1, [r5, #0]
 8008132:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008136:	bd70      	pop	{r4, r5, r6, pc}

08008138 <__multadd>:
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	690d      	ldr	r5, [r1, #16]
 800813e:	461f      	mov	r7, r3
 8008140:	4606      	mov	r6, r0
 8008142:	460c      	mov	r4, r1
 8008144:	f101 0c14 	add.w	ip, r1, #20
 8008148:	2300      	movs	r3, #0
 800814a:	f8dc 0000 	ldr.w	r0, [ip]
 800814e:	b281      	uxth	r1, r0
 8008150:	fb02 7101 	mla	r1, r2, r1, r7
 8008154:	0c0f      	lsrs	r7, r1, #16
 8008156:	0c00      	lsrs	r0, r0, #16
 8008158:	fb02 7000 	mla	r0, r2, r0, r7
 800815c:	b289      	uxth	r1, r1
 800815e:	3301      	adds	r3, #1
 8008160:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008164:	429d      	cmp	r5, r3
 8008166:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800816a:	f84c 1b04 	str.w	r1, [ip], #4
 800816e:	dcec      	bgt.n	800814a <__multadd+0x12>
 8008170:	b1d7      	cbz	r7, 80081a8 <__multadd+0x70>
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	42ab      	cmp	r3, r5
 8008176:	dc12      	bgt.n	800819e <__multadd+0x66>
 8008178:	6861      	ldr	r1, [r4, #4]
 800817a:	4630      	mov	r0, r6
 800817c:	3101      	adds	r1, #1
 800817e:	f7ff ff90 	bl	80080a2 <_Balloc>
 8008182:	6922      	ldr	r2, [r4, #16]
 8008184:	3202      	adds	r2, #2
 8008186:	f104 010c 	add.w	r1, r4, #12
 800818a:	4680      	mov	r8, r0
 800818c:	0092      	lsls	r2, r2, #2
 800818e:	300c      	adds	r0, #12
 8008190:	f7ff ff7c 	bl	800808c <memcpy>
 8008194:	4621      	mov	r1, r4
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff ffb7 	bl	800810a <_Bfree>
 800819c:	4644      	mov	r4, r8
 800819e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081a2:	3501      	adds	r5, #1
 80081a4:	615f      	str	r7, [r3, #20]
 80081a6:	6125      	str	r5, [r4, #16]
 80081a8:	4620      	mov	r0, r4
 80081aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081ae <__hi0bits>:
 80081ae:	0c02      	lsrs	r2, r0, #16
 80081b0:	0412      	lsls	r2, r2, #16
 80081b2:	4603      	mov	r3, r0
 80081b4:	b9b2      	cbnz	r2, 80081e4 <__hi0bits+0x36>
 80081b6:	0403      	lsls	r3, r0, #16
 80081b8:	2010      	movs	r0, #16
 80081ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081be:	bf04      	itt	eq
 80081c0:	021b      	lsleq	r3, r3, #8
 80081c2:	3008      	addeq	r0, #8
 80081c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081c8:	bf04      	itt	eq
 80081ca:	011b      	lsleq	r3, r3, #4
 80081cc:	3004      	addeq	r0, #4
 80081ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081d2:	bf04      	itt	eq
 80081d4:	009b      	lsleq	r3, r3, #2
 80081d6:	3002      	addeq	r0, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db06      	blt.n	80081ea <__hi0bits+0x3c>
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	d503      	bpl.n	80081e8 <__hi0bits+0x3a>
 80081e0:	3001      	adds	r0, #1
 80081e2:	4770      	bx	lr
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7e8      	b.n	80081ba <__hi0bits+0xc>
 80081e8:	2020      	movs	r0, #32
 80081ea:	4770      	bx	lr

080081ec <__lo0bits>:
 80081ec:	6803      	ldr	r3, [r0, #0]
 80081ee:	f013 0207 	ands.w	r2, r3, #7
 80081f2:	4601      	mov	r1, r0
 80081f4:	d00b      	beq.n	800820e <__lo0bits+0x22>
 80081f6:	07da      	lsls	r2, r3, #31
 80081f8:	d423      	bmi.n	8008242 <__lo0bits+0x56>
 80081fa:	0798      	lsls	r0, r3, #30
 80081fc:	bf49      	itett	mi
 80081fe:	085b      	lsrmi	r3, r3, #1
 8008200:	089b      	lsrpl	r3, r3, #2
 8008202:	2001      	movmi	r0, #1
 8008204:	600b      	strmi	r3, [r1, #0]
 8008206:	bf5c      	itt	pl
 8008208:	600b      	strpl	r3, [r1, #0]
 800820a:	2002      	movpl	r0, #2
 800820c:	4770      	bx	lr
 800820e:	b298      	uxth	r0, r3
 8008210:	b9a8      	cbnz	r0, 800823e <__lo0bits+0x52>
 8008212:	0c1b      	lsrs	r3, r3, #16
 8008214:	2010      	movs	r0, #16
 8008216:	f013 0fff 	tst.w	r3, #255	; 0xff
 800821a:	bf04      	itt	eq
 800821c:	0a1b      	lsreq	r3, r3, #8
 800821e:	3008      	addeq	r0, #8
 8008220:	071a      	lsls	r2, r3, #28
 8008222:	bf04      	itt	eq
 8008224:	091b      	lsreq	r3, r3, #4
 8008226:	3004      	addeq	r0, #4
 8008228:	079a      	lsls	r2, r3, #30
 800822a:	bf04      	itt	eq
 800822c:	089b      	lsreq	r3, r3, #2
 800822e:	3002      	addeq	r0, #2
 8008230:	07da      	lsls	r2, r3, #31
 8008232:	d402      	bmi.n	800823a <__lo0bits+0x4e>
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	d006      	beq.n	8008246 <__lo0bits+0x5a>
 8008238:	3001      	adds	r0, #1
 800823a:	600b      	str	r3, [r1, #0]
 800823c:	4770      	bx	lr
 800823e:	4610      	mov	r0, r2
 8008240:	e7e9      	b.n	8008216 <__lo0bits+0x2a>
 8008242:	2000      	movs	r0, #0
 8008244:	4770      	bx	lr
 8008246:	2020      	movs	r0, #32
 8008248:	4770      	bx	lr

0800824a <__i2b>:
 800824a:	b510      	push	{r4, lr}
 800824c:	460c      	mov	r4, r1
 800824e:	2101      	movs	r1, #1
 8008250:	f7ff ff27 	bl	80080a2 <_Balloc>
 8008254:	2201      	movs	r2, #1
 8008256:	6144      	str	r4, [r0, #20]
 8008258:	6102      	str	r2, [r0, #16]
 800825a:	bd10      	pop	{r4, pc}

0800825c <__multiply>:
 800825c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4614      	mov	r4, r2
 8008262:	690a      	ldr	r2, [r1, #16]
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	bfb8      	it	lt
 800826a:	460b      	movlt	r3, r1
 800826c:	4688      	mov	r8, r1
 800826e:	bfbc      	itt	lt
 8008270:	46a0      	movlt	r8, r4
 8008272:	461c      	movlt	r4, r3
 8008274:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008278:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800827c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008280:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008284:	eb07 0609 	add.w	r6, r7, r9
 8008288:	42b3      	cmp	r3, r6
 800828a:	bfb8      	it	lt
 800828c:	3101      	addlt	r1, #1
 800828e:	f7ff ff08 	bl	80080a2 <_Balloc>
 8008292:	f100 0514 	add.w	r5, r0, #20
 8008296:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800829a:	462b      	mov	r3, r5
 800829c:	2200      	movs	r2, #0
 800829e:	4573      	cmp	r3, lr
 80082a0:	d316      	bcc.n	80082d0 <__multiply+0x74>
 80082a2:	f104 0214 	add.w	r2, r4, #20
 80082a6:	f108 0114 	add.w	r1, r8, #20
 80082aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80082ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	9b00      	ldr	r3, [sp, #0]
 80082b6:	9201      	str	r2, [sp, #4]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d80c      	bhi.n	80082d6 <__multiply+0x7a>
 80082bc:	2e00      	cmp	r6, #0
 80082be:	dd03      	ble.n	80082c8 <__multiply+0x6c>
 80082c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d05d      	beq.n	8008384 <__multiply+0x128>
 80082c8:	6106      	str	r6, [r0, #16]
 80082ca:	b003      	add	sp, #12
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	f843 2b04 	str.w	r2, [r3], #4
 80082d4:	e7e3      	b.n	800829e <__multiply+0x42>
 80082d6:	f8b2 b000 	ldrh.w	fp, [r2]
 80082da:	f1bb 0f00 	cmp.w	fp, #0
 80082de:	d023      	beq.n	8008328 <__multiply+0xcc>
 80082e0:	4689      	mov	r9, r1
 80082e2:	46ac      	mov	ip, r5
 80082e4:	f04f 0800 	mov.w	r8, #0
 80082e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80082ec:	f8dc a000 	ldr.w	sl, [ip]
 80082f0:	b2a3      	uxth	r3, r4
 80082f2:	fa1f fa8a 	uxth.w	sl, sl
 80082f6:	fb0b a303 	mla	r3, fp, r3, sl
 80082fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80082fe:	f8dc 4000 	ldr.w	r4, [ip]
 8008302:	4443      	add	r3, r8
 8008304:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008308:	fb0b 840a 	mla	r4, fp, sl, r8
 800830c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008310:	46e2      	mov	sl, ip
 8008312:	b29b      	uxth	r3, r3
 8008314:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008318:	454f      	cmp	r7, r9
 800831a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800831e:	f84a 3b04 	str.w	r3, [sl], #4
 8008322:	d82b      	bhi.n	800837c <__multiply+0x120>
 8008324:	f8cc 8004 	str.w	r8, [ip, #4]
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800832e:	3204      	adds	r2, #4
 8008330:	f1ba 0f00 	cmp.w	sl, #0
 8008334:	d020      	beq.n	8008378 <__multiply+0x11c>
 8008336:	682b      	ldr	r3, [r5, #0]
 8008338:	4689      	mov	r9, r1
 800833a:	46a8      	mov	r8, r5
 800833c:	f04f 0b00 	mov.w	fp, #0
 8008340:	f8b9 c000 	ldrh.w	ip, [r9]
 8008344:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008348:	fb0a 440c 	mla	r4, sl, ip, r4
 800834c:	445c      	add	r4, fp
 800834e:	46c4      	mov	ip, r8
 8008350:	b29b      	uxth	r3, r3
 8008352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008356:	f84c 3b04 	str.w	r3, [ip], #4
 800835a:	f859 3b04 	ldr.w	r3, [r9], #4
 800835e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	fb0a b303 	mla	r3, sl, r3, fp
 8008368:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800836c:	454f      	cmp	r7, r9
 800836e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008372:	d805      	bhi.n	8008380 <__multiply+0x124>
 8008374:	f8c8 3004 	str.w	r3, [r8, #4]
 8008378:	3504      	adds	r5, #4
 800837a:	e79b      	b.n	80082b4 <__multiply+0x58>
 800837c:	46d4      	mov	ip, sl
 800837e:	e7b3      	b.n	80082e8 <__multiply+0x8c>
 8008380:	46e0      	mov	r8, ip
 8008382:	e7dd      	b.n	8008340 <__multiply+0xe4>
 8008384:	3e01      	subs	r6, #1
 8008386:	e799      	b.n	80082bc <__multiply+0x60>

08008388 <__pow5mult>:
 8008388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800838c:	4615      	mov	r5, r2
 800838e:	f012 0203 	ands.w	r2, r2, #3
 8008392:	4606      	mov	r6, r0
 8008394:	460f      	mov	r7, r1
 8008396:	d007      	beq.n	80083a8 <__pow5mult+0x20>
 8008398:	3a01      	subs	r2, #1
 800839a:	4c21      	ldr	r4, [pc, #132]	; (8008420 <__pow5mult+0x98>)
 800839c:	2300      	movs	r3, #0
 800839e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083a2:	f7ff fec9 	bl	8008138 <__multadd>
 80083a6:	4607      	mov	r7, r0
 80083a8:	10ad      	asrs	r5, r5, #2
 80083aa:	d035      	beq.n	8008418 <__pow5mult+0x90>
 80083ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083ae:	b93c      	cbnz	r4, 80083c0 <__pow5mult+0x38>
 80083b0:	2010      	movs	r0, #16
 80083b2:	f7ff fe63 	bl	800807c <malloc>
 80083b6:	6270      	str	r0, [r6, #36]	; 0x24
 80083b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083bc:	6004      	str	r4, [r0, #0]
 80083be:	60c4      	str	r4, [r0, #12]
 80083c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083c8:	b94c      	cbnz	r4, 80083de <__pow5mult+0x56>
 80083ca:	f240 2171 	movw	r1, #625	; 0x271
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff ff3b 	bl	800824a <__i2b>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083da:	4604      	mov	r4, r0
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	07eb      	lsls	r3, r5, #31
 80083e4:	d50a      	bpl.n	80083fc <__pow5mult+0x74>
 80083e6:	4639      	mov	r1, r7
 80083e8:	4622      	mov	r2, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff36 	bl	800825c <__multiply>
 80083f0:	4639      	mov	r1, r7
 80083f2:	4681      	mov	r9, r0
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff fe88 	bl	800810a <_Bfree>
 80083fa:	464f      	mov	r7, r9
 80083fc:	106d      	asrs	r5, r5, #1
 80083fe:	d00b      	beq.n	8008418 <__pow5mult+0x90>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	b938      	cbnz	r0, 8008414 <__pow5mult+0x8c>
 8008404:	4622      	mov	r2, r4
 8008406:	4621      	mov	r1, r4
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ff27 	bl	800825c <__multiply>
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	f8c0 8000 	str.w	r8, [r0]
 8008414:	4604      	mov	r4, r0
 8008416:	e7e4      	b.n	80083e2 <__pow5mult+0x5a>
 8008418:	4638      	mov	r0, r7
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	bf00      	nop
 8008420:	08009988 	.word	0x08009988

08008424 <__lshift>:
 8008424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008428:	460c      	mov	r4, r1
 800842a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	6849      	ldr	r1, [r1, #4]
 8008432:	eb0a 0903 	add.w	r9, sl, r3
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	4607      	mov	r7, r0
 800843a:	4616      	mov	r6, r2
 800843c:	f109 0501 	add.w	r5, r9, #1
 8008440:	42ab      	cmp	r3, r5
 8008442:	db32      	blt.n	80084aa <__lshift+0x86>
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff fe2c 	bl	80080a2 <_Balloc>
 800844a:	2300      	movs	r3, #0
 800844c:	4680      	mov	r8, r0
 800844e:	f100 0114 	add.w	r1, r0, #20
 8008452:	461a      	mov	r2, r3
 8008454:	4553      	cmp	r3, sl
 8008456:	db2b      	blt.n	80084b0 <__lshift+0x8c>
 8008458:	6920      	ldr	r0, [r4, #16]
 800845a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800845e:	f104 0314 	add.w	r3, r4, #20
 8008462:	f016 021f 	ands.w	r2, r6, #31
 8008466:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800846a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800846e:	d025      	beq.n	80084bc <__lshift+0x98>
 8008470:	f1c2 0e20 	rsb	lr, r2, #32
 8008474:	2000      	movs	r0, #0
 8008476:	681e      	ldr	r6, [r3, #0]
 8008478:	468a      	mov	sl, r1
 800847a:	4096      	lsls	r6, r2
 800847c:	4330      	orrs	r0, r6
 800847e:	f84a 0b04 	str.w	r0, [sl], #4
 8008482:	f853 0b04 	ldr.w	r0, [r3], #4
 8008486:	459c      	cmp	ip, r3
 8008488:	fa20 f00e 	lsr.w	r0, r0, lr
 800848c:	d814      	bhi.n	80084b8 <__lshift+0x94>
 800848e:	6048      	str	r0, [r1, #4]
 8008490:	b108      	cbz	r0, 8008496 <__lshift+0x72>
 8008492:	f109 0502 	add.w	r5, r9, #2
 8008496:	3d01      	subs	r5, #1
 8008498:	4638      	mov	r0, r7
 800849a:	f8c8 5010 	str.w	r5, [r8, #16]
 800849e:	4621      	mov	r1, r4
 80084a0:	f7ff fe33 	bl	800810a <_Bfree>
 80084a4:	4640      	mov	r0, r8
 80084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084aa:	3101      	adds	r1, #1
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	e7c7      	b.n	8008440 <__lshift+0x1c>
 80084b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084b4:	3301      	adds	r3, #1
 80084b6:	e7cd      	b.n	8008454 <__lshift+0x30>
 80084b8:	4651      	mov	r1, sl
 80084ba:	e7dc      	b.n	8008476 <__lshift+0x52>
 80084bc:	3904      	subs	r1, #4
 80084be:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80084c6:	459c      	cmp	ip, r3
 80084c8:	d8f9      	bhi.n	80084be <__lshift+0x9a>
 80084ca:	e7e4      	b.n	8008496 <__lshift+0x72>

080084cc <__mcmp>:
 80084cc:	6903      	ldr	r3, [r0, #16]
 80084ce:	690a      	ldr	r2, [r1, #16]
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	b530      	push	{r4, r5, lr}
 80084d4:	d10c      	bne.n	80084f0 <__mcmp+0x24>
 80084d6:	0092      	lsls	r2, r2, #2
 80084d8:	3014      	adds	r0, #20
 80084da:	3114      	adds	r1, #20
 80084dc:	1884      	adds	r4, r0, r2
 80084de:	4411      	add	r1, r2
 80084e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084e8:	4295      	cmp	r5, r2
 80084ea:	d003      	beq.n	80084f4 <__mcmp+0x28>
 80084ec:	d305      	bcc.n	80084fa <__mcmp+0x2e>
 80084ee:	2301      	movs	r3, #1
 80084f0:	4618      	mov	r0, r3
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	42a0      	cmp	r0, r4
 80084f6:	d3f3      	bcc.n	80084e0 <__mcmp+0x14>
 80084f8:	e7fa      	b.n	80084f0 <__mcmp+0x24>
 80084fa:	f04f 33ff 	mov.w	r3, #4294967295
 80084fe:	e7f7      	b.n	80084f0 <__mcmp+0x24>

08008500 <__mdiff>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	460d      	mov	r5, r1
 8008506:	4607      	mov	r7, r0
 8008508:	4611      	mov	r1, r2
 800850a:	4628      	mov	r0, r5
 800850c:	4614      	mov	r4, r2
 800850e:	f7ff ffdd 	bl	80084cc <__mcmp>
 8008512:	1e06      	subs	r6, r0, #0
 8008514:	d108      	bne.n	8008528 <__mdiff+0x28>
 8008516:	4631      	mov	r1, r6
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff fdc2 	bl	80080a2 <_Balloc>
 800851e:	2301      	movs	r3, #1
 8008520:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	bfa4      	itt	ge
 800852a:	4623      	movge	r3, r4
 800852c:	462c      	movge	r4, r5
 800852e:	4638      	mov	r0, r7
 8008530:	6861      	ldr	r1, [r4, #4]
 8008532:	bfa6      	itte	ge
 8008534:	461d      	movge	r5, r3
 8008536:	2600      	movge	r6, #0
 8008538:	2601      	movlt	r6, #1
 800853a:	f7ff fdb2 	bl	80080a2 <_Balloc>
 800853e:	692b      	ldr	r3, [r5, #16]
 8008540:	60c6      	str	r6, [r0, #12]
 8008542:	6926      	ldr	r6, [r4, #16]
 8008544:	f105 0914 	add.w	r9, r5, #20
 8008548:	f104 0214 	add.w	r2, r4, #20
 800854c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008550:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008554:	f100 0514 	add.w	r5, r0, #20
 8008558:	f04f 0e00 	mov.w	lr, #0
 800855c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008560:	f859 4b04 	ldr.w	r4, [r9], #4
 8008564:	fa1e f18a 	uxtah	r1, lr, sl
 8008568:	b2a3      	uxth	r3, r4
 800856a:	1ac9      	subs	r1, r1, r3
 800856c:	0c23      	lsrs	r3, r4, #16
 800856e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008572:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008576:	b289      	uxth	r1, r1
 8008578:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800857c:	45c8      	cmp	r8, r9
 800857e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008582:	4694      	mov	ip, r2
 8008584:	f845 3b04 	str.w	r3, [r5], #4
 8008588:	d8e8      	bhi.n	800855c <__mdiff+0x5c>
 800858a:	45bc      	cmp	ip, r7
 800858c:	d304      	bcc.n	8008598 <__mdiff+0x98>
 800858e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008592:	b183      	cbz	r3, 80085b6 <__mdiff+0xb6>
 8008594:	6106      	str	r6, [r0, #16]
 8008596:	e7c5      	b.n	8008524 <__mdiff+0x24>
 8008598:	f85c 1b04 	ldr.w	r1, [ip], #4
 800859c:	fa1e f381 	uxtah	r3, lr, r1
 80085a0:	141a      	asrs	r2, r3, #16
 80085a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80085b0:	f845 3b04 	str.w	r3, [r5], #4
 80085b4:	e7e9      	b.n	800858a <__mdiff+0x8a>
 80085b6:	3e01      	subs	r6, #1
 80085b8:	e7e9      	b.n	800858e <__mdiff+0x8e>

080085ba <__d2b>:
 80085ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085be:	460e      	mov	r6, r1
 80085c0:	2101      	movs	r1, #1
 80085c2:	ec59 8b10 	vmov	r8, r9, d0
 80085c6:	4615      	mov	r5, r2
 80085c8:	f7ff fd6b 	bl	80080a2 <_Balloc>
 80085cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80085d0:	4607      	mov	r7, r0
 80085d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085d6:	bb34      	cbnz	r4, 8008626 <__d2b+0x6c>
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	f1b8 0300 	subs.w	r3, r8, #0
 80085de:	d027      	beq.n	8008630 <__d2b+0x76>
 80085e0:	a802      	add	r0, sp, #8
 80085e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80085e6:	f7ff fe01 	bl	80081ec <__lo0bits>
 80085ea:	9900      	ldr	r1, [sp, #0]
 80085ec:	b1f0      	cbz	r0, 800862c <__d2b+0x72>
 80085ee:	9a01      	ldr	r2, [sp, #4]
 80085f0:	f1c0 0320 	rsb	r3, r0, #32
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	430b      	orrs	r3, r1
 80085fa:	40c2      	lsrs	r2, r0
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	9201      	str	r2, [sp, #4]
 8008600:	9b01      	ldr	r3, [sp, #4]
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf14      	ite	ne
 8008608:	2102      	movne	r1, #2
 800860a:	2101      	moveq	r1, #1
 800860c:	6139      	str	r1, [r7, #16]
 800860e:	b1c4      	cbz	r4, 8008642 <__d2b+0x88>
 8008610:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008614:	4404      	add	r4, r0
 8008616:	6034      	str	r4, [r6, #0]
 8008618:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800861c:	6028      	str	r0, [r5, #0]
 800861e:	4638      	mov	r0, r7
 8008620:	b003      	add	sp, #12
 8008622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800862a:	e7d5      	b.n	80085d8 <__d2b+0x1e>
 800862c:	6179      	str	r1, [r7, #20]
 800862e:	e7e7      	b.n	8008600 <__d2b+0x46>
 8008630:	a801      	add	r0, sp, #4
 8008632:	f7ff fddb 	bl	80081ec <__lo0bits>
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	2101      	movs	r1, #1
 800863c:	6139      	str	r1, [r7, #16]
 800863e:	3020      	adds	r0, #32
 8008640:	e7e5      	b.n	800860e <__d2b+0x54>
 8008642:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008646:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800864a:	6030      	str	r0, [r6, #0]
 800864c:	6918      	ldr	r0, [r3, #16]
 800864e:	f7ff fdae 	bl	80081ae <__hi0bits>
 8008652:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008656:	e7e1      	b.n	800861c <__d2b+0x62>

08008658 <_calloc_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	fb02 f401 	mul.w	r4, r2, r1
 800865e:	4621      	mov	r1, r4
 8008660:	f000 f808 	bl	8008674 <_malloc_r>
 8008664:	4605      	mov	r5, r0
 8008666:	b118      	cbz	r0, 8008670 <_calloc_r+0x18>
 8008668:	4622      	mov	r2, r4
 800866a:	2100      	movs	r1, #0
 800866c:	f7fe fb60 	bl	8006d30 <memset>
 8008670:	4628      	mov	r0, r5
 8008672:	bd38      	pop	{r3, r4, r5, pc}

08008674 <_malloc_r>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	1ccd      	adds	r5, r1, #3
 8008678:	f025 0503 	bic.w	r5, r5, #3
 800867c:	3508      	adds	r5, #8
 800867e:	2d0c      	cmp	r5, #12
 8008680:	bf38      	it	cc
 8008682:	250c      	movcc	r5, #12
 8008684:	2d00      	cmp	r5, #0
 8008686:	4606      	mov	r6, r0
 8008688:	db01      	blt.n	800868e <_malloc_r+0x1a>
 800868a:	42a9      	cmp	r1, r5
 800868c:	d903      	bls.n	8008696 <_malloc_r+0x22>
 800868e:	230c      	movs	r3, #12
 8008690:	6033      	str	r3, [r6, #0]
 8008692:	2000      	movs	r0, #0
 8008694:	bd70      	pop	{r4, r5, r6, pc}
 8008696:	f000 f869 	bl	800876c <__malloc_lock>
 800869a:	4a21      	ldr	r2, [pc, #132]	; (8008720 <_malloc_r+0xac>)
 800869c:	6814      	ldr	r4, [r2, #0]
 800869e:	4621      	mov	r1, r4
 80086a0:	b991      	cbnz	r1, 80086c8 <_malloc_r+0x54>
 80086a2:	4c20      	ldr	r4, [pc, #128]	; (8008724 <_malloc_r+0xb0>)
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	b91b      	cbnz	r3, 80086b0 <_malloc_r+0x3c>
 80086a8:	4630      	mov	r0, r6
 80086aa:	f000 f83d 	bl	8008728 <_sbrk_r>
 80086ae:	6020      	str	r0, [r4, #0]
 80086b0:	4629      	mov	r1, r5
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 f838 	bl	8008728 <_sbrk_r>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d124      	bne.n	8008706 <_malloc_r+0x92>
 80086bc:	230c      	movs	r3, #12
 80086be:	6033      	str	r3, [r6, #0]
 80086c0:	4630      	mov	r0, r6
 80086c2:	f000 f854 	bl	800876e <__malloc_unlock>
 80086c6:	e7e4      	b.n	8008692 <_malloc_r+0x1e>
 80086c8:	680b      	ldr	r3, [r1, #0]
 80086ca:	1b5b      	subs	r3, r3, r5
 80086cc:	d418      	bmi.n	8008700 <_malloc_r+0x8c>
 80086ce:	2b0b      	cmp	r3, #11
 80086d0:	d90f      	bls.n	80086f2 <_malloc_r+0x7e>
 80086d2:	600b      	str	r3, [r1, #0]
 80086d4:	50cd      	str	r5, [r1, r3]
 80086d6:	18cc      	adds	r4, r1, r3
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f848 	bl	800876e <__malloc_unlock>
 80086de:	f104 000b 	add.w	r0, r4, #11
 80086e2:	1d23      	adds	r3, r4, #4
 80086e4:	f020 0007 	bic.w	r0, r0, #7
 80086e8:	1ac3      	subs	r3, r0, r3
 80086ea:	d0d3      	beq.n	8008694 <_malloc_r+0x20>
 80086ec:	425a      	negs	r2, r3
 80086ee:	50e2      	str	r2, [r4, r3]
 80086f0:	e7d0      	b.n	8008694 <_malloc_r+0x20>
 80086f2:	428c      	cmp	r4, r1
 80086f4:	684b      	ldr	r3, [r1, #4]
 80086f6:	bf16      	itet	ne
 80086f8:	6063      	strne	r3, [r4, #4]
 80086fa:	6013      	streq	r3, [r2, #0]
 80086fc:	460c      	movne	r4, r1
 80086fe:	e7eb      	b.n	80086d8 <_malloc_r+0x64>
 8008700:	460c      	mov	r4, r1
 8008702:	6849      	ldr	r1, [r1, #4]
 8008704:	e7cc      	b.n	80086a0 <_malloc_r+0x2c>
 8008706:	1cc4      	adds	r4, r0, #3
 8008708:	f024 0403 	bic.w	r4, r4, #3
 800870c:	42a0      	cmp	r0, r4
 800870e:	d005      	beq.n	800871c <_malloc_r+0xa8>
 8008710:	1a21      	subs	r1, r4, r0
 8008712:	4630      	mov	r0, r6
 8008714:	f000 f808 	bl	8008728 <_sbrk_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d0cf      	beq.n	80086bc <_malloc_r+0x48>
 800871c:	6025      	str	r5, [r4, #0]
 800871e:	e7db      	b.n	80086d8 <_malloc_r+0x64>
 8008720:	20000288 	.word	0x20000288
 8008724:	2000028c 	.word	0x2000028c

08008728 <_sbrk_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4c06      	ldr	r4, [pc, #24]	; (8008744 <_sbrk_r+0x1c>)
 800872c:	2300      	movs	r3, #0
 800872e:	4605      	mov	r5, r0
 8008730:	4608      	mov	r0, r1
 8008732:	6023      	str	r3, [r4, #0]
 8008734:	f7fa f80a 	bl	800274c <_sbrk>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_sbrk_r+0x1a>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	b103      	cbz	r3, 8008742 <_sbrk_r+0x1a>
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	200008fc 	.word	0x200008fc

08008748 <__ascii_mbtowc>:
 8008748:	b082      	sub	sp, #8
 800874a:	b901      	cbnz	r1, 800874e <__ascii_mbtowc+0x6>
 800874c:	a901      	add	r1, sp, #4
 800874e:	b142      	cbz	r2, 8008762 <__ascii_mbtowc+0x1a>
 8008750:	b14b      	cbz	r3, 8008766 <__ascii_mbtowc+0x1e>
 8008752:	7813      	ldrb	r3, [r2, #0]
 8008754:	600b      	str	r3, [r1, #0]
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	1c10      	adds	r0, r2, #0
 800875a:	bf18      	it	ne
 800875c:	2001      	movne	r0, #1
 800875e:	b002      	add	sp, #8
 8008760:	4770      	bx	lr
 8008762:	4610      	mov	r0, r2
 8008764:	e7fb      	b.n	800875e <__ascii_mbtowc+0x16>
 8008766:	f06f 0001 	mvn.w	r0, #1
 800876a:	e7f8      	b.n	800875e <__ascii_mbtowc+0x16>

0800876c <__malloc_lock>:
 800876c:	4770      	bx	lr

0800876e <__malloc_unlock>:
 800876e:	4770      	bx	lr

08008770 <__ascii_wctomb>:
 8008770:	b149      	cbz	r1, 8008786 <__ascii_wctomb+0x16>
 8008772:	2aff      	cmp	r2, #255	; 0xff
 8008774:	bf85      	ittet	hi
 8008776:	238a      	movhi	r3, #138	; 0x8a
 8008778:	6003      	strhi	r3, [r0, #0]
 800877a:	700a      	strbls	r2, [r1, #0]
 800877c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008780:	bf98      	it	ls
 8008782:	2001      	movls	r0, #1
 8008784:	4770      	bx	lr
 8008786:	4608      	mov	r0, r1
 8008788:	4770      	bx	lr
 800878a:	0000      	movs	r0, r0
 800878c:	0000      	movs	r0, r0
	...

08008790 <sin>:
 8008790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008792:	ec51 0b10 	vmov	r0, r1, d0
 8008796:	4a20      	ldr	r2, [pc, #128]	; (8008818 <sin+0x88>)
 8008798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800879c:	4293      	cmp	r3, r2
 800879e:	dc07      	bgt.n	80087b0 <sin+0x20>
 80087a0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008810 <sin+0x80>
 80087a4:	2000      	movs	r0, #0
 80087a6:	f000 fe37 	bl	8009418 <__kernel_sin>
 80087aa:	ec51 0b10 	vmov	r0, r1, d0
 80087ae:	e007      	b.n	80087c0 <sin+0x30>
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <sin+0x8c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	dd09      	ble.n	80087ca <sin+0x3a>
 80087b6:	ee10 2a10 	vmov	r2, s0
 80087ba:	460b      	mov	r3, r1
 80087bc:	f7f7 fd18 	bl	80001f0 <__aeabi_dsub>
 80087c0:	ec41 0b10 	vmov	d0, r0, r1
 80087c4:	b005      	add	sp, #20
 80087c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80087ca:	4668      	mov	r0, sp
 80087cc:	f000 f828 	bl	8008820 <__ieee754_rem_pio2>
 80087d0:	f000 0003 	and.w	r0, r0, #3
 80087d4:	2801      	cmp	r0, #1
 80087d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80087da:	ed9d 0b00 	vldr	d0, [sp]
 80087de:	d004      	beq.n	80087ea <sin+0x5a>
 80087e0:	2802      	cmp	r0, #2
 80087e2:	d005      	beq.n	80087f0 <sin+0x60>
 80087e4:	b970      	cbnz	r0, 8008804 <sin+0x74>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7dd      	b.n	80087a6 <sin+0x16>
 80087ea:	f000 fa0d 	bl	8008c08 <__kernel_cos>
 80087ee:	e7dc      	b.n	80087aa <sin+0x1a>
 80087f0:	2001      	movs	r0, #1
 80087f2:	f000 fe11 	bl	8009418 <__kernel_sin>
 80087f6:	ec53 2b10 	vmov	r2, r3, d0
 80087fa:	ee10 0a10 	vmov	r0, s0
 80087fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008802:	e7dd      	b.n	80087c0 <sin+0x30>
 8008804:	f000 fa00 	bl	8008c08 <__kernel_cos>
 8008808:	e7f5      	b.n	80087f6 <sin+0x66>
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w
	...
 8008818:	3fe921fb 	.word	0x3fe921fb
 800881c:	7fefffff 	.word	0x7fefffff

08008820 <__ieee754_rem_pio2>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	ec57 6b10 	vmov	r6, r7, d0
 8008828:	4bc3      	ldr	r3, [pc, #780]	; (8008b38 <__ieee754_rem_pio2+0x318>)
 800882a:	b08d      	sub	sp, #52	; 0x34
 800882c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008830:	4598      	cmp	r8, r3
 8008832:	4604      	mov	r4, r0
 8008834:	9704      	str	r7, [sp, #16]
 8008836:	dc07      	bgt.n	8008848 <__ieee754_rem_pio2+0x28>
 8008838:	2200      	movs	r2, #0
 800883a:	2300      	movs	r3, #0
 800883c:	ed84 0b00 	vstr	d0, [r4]
 8008840:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008844:	2500      	movs	r5, #0
 8008846:	e027      	b.n	8008898 <__ieee754_rem_pio2+0x78>
 8008848:	4bbc      	ldr	r3, [pc, #752]	; (8008b3c <__ieee754_rem_pio2+0x31c>)
 800884a:	4598      	cmp	r8, r3
 800884c:	dc75      	bgt.n	800893a <__ieee754_rem_pio2+0x11a>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	4dbb      	ldr	r5, [pc, #748]	; (8008b40 <__ieee754_rem_pio2+0x320>)
 8008852:	2b00      	cmp	r3, #0
 8008854:	ee10 0a10 	vmov	r0, s0
 8008858:	a3a9      	add	r3, pc, #676	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x2e0>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	4639      	mov	r1, r7
 8008860:	dd36      	ble.n	80088d0 <__ieee754_rem_pio2+0xb0>
 8008862:	f7f7 fcc5 	bl	80001f0 <__aeabi_dsub>
 8008866:	45a8      	cmp	r8, r5
 8008868:	4606      	mov	r6, r0
 800886a:	460f      	mov	r7, r1
 800886c:	d018      	beq.n	80088a0 <__ieee754_rem_pio2+0x80>
 800886e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x2e8>)
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f7f7 fcbc 	bl	80001f0 <__aeabi_dsub>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	e9c4 2300 	strd	r2, r3, [r4]
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f7 fcb4 	bl	80001f0 <__aeabi_dsub>
 8008888:	a39f      	add	r3, pc, #636	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x2e8>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fcaf 	bl	80001f0 <__aeabi_dsub>
 8008892:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008896:	2501      	movs	r5, #1
 8008898:	4628      	mov	r0, r5
 800889a:	b00d      	add	sp, #52	; 0x34
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	a39b      	add	r3, pc, #620	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x2f0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fca3 	bl	80001f0 <__aeabi_dsub>
 80088aa:	a39b      	add	r3, pc, #620	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2f8>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	4606      	mov	r6, r0
 80088b2:	460f      	mov	r7, r1
 80088b4:	f7f7 fc9c 	bl	80001f0 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	e9c4 2300 	strd	r2, r3, [r4]
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fc94 	bl	80001f0 <__aeabi_dsub>
 80088c8:	a393      	add	r3, pc, #588	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2f8>)
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	e7de      	b.n	800888e <__ieee754_rem_pio2+0x6e>
 80088d0:	f7f7 fc90 	bl	80001f4 <__adddf3>
 80088d4:	45a8      	cmp	r8, r5
 80088d6:	4606      	mov	r6, r0
 80088d8:	460f      	mov	r7, r1
 80088da:	d016      	beq.n	800890a <__ieee754_rem_pio2+0xea>
 80088dc:	a38a      	add	r3, pc, #552	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x2e8>)
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	f7f7 fc87 	bl	80001f4 <__adddf3>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9c4 2300 	strd	r2, r3, [r4]
 80088ee:	4630      	mov	r0, r6
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f7 fc7d 	bl	80001f0 <__aeabi_dsub>
 80088f6:	a384      	add	r3, pc, #528	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x2e8>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f7f7 fc7a 	bl	80001f4 <__adddf3>
 8008900:	f04f 35ff 	mov.w	r5, #4294967295
 8008904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008908:	e7c6      	b.n	8008898 <__ieee754_rem_pio2+0x78>
 800890a:	a381      	add	r3, pc, #516	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x2f0>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fc70 	bl	80001f4 <__adddf3>
 8008914:	a380      	add	r3, pc, #512	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2f8>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	4606      	mov	r6, r0
 800891c:	460f      	mov	r7, r1
 800891e:	f7f7 fc69 	bl	80001f4 <__adddf3>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	e9c4 2300 	strd	r2, r3, [r4]
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 fc5f 	bl	80001f0 <__aeabi_dsub>
 8008932:	a379      	add	r3, pc, #484	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2f8>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	e7e0      	b.n	80088fc <__ieee754_rem_pio2+0xdc>
 800893a:	4b82      	ldr	r3, [pc, #520]	; (8008b44 <__ieee754_rem_pio2+0x324>)
 800893c:	4598      	cmp	r8, r3
 800893e:	f300 80d0 	bgt.w	8008ae2 <__ieee754_rem_pio2+0x2c2>
 8008942:	f000 fe23 	bl	800958c <fabs>
 8008946:	ec57 6b10 	vmov	r6, r7, d0
 800894a:	ee10 0a10 	vmov	r0, s0
 800894e:	a374      	add	r3, pc, #464	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x300>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	4639      	mov	r1, r7
 8008956:	f7f7 fe03 	bl	8000560 <__aeabi_dmul>
 800895a:	2200      	movs	r2, #0
 800895c:	4b7a      	ldr	r3, [pc, #488]	; (8008b48 <__ieee754_rem_pio2+0x328>)
 800895e:	f7f7 fc49 	bl	80001f4 <__adddf3>
 8008962:	f7f8 f8ad 	bl	8000ac0 <__aeabi_d2iz>
 8008966:	4605      	mov	r5, r0
 8008968:	f7f7 fd90 	bl	800048c <__aeabi_i2d>
 800896c:	a364      	add	r3, pc, #400	; (adr r3, 8008b00 <__ieee754_rem_pio2+0x2e0>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008976:	f7f7 fdf3 	bl	8000560 <__aeabi_dmul>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f7 fc35 	bl	80001f0 <__aeabi_dsub>
 8008986:	a360      	add	r3, pc, #384	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x2e8>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	4682      	mov	sl, r0
 800898e:	468b      	mov	fp, r1
 8008990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008994:	f7f7 fde4 	bl	8000560 <__aeabi_dmul>
 8008998:	2d1f      	cmp	r5, #31
 800899a:	4606      	mov	r6, r0
 800899c:	460f      	mov	r7, r1
 800899e:	dc0c      	bgt.n	80089ba <__ieee754_rem_pio2+0x19a>
 80089a0:	1e6a      	subs	r2, r5, #1
 80089a2:	4b6a      	ldr	r3, [pc, #424]	; (8008b4c <__ieee754_rem_pio2+0x32c>)
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	4543      	cmp	r3, r8
 80089aa:	d006      	beq.n	80089ba <__ieee754_rem_pio2+0x19a>
 80089ac:	4632      	mov	r2, r6
 80089ae:	463b      	mov	r3, r7
 80089b0:	4650      	mov	r0, sl
 80089b2:	4659      	mov	r1, fp
 80089b4:	f7f7 fc1c 	bl	80001f0 <__aeabi_dsub>
 80089b8:	e00e      	b.n	80089d8 <__ieee754_rem_pio2+0x1b8>
 80089ba:	4632      	mov	r2, r6
 80089bc:	463b      	mov	r3, r7
 80089be:	4650      	mov	r0, sl
 80089c0:	4659      	mov	r1, fp
 80089c2:	f7f7 fc15 	bl	80001f0 <__aeabi_dsub>
 80089c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089ca:	9305      	str	r3, [sp, #20]
 80089cc:	9a05      	ldr	r2, [sp, #20]
 80089ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	dc02      	bgt.n	80089de <__ieee754_rem_pio2+0x1be>
 80089d8:	e9c4 0100 	strd	r0, r1, [r4]
 80089dc:	e039      	b.n	8008a52 <__ieee754_rem_pio2+0x232>
 80089de:	a34c      	add	r3, pc, #304	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x2f0>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e8:	f7f7 fdba 	bl	8000560 <__aeabi_dmul>
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4650      	mov	r0, sl
 80089f6:	4659      	mov	r1, fp
 80089f8:	f7f7 fbfa 	bl	80001f0 <__aeabi_dsub>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4680      	mov	r8, r0
 8008a02:	4689      	mov	r9, r1
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	f7f7 fbf2 	bl	80001f0 <__aeabi_dsub>
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	463b      	mov	r3, r7
 8008a10:	f7f7 fbee 	bl	80001f0 <__aeabi_dsub>
 8008a14:	a340      	add	r3, pc, #256	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2f8>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a22:	f7f7 fd9d 	bl	8000560 <__aeabi_dmul>
 8008a26:	4632      	mov	r2, r6
 8008a28:	463b      	mov	r3, r7
 8008a2a:	f7f7 fbe1 	bl	80001f0 <__aeabi_dsub>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4606      	mov	r6, r0
 8008a34:	460f      	mov	r7, r1
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	f7f7 fbd9 	bl	80001f0 <__aeabi_dsub>
 8008a3e:	9a05      	ldr	r2, [sp, #20]
 8008a40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b31      	cmp	r3, #49	; 0x31
 8008a48:	dc20      	bgt.n	8008a8c <__ieee754_rem_pio2+0x26c>
 8008a4a:	e9c4 0100 	strd	r0, r1, [r4]
 8008a4e:	46c2      	mov	sl, r8
 8008a50:	46cb      	mov	fp, r9
 8008a52:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008a56:	4650      	mov	r0, sl
 8008a58:	4642      	mov	r2, r8
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	4659      	mov	r1, fp
 8008a5e:	f7f7 fbc7 	bl	80001f0 <__aeabi_dsub>
 8008a62:	463b      	mov	r3, r7
 8008a64:	4632      	mov	r2, r6
 8008a66:	f7f7 fbc3 	bl	80001f0 <__aeabi_dsub>
 8008a6a:	9b04      	ldr	r3, [sp, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a72:	f6bf af11 	bge.w	8008898 <__ieee754_rem_pio2+0x78>
 8008a76:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a7a:	6063      	str	r3, [r4, #4]
 8008a7c:	f8c4 8000 	str.w	r8, [r4]
 8008a80:	60a0      	str	r0, [r4, #8]
 8008a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a86:	60e3      	str	r3, [r4, #12]
 8008a88:	426d      	negs	r5, r5
 8008a8a:	e705      	b.n	8008898 <__ieee754_rem_pio2+0x78>
 8008a8c:	a326      	add	r3, pc, #152	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x308>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a96:	f7f7 fd63 	bl	8000560 <__aeabi_dmul>
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	f7f7 fba3 	bl	80001f0 <__aeabi_dsub>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4682      	mov	sl, r0
 8008ab0:	468b      	mov	fp, r1
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f7 fb9b 	bl	80001f0 <__aeabi_dsub>
 8008aba:	4632      	mov	r2, r6
 8008abc:	463b      	mov	r3, r7
 8008abe:	f7f7 fb97 	bl	80001f0 <__aeabi_dsub>
 8008ac2:	a31b      	add	r3, pc, #108	; (adr r3, 8008b30 <__ieee754_rem_pio2+0x310>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	4606      	mov	r6, r0
 8008aca:	460f      	mov	r7, r1
 8008acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad0:	f7f7 fd46 	bl	8000560 <__aeabi_dmul>
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	f7f7 fb8a 	bl	80001f0 <__aeabi_dsub>
 8008adc:	4606      	mov	r6, r0
 8008ade:	460f      	mov	r7, r1
 8008ae0:	e764      	b.n	80089ac <__ieee754_rem_pio2+0x18c>
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	; (8008b50 <__ieee754_rem_pio2+0x330>)
 8008ae4:	4598      	cmp	r8, r3
 8008ae6:	dd35      	ble.n	8008b54 <__ieee754_rem_pio2+0x334>
 8008ae8:	ee10 2a10 	vmov	r2, s0
 8008aec:	463b      	mov	r3, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fb7d 	bl	80001f0 <__aeabi_dsub>
 8008af6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008afa:	e9c4 0100 	strd	r0, r1, [r4]
 8008afe:	e6a1      	b.n	8008844 <__ieee754_rem_pio2+0x24>
 8008b00:	54400000 	.word	0x54400000
 8008b04:	3ff921fb 	.word	0x3ff921fb
 8008b08:	1a626331 	.word	0x1a626331
 8008b0c:	3dd0b461 	.word	0x3dd0b461
 8008b10:	1a600000 	.word	0x1a600000
 8008b14:	3dd0b461 	.word	0x3dd0b461
 8008b18:	2e037073 	.word	0x2e037073
 8008b1c:	3ba3198a 	.word	0x3ba3198a
 8008b20:	6dc9c883 	.word	0x6dc9c883
 8008b24:	3fe45f30 	.word	0x3fe45f30
 8008b28:	2e000000 	.word	0x2e000000
 8008b2c:	3ba3198a 	.word	0x3ba3198a
 8008b30:	252049c1 	.word	0x252049c1
 8008b34:	397b839a 	.word	0x397b839a
 8008b38:	3fe921fb 	.word	0x3fe921fb
 8008b3c:	4002d97b 	.word	0x4002d97b
 8008b40:	3ff921fb 	.word	0x3ff921fb
 8008b44:	413921fb 	.word	0x413921fb
 8008b48:	3fe00000 	.word	0x3fe00000
 8008b4c:	08009aa0 	.word	0x08009aa0
 8008b50:	7fefffff 	.word	0x7fefffff
 8008b54:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008b58:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008b5c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008b60:	4630      	mov	r0, r6
 8008b62:	460f      	mov	r7, r1
 8008b64:	f7f7 ffac 	bl	8000ac0 <__aeabi_d2iz>
 8008b68:	f7f7 fc90 	bl	800048c <__aeabi_i2d>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4630      	mov	r0, r6
 8008b72:	4639      	mov	r1, r7
 8008b74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b78:	f7f7 fb3a 	bl	80001f0 <__aeabi_dsub>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4b1f      	ldr	r3, [pc, #124]	; (8008bfc <__ieee754_rem_pio2+0x3dc>)
 8008b80:	f7f7 fcee 	bl	8000560 <__aeabi_dmul>
 8008b84:	460f      	mov	r7, r1
 8008b86:	4606      	mov	r6, r0
 8008b88:	f7f7 ff9a 	bl	8000ac0 <__aeabi_d2iz>
 8008b8c:	f7f7 fc7e 	bl	800048c <__aeabi_i2d>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4630      	mov	r0, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b9c:	f7f7 fb28 	bl	80001f0 <__aeabi_dsub>
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <__ieee754_rem_pio2+0x3dc>)
 8008ba4:	f7f7 fcdc 	bl	8000560 <__aeabi_dmul>
 8008ba8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008bb0:	f04f 0803 	mov.w	r8, #3
 8008bb4:	2600      	movs	r6, #0
 8008bb6:	2700      	movs	r7, #0
 8008bb8:	4632      	mov	r2, r6
 8008bba:	463b      	mov	r3, r7
 8008bbc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8008bc4:	f7f7 ff34 	bl	8000a30 <__aeabi_dcmpeq>
 8008bc8:	b9b0      	cbnz	r0, 8008bf8 <__ieee754_rem_pio2+0x3d8>
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <__ieee754_rem_pio2+0x3e0>)
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	2302      	movs	r3, #2
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4643      	mov	r3, r8
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	a806      	add	r0, sp, #24
 8008bda:	f000 f8dd 	bl	8008d98 <__kernel_rem_pio2>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	4605      	mov	r5, r0
 8008be4:	f6bf ae58 	bge.w	8008898 <__ieee754_rem_pio2+0x78>
 8008be8:	6863      	ldr	r3, [r4, #4]
 8008bea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	68e3      	ldr	r3, [r4, #12]
 8008bf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bf6:	e746      	b.n	8008a86 <__ieee754_rem_pio2+0x266>
 8008bf8:	46d0      	mov	r8, sl
 8008bfa:	e7dd      	b.n	8008bb8 <__ieee754_rem_pio2+0x398>
 8008bfc:	41700000 	.word	0x41700000
 8008c00:	08009b20 	.word	0x08009b20
 8008c04:	00000000 	.word	0x00000000

08008c08 <__kernel_cos>:
 8008c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ec59 8b10 	vmov	r8, r9, d0
 8008c10:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008c14:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008c18:	ed2d 8b02 	vpush	{d8}
 8008c1c:	eeb0 8a41 	vmov.f32	s16, s2
 8008c20:	eef0 8a61 	vmov.f32	s17, s3
 8008c24:	da07      	bge.n	8008c36 <__kernel_cos+0x2e>
 8008c26:	ee10 0a10 	vmov	r0, s0
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	f7f7 ff48 	bl	8000ac0 <__aeabi_d2iz>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	f000 8089 	beq.w	8008d48 <__kernel_cos+0x140>
 8008c36:	4642      	mov	r2, r8
 8008c38:	464b      	mov	r3, r9
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7f7 fc8f 	bl	8000560 <__aeabi_dmul>
 8008c42:	2200      	movs	r2, #0
 8008c44:	4b4e      	ldr	r3, [pc, #312]	; (8008d80 <__kernel_cos+0x178>)
 8008c46:	4604      	mov	r4, r0
 8008c48:	460d      	mov	r5, r1
 8008c4a:	f7f7 fc89 	bl	8000560 <__aeabi_dmul>
 8008c4e:	a340      	add	r3, pc, #256	; (adr r3, 8008d50 <__kernel_cos+0x148>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4682      	mov	sl, r0
 8008c56:	468b      	mov	fp, r1
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7f7 fc80 	bl	8000560 <__aeabi_dmul>
 8008c60:	a33d      	add	r3, pc, #244	; (adr r3, 8008d58 <__kernel_cos+0x150>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fac5 	bl	80001f4 <__adddf3>
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	f7f7 fc77 	bl	8000560 <__aeabi_dmul>
 8008c72:	a33b      	add	r3, pc, #236	; (adr r3, 8008d60 <__kernel_cos+0x158>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 faba 	bl	80001f0 <__aeabi_dsub>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	462b      	mov	r3, r5
 8008c80:	f7f7 fc6e 	bl	8000560 <__aeabi_dmul>
 8008c84:	a338      	add	r3, pc, #224	; (adr r3, 8008d68 <__kernel_cos+0x160>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f7f7 fab3 	bl	80001f4 <__adddf3>
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	f7f7 fc65 	bl	8000560 <__aeabi_dmul>
 8008c96:	a336      	add	r3, pc, #216	; (adr r3, 8008d70 <__kernel_cos+0x168>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 faa8 	bl	80001f0 <__aeabi_dsub>
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	462b      	mov	r3, r5
 8008ca4:	f7f7 fc5c 	bl	8000560 <__aeabi_dmul>
 8008ca8:	a333      	add	r3, pc, #204	; (adr r3, 8008d78 <__kernel_cos+0x170>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 faa1 	bl	80001f4 <__adddf3>
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	f7f7 fc53 	bl	8000560 <__aeabi_dmul>
 8008cba:	4622      	mov	r2, r4
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	f7f7 fc4f 	bl	8000560 <__aeabi_dmul>
 8008cc2:	ec53 2b18 	vmov	r2, r3, d8
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	4640      	mov	r0, r8
 8008ccc:	4649      	mov	r1, r9
 8008cce:	f7f7 fc47 	bl	8000560 <__aeabi_dmul>
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7f7 fa89 	bl	80001f0 <__aeabi_dsub>
 8008cde:	4b29      	ldr	r3, [pc, #164]	; (8008d84 <__kernel_cos+0x17c>)
 8008ce0:	429e      	cmp	r6, r3
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	dc11      	bgt.n	8008d0c <__kernel_cos+0x104>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4650      	mov	r0, sl
 8008cee:	4659      	mov	r1, fp
 8008cf0:	f7f7 fa7e 	bl	80001f0 <__aeabi_dsub>
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4924      	ldr	r1, [pc, #144]	; (8008d88 <__kernel_cos+0x180>)
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f7f7 fa78 	bl	80001f0 <__aeabi_dsub>
 8008d00:	ecbd 8b02 	vpop	{d8}
 8008d04:	ec41 0b10 	vmov	d0, r0, r1
 8008d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <__kernel_cos+0x184>)
 8008d0e:	491e      	ldr	r1, [pc, #120]	; (8008d88 <__kernel_cos+0x180>)
 8008d10:	429e      	cmp	r6, r3
 8008d12:	bfcc      	ite	gt
 8008d14:	4d1e      	ldrgt	r5, [pc, #120]	; (8008d90 <__kernel_cos+0x188>)
 8008d16:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008d1a:	2400      	movs	r4, #0
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	2000      	movs	r0, #0
 8008d22:	f7f7 fa65 	bl	80001f0 <__aeabi_dsub>
 8008d26:	4622      	mov	r2, r4
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	f7f7 fa5d 	bl	80001f0 <__aeabi_dsub>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f7f7 fa59 	bl	80001f0 <__aeabi_dsub>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	e7d9      	b.n	8008cfc <__kernel_cos+0xf4>
 8008d48:	2000      	movs	r0, #0
 8008d4a:	490f      	ldr	r1, [pc, #60]	; (8008d88 <__kernel_cos+0x180>)
 8008d4c:	e7d8      	b.n	8008d00 <__kernel_cos+0xf8>
 8008d4e:	bf00      	nop
 8008d50:	be8838d4 	.word	0xbe8838d4
 8008d54:	bda8fae9 	.word	0xbda8fae9
 8008d58:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d5c:	3e21ee9e 	.word	0x3e21ee9e
 8008d60:	809c52ad 	.word	0x809c52ad
 8008d64:	3e927e4f 	.word	0x3e927e4f
 8008d68:	19cb1590 	.word	0x19cb1590
 8008d6c:	3efa01a0 	.word	0x3efa01a0
 8008d70:	16c15177 	.word	0x16c15177
 8008d74:	3f56c16c 	.word	0x3f56c16c
 8008d78:	5555554c 	.word	0x5555554c
 8008d7c:	3fa55555 	.word	0x3fa55555
 8008d80:	3fe00000 	.word	0x3fe00000
 8008d84:	3fd33332 	.word	0x3fd33332
 8008d88:	3ff00000 	.word	0x3ff00000
 8008d8c:	3fe90000 	.word	0x3fe90000
 8008d90:	3fd20000 	.word	0x3fd20000
 8008d94:	00000000 	.word	0x00000000

08008d98 <__kernel_rem_pio2>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	ed2d 8b02 	vpush	{d8}
 8008da0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008da4:	1ed4      	subs	r4, r2, #3
 8008da6:	9308      	str	r3, [sp, #32]
 8008da8:	9101      	str	r1, [sp, #4]
 8008daa:	4bc5      	ldr	r3, [pc, #788]	; (80090c0 <__kernel_rem_pio2+0x328>)
 8008dac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008dae:	9009      	str	r0, [sp, #36]	; 0x24
 8008db0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	9b08      	ldr	r3, [sp, #32]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	9307      	str	r3, [sp, #28]
 8008dbc:	2318      	movs	r3, #24
 8008dbe:	fb94 f4f3 	sdiv	r4, r4, r3
 8008dc2:	f06f 0317 	mvn.w	r3, #23
 8008dc6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008dca:	fb04 3303 	mla	r3, r4, r3, r3
 8008dce:	eb03 0a02 	add.w	sl, r3, r2
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	9a07      	ldr	r2, [sp, #28]
 8008dd6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80090b0 <__kernel_rem_pio2+0x318>
 8008dda:	eb03 0802 	add.w	r8, r3, r2
 8008dde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008de0:	1aa7      	subs	r7, r4, r2
 8008de2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008de6:	ae22      	add	r6, sp, #136	; 0x88
 8008de8:	2500      	movs	r5, #0
 8008dea:	4545      	cmp	r5, r8
 8008dec:	dd13      	ble.n	8008e16 <__kernel_rem_pio2+0x7e>
 8008dee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80090b0 <__kernel_rem_pio2+0x318>
 8008df2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008df6:	2600      	movs	r6, #0
 8008df8:	9b04      	ldr	r3, [sp, #16]
 8008dfa:	429e      	cmp	r6, r3
 8008dfc:	dc32      	bgt.n	8008e64 <__kernel_rem_pio2+0xcc>
 8008dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e00:	9302      	str	r3, [sp, #8]
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	199d      	adds	r5, r3, r6
 8008e06:	ab22      	add	r3, sp, #136	; 0x88
 8008e08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e0c:	9306      	str	r3, [sp, #24]
 8008e0e:	ec59 8b18 	vmov	r8, r9, d8
 8008e12:	2700      	movs	r7, #0
 8008e14:	e01f      	b.n	8008e56 <__kernel_rem_pio2+0xbe>
 8008e16:	42ef      	cmn	r7, r5
 8008e18:	d407      	bmi.n	8008e2a <__kernel_rem_pio2+0x92>
 8008e1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008e1e:	f7f7 fb35 	bl	800048c <__aeabi_i2d>
 8008e22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008e26:	3501      	adds	r5, #1
 8008e28:	e7df      	b.n	8008dea <__kernel_rem_pio2+0x52>
 8008e2a:	ec51 0b18 	vmov	r0, r1, d8
 8008e2e:	e7f8      	b.n	8008e22 <__kernel_rem_pio2+0x8a>
 8008e30:	9906      	ldr	r1, [sp, #24]
 8008e32:	9d02      	ldr	r5, [sp, #8]
 8008e34:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008e38:	9106      	str	r1, [sp, #24]
 8008e3a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008e3e:	9502      	str	r5, [sp, #8]
 8008e40:	f7f7 fb8e 	bl	8000560 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7f7 f9d2 	bl	80001f4 <__adddf3>
 8008e50:	3701      	adds	r7, #1
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	9b07      	ldr	r3, [sp, #28]
 8008e58:	429f      	cmp	r7, r3
 8008e5a:	dde9      	ble.n	8008e30 <__kernel_rem_pio2+0x98>
 8008e5c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008e60:	3601      	adds	r6, #1
 8008e62:	e7c9      	b.n	8008df8 <__kernel_rem_pio2+0x60>
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	aa0e      	add	r2, sp, #56	; 0x38
 8008e68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008e70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008e74:	9c04      	ldr	r4, [sp, #16]
 8008e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e78:	ab9a      	add	r3, sp, #616	; 0x268
 8008e7a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008e7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e86:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008e8a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008e8e:	ab9a      	add	r3, sp, #616	; 0x268
 8008e90:	445b      	add	r3, fp
 8008e92:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008e96:	2500      	movs	r5, #0
 8008e98:	1b63      	subs	r3, r4, r5
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc78      	bgt.n	8008f90 <__kernel_rem_pio2+0x1f8>
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	ec49 8b10 	vmov	d0, r8, r9
 8008ea4:	f000 fc00 	bl	80096a8 <scalbn>
 8008ea8:	ec57 6b10 	vmov	r6, r7, d0
 8008eac:	2200      	movs	r2, #0
 8008eae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008eb2:	ee10 0a10 	vmov	r0, s0
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 fb52 	bl	8000560 <__aeabi_dmul>
 8008ebc:	ec41 0b10 	vmov	d0, r0, r1
 8008ec0:	f000 fb6e 	bl	80095a0 <floor>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	ec51 0b10 	vmov	r0, r1, d0
 8008eca:	4b7e      	ldr	r3, [pc, #504]	; (80090c4 <__kernel_rem_pio2+0x32c>)
 8008ecc:	f7f7 fb48 	bl	8000560 <__aeabi_dmul>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	f7f7 f98a 	bl	80001f0 <__aeabi_dsub>
 8008edc:	460f      	mov	r7, r1
 8008ede:	4606      	mov	r6, r0
 8008ee0:	f7f7 fdee 	bl	8000ac0 <__aeabi_d2iz>
 8008ee4:	9006      	str	r0, [sp, #24]
 8008ee6:	f7f7 fad1 	bl	800048c <__aeabi_i2d>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4630      	mov	r0, r6
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	f7f7 f97d 	bl	80001f0 <__aeabi_dsub>
 8008ef6:	f1ba 0f00 	cmp.w	sl, #0
 8008efa:	4606      	mov	r6, r0
 8008efc:	460f      	mov	r7, r1
 8008efe:	dd6c      	ble.n	8008fda <__kernel_rem_pio2+0x242>
 8008f00:	1e62      	subs	r2, r4, #1
 8008f02:	ab0e      	add	r3, sp, #56	; 0x38
 8008f04:	f1ca 0118 	rsb	r1, sl, #24
 8008f08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008f0c:	9d06      	ldr	r5, [sp, #24]
 8008f0e:	fa40 f301 	asr.w	r3, r0, r1
 8008f12:	441d      	add	r5, r3
 8008f14:	408b      	lsls	r3, r1
 8008f16:	1ac0      	subs	r0, r0, r3
 8008f18:	ab0e      	add	r3, sp, #56	; 0x38
 8008f1a:	9506      	str	r5, [sp, #24]
 8008f1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008f20:	f1ca 0317 	rsb	r3, sl, #23
 8008f24:	fa40 f303 	asr.w	r3, r0, r3
 8008f28:	9302      	str	r3, [sp, #8]
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dd62      	ble.n	8008ff6 <__kernel_rem_pio2+0x25e>
 8008f30:	9b06      	ldr	r3, [sp, #24]
 8008f32:	2200      	movs	r2, #0
 8008f34:	3301      	adds	r3, #1
 8008f36:	9306      	str	r3, [sp, #24]
 8008f38:	4615      	mov	r5, r2
 8008f3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008f3e:	4294      	cmp	r4, r2
 8008f40:	f300 8095 	bgt.w	800906e <__kernel_rem_pio2+0x2d6>
 8008f44:	f1ba 0f00 	cmp.w	sl, #0
 8008f48:	dd07      	ble.n	8008f5a <__kernel_rem_pio2+0x1c2>
 8008f4a:	f1ba 0f01 	cmp.w	sl, #1
 8008f4e:	f000 80a2 	beq.w	8009096 <__kernel_rem_pio2+0x2fe>
 8008f52:	f1ba 0f02 	cmp.w	sl, #2
 8008f56:	f000 80c1 	beq.w	80090dc <__kernel_rem_pio2+0x344>
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d14a      	bne.n	8008ff6 <__kernel_rem_pio2+0x25e>
 8008f60:	4632      	mov	r2, r6
 8008f62:	463b      	mov	r3, r7
 8008f64:	2000      	movs	r0, #0
 8008f66:	4958      	ldr	r1, [pc, #352]	; (80090c8 <__kernel_rem_pio2+0x330>)
 8008f68:	f7f7 f942 	bl	80001f0 <__aeabi_dsub>
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460f      	mov	r7, r1
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	d040      	beq.n	8008ff6 <__kernel_rem_pio2+0x25e>
 8008f74:	4650      	mov	r0, sl
 8008f76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80090b8 <__kernel_rem_pio2+0x320>
 8008f7a:	f000 fb95 	bl	80096a8 <scalbn>
 8008f7e:	4630      	mov	r0, r6
 8008f80:	4639      	mov	r1, r7
 8008f82:	ec53 2b10 	vmov	r2, r3, d0
 8008f86:	f7f7 f933 	bl	80001f0 <__aeabi_dsub>
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	e032      	b.n	8008ff6 <__kernel_rem_pio2+0x25e>
 8008f90:	2200      	movs	r2, #0
 8008f92:	4b4e      	ldr	r3, [pc, #312]	; (80090cc <__kernel_rem_pio2+0x334>)
 8008f94:	4640      	mov	r0, r8
 8008f96:	4649      	mov	r1, r9
 8008f98:	f7f7 fae2 	bl	8000560 <__aeabi_dmul>
 8008f9c:	f7f7 fd90 	bl	8000ac0 <__aeabi_d2iz>
 8008fa0:	f7f7 fa74 	bl	800048c <__aeabi_i2d>
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <__kernel_rem_pio2+0x338>)
 8008fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fac:	f7f7 fad8 	bl	8000560 <__aeabi_dmul>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 f91a 	bl	80001f0 <__aeabi_dsub>
 8008fbc:	f7f7 fd80 	bl	8000ac0 <__aeabi_d2iz>
 8008fc0:	ab0e      	add	r3, sp, #56	; 0x38
 8008fc2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008fc6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fce:	f7f7 f911 	bl	80001f4 <__adddf3>
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4689      	mov	r9, r1
 8008fd8:	e75e      	b.n	8008e98 <__kernel_rem_pio2+0x100>
 8008fda:	d105      	bne.n	8008fe8 <__kernel_rem_pio2+0x250>
 8008fdc:	1e63      	subs	r3, r4, #1
 8008fde:	aa0e      	add	r2, sp, #56	; 0x38
 8008fe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008fe4:	15c3      	asrs	r3, r0, #23
 8008fe6:	e79f      	b.n	8008f28 <__kernel_rem_pio2+0x190>
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <__kernel_rem_pio2+0x33c>)
 8008fec:	f7f7 fd3e 	bl	8000a6c <__aeabi_dcmpge>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d139      	bne.n	8009068 <__kernel_rem_pio2+0x2d0>
 8008ff4:	9002      	str	r0, [sp, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	f7f7 fd17 	bl	8000a30 <__aeabi_dcmpeq>
 8009002:	2800      	cmp	r0, #0
 8009004:	f000 80c7 	beq.w	8009196 <__kernel_rem_pio2+0x3fe>
 8009008:	1e65      	subs	r5, r4, #1
 800900a:	462b      	mov	r3, r5
 800900c:	2200      	movs	r2, #0
 800900e:	9904      	ldr	r1, [sp, #16]
 8009010:	428b      	cmp	r3, r1
 8009012:	da6a      	bge.n	80090ea <__kernel_rem_pio2+0x352>
 8009014:	2a00      	cmp	r2, #0
 8009016:	f000 8088 	beq.w	800912a <__kernel_rem_pio2+0x392>
 800901a:	ab0e      	add	r3, sp, #56	; 0x38
 800901c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009020:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80b4 	beq.w	8009192 <__kernel_rem_pio2+0x3fa>
 800902a:	4650      	mov	r0, sl
 800902c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80090b8 <__kernel_rem_pio2+0x320>
 8009030:	f000 fb3a 	bl	80096a8 <scalbn>
 8009034:	00ec      	lsls	r4, r5, #3
 8009036:	ab72      	add	r3, sp, #456	; 0x1c8
 8009038:	191e      	adds	r6, r3, r4
 800903a:	ec59 8b10 	vmov	r8, r9, d0
 800903e:	f106 0a08 	add.w	sl, r6, #8
 8009042:	462f      	mov	r7, r5
 8009044:	2f00      	cmp	r7, #0
 8009046:	f280 80df 	bge.w	8009208 <__kernel_rem_pio2+0x470>
 800904a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80090b0 <__kernel_rem_pio2+0x318>
 800904e:	f04f 0a00 	mov.w	sl, #0
 8009052:	eba5 030a 	sub.w	r3, r5, sl
 8009056:	2b00      	cmp	r3, #0
 8009058:	f2c0 810a 	blt.w	8009270 <__kernel_rem_pio2+0x4d8>
 800905c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80090d8 <__kernel_rem_pio2+0x340>
 8009060:	ec59 8b18 	vmov	r8, r9, d8
 8009064:	2700      	movs	r7, #0
 8009066:	e0f5      	b.n	8009254 <__kernel_rem_pio2+0x4bc>
 8009068:	2302      	movs	r3, #2
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	e760      	b.n	8008f30 <__kernel_rem_pio2+0x198>
 800906e:	ab0e      	add	r3, sp, #56	; 0x38
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	b94d      	cbnz	r5, 800908a <__kernel_rem_pio2+0x2f2>
 8009076:	b12b      	cbz	r3, 8009084 <__kernel_rem_pio2+0x2ec>
 8009078:	a80e      	add	r0, sp, #56	; 0x38
 800907a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800907e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009082:	2301      	movs	r3, #1
 8009084:	3201      	adds	r2, #1
 8009086:	461d      	mov	r5, r3
 8009088:	e759      	b.n	8008f3e <__kernel_rem_pio2+0x1a6>
 800908a:	a80e      	add	r0, sp, #56	; 0x38
 800908c:	1acb      	subs	r3, r1, r3
 800908e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009092:	462b      	mov	r3, r5
 8009094:	e7f6      	b.n	8009084 <__kernel_rem_pio2+0x2ec>
 8009096:	1e62      	subs	r2, r4, #1
 8009098:	ab0e      	add	r3, sp, #56	; 0x38
 800909a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80090a2:	a90e      	add	r1, sp, #56	; 0x38
 80090a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80090a8:	e757      	b.n	8008f5a <__kernel_rem_pio2+0x1c2>
 80090aa:	bf00      	nop
 80090ac:	f3af 8000 	nop.w
	...
 80090bc:	3ff00000 	.word	0x3ff00000
 80090c0:	08009c68 	.word	0x08009c68
 80090c4:	40200000 	.word	0x40200000
 80090c8:	3ff00000 	.word	0x3ff00000
 80090cc:	3e700000 	.word	0x3e700000
 80090d0:	41700000 	.word	0x41700000
 80090d4:	3fe00000 	.word	0x3fe00000
 80090d8:	08009c28 	.word	0x08009c28
 80090dc:	1e62      	subs	r2, r4, #1
 80090de:	ab0e      	add	r3, sp, #56	; 0x38
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80090e8:	e7db      	b.n	80090a2 <__kernel_rem_pio2+0x30a>
 80090ea:	a90e      	add	r1, sp, #56	; 0x38
 80090ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	430a      	orrs	r2, r1
 80090f4:	e78b      	b.n	800900e <__kernel_rem_pio2+0x276>
 80090f6:	3301      	adds	r3, #1
 80090f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d0fa      	beq.n	80090f6 <__kernel_rem_pio2+0x35e>
 8009100:	9a08      	ldr	r2, [sp, #32]
 8009102:	4422      	add	r2, r4
 8009104:	00d2      	lsls	r2, r2, #3
 8009106:	a922      	add	r1, sp, #136	; 0x88
 8009108:	18e3      	adds	r3, r4, r3
 800910a:	9206      	str	r2, [sp, #24]
 800910c:	440a      	add	r2, r1
 800910e:	9302      	str	r3, [sp, #8]
 8009110:	f10b 0108 	add.w	r1, fp, #8
 8009114:	f102 0308 	add.w	r3, r2, #8
 8009118:	1c66      	adds	r6, r4, #1
 800911a:	910a      	str	r1, [sp, #40]	; 0x28
 800911c:	2500      	movs	r5, #0
 800911e:	930d      	str	r3, [sp, #52]	; 0x34
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	42b3      	cmp	r3, r6
 8009124:	da04      	bge.n	8009130 <__kernel_rem_pio2+0x398>
 8009126:	461c      	mov	r4, r3
 8009128:	e6a6      	b.n	8008e78 <__kernel_rem_pio2+0xe0>
 800912a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800912c:	2301      	movs	r3, #1
 800912e:	e7e3      	b.n	80090f8 <__kernel_rem_pio2+0x360>
 8009130:	9b06      	ldr	r3, [sp, #24]
 8009132:	18ef      	adds	r7, r5, r3
 8009134:	ab22      	add	r3, sp, #136	; 0x88
 8009136:	441f      	add	r7, r3
 8009138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800913a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800913e:	f7f7 f9a5 	bl	800048c <__aeabi_i2d>
 8009142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009144:	461c      	mov	r4, r3
 8009146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009148:	e9c7 0100 	strd	r0, r1, [r7]
 800914c:	eb03 0b05 	add.w	fp, r3, r5
 8009150:	2700      	movs	r7, #0
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	f04f 0900 	mov.w	r9, #0
 800915a:	9b07      	ldr	r3, [sp, #28]
 800915c:	429f      	cmp	r7, r3
 800915e:	dd08      	ble.n	8009172 <__kernel_rem_pio2+0x3da>
 8009160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009162:	aa72      	add	r2, sp, #456	; 0x1c8
 8009164:	18eb      	adds	r3, r5, r3
 8009166:	4413      	add	r3, r2
 8009168:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800916c:	3601      	adds	r6, #1
 800916e:	3508      	adds	r5, #8
 8009170:	e7d6      	b.n	8009120 <__kernel_rem_pio2+0x388>
 8009172:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009176:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800917a:	f7f7 f9f1 	bl	8000560 <__aeabi_dmul>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4640      	mov	r0, r8
 8009184:	4649      	mov	r1, r9
 8009186:	f7f7 f835 	bl	80001f4 <__adddf3>
 800918a:	3701      	adds	r7, #1
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	e7e3      	b.n	800915a <__kernel_rem_pio2+0x3c2>
 8009192:	3d01      	subs	r5, #1
 8009194:	e741      	b.n	800901a <__kernel_rem_pio2+0x282>
 8009196:	f1ca 0000 	rsb	r0, sl, #0
 800919a:	ec47 6b10 	vmov	d0, r6, r7
 800919e:	f000 fa83 	bl	80096a8 <scalbn>
 80091a2:	ec57 6b10 	vmov	r6, r7, d0
 80091a6:	2200      	movs	r2, #0
 80091a8:	4b99      	ldr	r3, [pc, #612]	; (8009410 <__kernel_rem_pio2+0x678>)
 80091aa:	ee10 0a10 	vmov	r0, s0
 80091ae:	4639      	mov	r1, r7
 80091b0:	f7f7 fc5c 	bl	8000a6c <__aeabi_dcmpge>
 80091b4:	b1f8      	cbz	r0, 80091f6 <__kernel_rem_pio2+0x45e>
 80091b6:	2200      	movs	r2, #0
 80091b8:	4b96      	ldr	r3, [pc, #600]	; (8009414 <__kernel_rem_pio2+0x67c>)
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 f9cf 	bl	8000560 <__aeabi_dmul>
 80091c2:	f7f7 fc7d 	bl	8000ac0 <__aeabi_d2iz>
 80091c6:	4680      	mov	r8, r0
 80091c8:	f7f7 f960 	bl	800048c <__aeabi_i2d>
 80091cc:	2200      	movs	r2, #0
 80091ce:	4b90      	ldr	r3, [pc, #576]	; (8009410 <__kernel_rem_pio2+0x678>)
 80091d0:	f7f7 f9c6 	bl	8000560 <__aeabi_dmul>
 80091d4:	460b      	mov	r3, r1
 80091d6:	4602      	mov	r2, r0
 80091d8:	4639      	mov	r1, r7
 80091da:	4630      	mov	r0, r6
 80091dc:	f7f7 f808 	bl	80001f0 <__aeabi_dsub>
 80091e0:	f7f7 fc6e 	bl	8000ac0 <__aeabi_d2iz>
 80091e4:	1c65      	adds	r5, r4, #1
 80091e6:	ab0e      	add	r3, sp, #56	; 0x38
 80091e8:	f10a 0a18 	add.w	sl, sl, #24
 80091ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80091f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80091f4:	e719      	b.n	800902a <__kernel_rem_pio2+0x292>
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fc61 	bl	8000ac0 <__aeabi_d2iz>
 80091fe:	ab0e      	add	r3, sp, #56	; 0x38
 8009200:	4625      	mov	r5, r4
 8009202:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009206:	e710      	b.n	800902a <__kernel_rem_pio2+0x292>
 8009208:	ab0e      	add	r3, sp, #56	; 0x38
 800920a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800920e:	f7f7 f93d 	bl	800048c <__aeabi_i2d>
 8009212:	4642      	mov	r2, r8
 8009214:	464b      	mov	r3, r9
 8009216:	f7f7 f9a3 	bl	8000560 <__aeabi_dmul>
 800921a:	2200      	movs	r2, #0
 800921c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009220:	4b7c      	ldr	r3, [pc, #496]	; (8009414 <__kernel_rem_pio2+0x67c>)
 8009222:	4640      	mov	r0, r8
 8009224:	4649      	mov	r1, r9
 8009226:	f7f7 f99b 	bl	8000560 <__aeabi_dmul>
 800922a:	3f01      	subs	r7, #1
 800922c:	4680      	mov	r8, r0
 800922e:	4689      	mov	r9, r1
 8009230:	e708      	b.n	8009044 <__kernel_rem_pio2+0x2ac>
 8009232:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800923e:	f7f7 f98f 	bl	8000560 <__aeabi_dmul>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4640      	mov	r0, r8
 8009248:	4649      	mov	r1, r9
 800924a:	f7f6 ffd3 	bl	80001f4 <__adddf3>
 800924e:	3701      	adds	r7, #1
 8009250:	4680      	mov	r8, r0
 8009252:	4689      	mov	r9, r1
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	429f      	cmp	r7, r3
 8009258:	dc01      	bgt.n	800925e <__kernel_rem_pio2+0x4c6>
 800925a:	45ba      	cmp	sl, r7
 800925c:	dae9      	bge.n	8009232 <__kernel_rem_pio2+0x49a>
 800925e:	ab4a      	add	r3, sp, #296	; 0x128
 8009260:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009264:	e9c3 8900 	strd	r8, r9, [r3]
 8009268:	f10a 0a01 	add.w	sl, sl, #1
 800926c:	3e08      	subs	r6, #8
 800926e:	e6f0      	b.n	8009052 <__kernel_rem_pio2+0x2ba>
 8009270:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009272:	2b03      	cmp	r3, #3
 8009274:	d85b      	bhi.n	800932e <__kernel_rem_pio2+0x596>
 8009276:	e8df f003 	tbb	[pc, r3]
 800927a:	264a      	.short	0x264a
 800927c:	0226      	.short	0x0226
 800927e:	ab9a      	add	r3, sp, #616	; 0x268
 8009280:	441c      	add	r4, r3
 8009282:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009286:	46a2      	mov	sl, r4
 8009288:	46ab      	mov	fp, r5
 800928a:	f1bb 0f00 	cmp.w	fp, #0
 800928e:	dc6c      	bgt.n	800936a <__kernel_rem_pio2+0x5d2>
 8009290:	46a2      	mov	sl, r4
 8009292:	46ab      	mov	fp, r5
 8009294:	f1bb 0f01 	cmp.w	fp, #1
 8009298:	f300 8086 	bgt.w	80093a8 <__kernel_rem_pio2+0x610>
 800929c:	2000      	movs	r0, #0
 800929e:	2100      	movs	r1, #0
 80092a0:	2d01      	cmp	r5, #1
 80092a2:	f300 80a0 	bgt.w	80093e6 <__kernel_rem_pio2+0x64e>
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80092ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 809e 	bne.w	80093f2 <__kernel_rem_pio2+0x65a>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	e9c3 7800 	strd	r7, r8, [r3]
 80092bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80092c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80092c4:	e033      	b.n	800932e <__kernel_rem_pio2+0x596>
 80092c6:	3408      	adds	r4, #8
 80092c8:	ab4a      	add	r3, sp, #296	; 0x128
 80092ca:	441c      	add	r4, r3
 80092cc:	462e      	mov	r6, r5
 80092ce:	2000      	movs	r0, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	2e00      	cmp	r6, #0
 80092d4:	da3a      	bge.n	800934c <__kernel_rem_pio2+0x5b4>
 80092d6:	9b02      	ldr	r3, [sp, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d03d      	beq.n	8009358 <__kernel_rem_pio2+0x5c0>
 80092dc:	4602      	mov	r2, r0
 80092de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092e2:	9c01      	ldr	r4, [sp, #4]
 80092e4:	e9c4 2300 	strd	r2, r3, [r4]
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80092f0:	f7f6 ff7e 	bl	80001f0 <__aeabi_dsub>
 80092f4:	ae4c      	add	r6, sp, #304	; 0x130
 80092f6:	2401      	movs	r4, #1
 80092f8:	42a5      	cmp	r5, r4
 80092fa:	da30      	bge.n	800935e <__kernel_rem_pio2+0x5c6>
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	b113      	cbz	r3, 8009306 <__kernel_rem_pio2+0x56e>
 8009300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009304:	4619      	mov	r1, r3
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800930c:	e00f      	b.n	800932e <__kernel_rem_pio2+0x596>
 800930e:	ab9a      	add	r3, sp, #616	; 0x268
 8009310:	441c      	add	r4, r3
 8009312:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009316:	2000      	movs	r0, #0
 8009318:	2100      	movs	r1, #0
 800931a:	2d00      	cmp	r5, #0
 800931c:	da10      	bge.n	8009340 <__kernel_rem_pio2+0x5a8>
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	b113      	cbz	r3, 8009328 <__kernel_rem_pio2+0x590>
 8009322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009326:	4619      	mov	r1, r3
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	e9c3 0100 	strd	r0, r1, [r3]
 800932e:	9b06      	ldr	r3, [sp, #24]
 8009330:	f003 0007 	and.w	r0, r3, #7
 8009334:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009338:	ecbd 8b02 	vpop	{d8}
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009344:	f7f6 ff56 	bl	80001f4 <__adddf3>
 8009348:	3d01      	subs	r5, #1
 800934a:	e7e6      	b.n	800931a <__kernel_rem_pio2+0x582>
 800934c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009350:	f7f6 ff50 	bl	80001f4 <__adddf3>
 8009354:	3e01      	subs	r6, #1
 8009356:	e7bc      	b.n	80092d2 <__kernel_rem_pio2+0x53a>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e7c1      	b.n	80092e2 <__kernel_rem_pio2+0x54a>
 800935e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009362:	f7f6 ff47 	bl	80001f4 <__adddf3>
 8009366:	3401      	adds	r4, #1
 8009368:	e7c6      	b.n	80092f8 <__kernel_rem_pio2+0x560>
 800936a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800936e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009372:	4640      	mov	r0, r8
 8009374:	ec53 2b17 	vmov	r2, r3, d7
 8009378:	4649      	mov	r1, r9
 800937a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800937e:	f7f6 ff39 	bl	80001f4 <__adddf3>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f6 ff2f 	bl	80001f0 <__aeabi_dsub>
 8009392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009396:	f7f6 ff2d 	bl	80001f4 <__adddf3>
 800939a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800939e:	e9ca 0100 	strd	r0, r1, [sl]
 80093a2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80093a6:	e770      	b.n	800928a <__kernel_rem_pio2+0x4f2>
 80093a8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80093ac:	ed3a 7b02 	vldmdb	sl!, {d7}
 80093b0:	4630      	mov	r0, r6
 80093b2:	ec53 2b17 	vmov	r2, r3, d7
 80093b6:	4639      	mov	r1, r7
 80093b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093bc:	f7f6 ff1a 	bl	80001f4 <__adddf3>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4680      	mov	r8, r0
 80093c6:	4689      	mov	r9, r1
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f6 ff10 	bl	80001f0 <__aeabi_dsub>
 80093d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d4:	f7f6 ff0e 	bl	80001f4 <__adddf3>
 80093d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093dc:	e9ca 0100 	strd	r0, r1, [sl]
 80093e0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80093e4:	e756      	b.n	8009294 <__kernel_rem_pio2+0x4fc>
 80093e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80093ea:	f7f6 ff03 	bl	80001f4 <__adddf3>
 80093ee:	3d01      	subs	r5, #1
 80093f0:	e756      	b.n	80092a0 <__kernel_rem_pio2+0x508>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	9a01      	ldr	r2, [sp, #4]
 80093f6:	601f      	str	r7, [r3, #0]
 80093f8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80093fc:	605c      	str	r4, [r3, #4]
 80093fe:	609d      	str	r5, [r3, #8]
 8009400:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009404:	60d3      	str	r3, [r2, #12]
 8009406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800940a:	6110      	str	r0, [r2, #16]
 800940c:	6153      	str	r3, [r2, #20]
 800940e:	e78e      	b.n	800932e <__kernel_rem_pio2+0x596>
 8009410:	41700000 	.word	0x41700000
 8009414:	3e700000 	.word	0x3e700000

08009418 <__kernel_sin>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	ec55 4b10 	vmov	r4, r5, d0
 8009420:	b085      	sub	sp, #20
 8009422:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009426:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800942a:	ed8d 1b00 	vstr	d1, [sp]
 800942e:	9002      	str	r0, [sp, #8]
 8009430:	da06      	bge.n	8009440 <__kernel_sin+0x28>
 8009432:	ee10 0a10 	vmov	r0, s0
 8009436:	4629      	mov	r1, r5
 8009438:	f7f7 fb42 	bl	8000ac0 <__aeabi_d2iz>
 800943c:	2800      	cmp	r0, #0
 800943e:	d051      	beq.n	80094e4 <__kernel_sin+0xcc>
 8009440:	4622      	mov	r2, r4
 8009442:	462b      	mov	r3, r5
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f7 f88a 	bl	8000560 <__aeabi_dmul>
 800944c:	4682      	mov	sl, r0
 800944e:	468b      	mov	fp, r1
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f7 f882 	bl	8000560 <__aeabi_dmul>
 800945c:	a341      	add	r3, pc, #260	; (adr r3, 8009564 <__kernel_sin+0x14c>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	4680      	mov	r8, r0
 8009464:	4689      	mov	r9, r1
 8009466:	4650      	mov	r0, sl
 8009468:	4659      	mov	r1, fp
 800946a:	f7f7 f879 	bl	8000560 <__aeabi_dmul>
 800946e:	a33f      	add	r3, pc, #252	; (adr r3, 800956c <__kernel_sin+0x154>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f6 febc 	bl	80001f0 <__aeabi_dsub>
 8009478:	4652      	mov	r2, sl
 800947a:	465b      	mov	r3, fp
 800947c:	f7f7 f870 	bl	8000560 <__aeabi_dmul>
 8009480:	a33c      	add	r3, pc, #240	; (adr r3, 8009574 <__kernel_sin+0x15c>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f6 feb5 	bl	80001f4 <__adddf3>
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	f7f7 f867 	bl	8000560 <__aeabi_dmul>
 8009492:	a33a      	add	r3, pc, #232	; (adr r3, 800957c <__kernel_sin+0x164>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f6 feaa 	bl	80001f0 <__aeabi_dsub>
 800949c:	4652      	mov	r2, sl
 800949e:	465b      	mov	r3, fp
 80094a0:	f7f7 f85e 	bl	8000560 <__aeabi_dmul>
 80094a4:	a337      	add	r3, pc, #220	; (adr r3, 8009584 <__kernel_sin+0x16c>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f6 fea3 	bl	80001f4 <__adddf3>
 80094ae:	9b02      	ldr	r3, [sp, #8]
 80094b0:	4606      	mov	r6, r0
 80094b2:	460f      	mov	r7, r1
 80094b4:	b9db      	cbnz	r3, 80094ee <__kernel_sin+0xd6>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4650      	mov	r0, sl
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f7 f84f 	bl	8000560 <__aeabi_dmul>
 80094c2:	a325      	add	r3, pc, #148	; (adr r3, 8009558 <__kernel_sin+0x140>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f6 fe92 	bl	80001f0 <__aeabi_dsub>
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	f7f7 f846 	bl	8000560 <__aeabi_dmul>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f6 fe8a 	bl	80001f4 <__adddf3>
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	ec45 4b10 	vmov	d0, r4, r5
 80094e8:	b005      	add	sp, #20
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	2200      	movs	r2, #0
 80094f0:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <__kernel_sin+0x148>)
 80094f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f6:	f7f7 f833 	bl	8000560 <__aeabi_dmul>
 80094fa:	4632      	mov	r2, r6
 80094fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009500:	463b      	mov	r3, r7
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f7 f82b 	bl	8000560 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009512:	f7f6 fe6d 	bl	80001f0 <__aeabi_dsub>
 8009516:	4652      	mov	r2, sl
 8009518:	465b      	mov	r3, fp
 800951a:	f7f7 f821 	bl	8000560 <__aeabi_dmul>
 800951e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009522:	f7f6 fe65 	bl	80001f0 <__aeabi_dsub>
 8009526:	a30c      	add	r3, pc, #48	; (adr r3, 8009558 <__kernel_sin+0x140>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f7 f814 	bl	8000560 <__aeabi_dmul>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4630      	mov	r0, r6
 800953e:	4639      	mov	r1, r7
 8009540:	f7f6 fe58 	bl	80001f4 <__adddf3>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 fe50 	bl	80001f0 <__aeabi_dsub>
 8009550:	e7c6      	b.n	80094e0 <__kernel_sin+0xc8>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	55555549 	.word	0x55555549
 800955c:	3fc55555 	.word	0x3fc55555
 8009560:	3fe00000 	.word	0x3fe00000
 8009564:	5acfd57c 	.word	0x5acfd57c
 8009568:	3de5d93a 	.word	0x3de5d93a
 800956c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009570:	3e5ae5e6 	.word	0x3e5ae5e6
 8009574:	57b1fe7d 	.word	0x57b1fe7d
 8009578:	3ec71de3 	.word	0x3ec71de3
 800957c:	19c161d5 	.word	0x19c161d5
 8009580:	3f2a01a0 	.word	0x3f2a01a0
 8009584:	1110f8a6 	.word	0x1110f8a6
 8009588:	3f811111 	.word	0x3f811111

0800958c <fabs>:
 800958c:	ec51 0b10 	vmov	r0, r1, d0
 8009590:	ee10 2a10 	vmov	r2, s0
 8009594:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009598:	ec43 2b10 	vmov	d0, r2, r3
 800959c:	4770      	bx	lr
	...

080095a0 <floor>:
 80095a0:	ec51 0b10 	vmov	r0, r1, d0
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80095ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80095b0:	2e13      	cmp	r6, #19
 80095b2:	460c      	mov	r4, r1
 80095b4:	ee10 5a10 	vmov	r5, s0
 80095b8:	4680      	mov	r8, r0
 80095ba:	dc34      	bgt.n	8009626 <floor+0x86>
 80095bc:	2e00      	cmp	r6, #0
 80095be:	da16      	bge.n	80095ee <floor+0x4e>
 80095c0:	a335      	add	r3, pc, #212	; (adr r3, 8009698 <floor+0xf8>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f6 fe15 	bl	80001f4 <__adddf3>
 80095ca:	2200      	movs	r2, #0
 80095cc:	2300      	movs	r3, #0
 80095ce:	f7f7 fa57 	bl	8000a80 <__aeabi_dcmpgt>
 80095d2:	b148      	cbz	r0, 80095e8 <floor+0x48>
 80095d4:	2c00      	cmp	r4, #0
 80095d6:	da59      	bge.n	800968c <floor+0xec>
 80095d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80095dc:	4a30      	ldr	r2, [pc, #192]	; (80096a0 <floor+0x100>)
 80095de:	432b      	orrs	r3, r5
 80095e0:	2500      	movs	r5, #0
 80095e2:	42ab      	cmp	r3, r5
 80095e4:	bf18      	it	ne
 80095e6:	4614      	movne	r4, r2
 80095e8:	4621      	mov	r1, r4
 80095ea:	4628      	mov	r0, r5
 80095ec:	e025      	b.n	800963a <floor+0x9a>
 80095ee:	4f2d      	ldr	r7, [pc, #180]	; (80096a4 <floor+0x104>)
 80095f0:	4137      	asrs	r7, r6
 80095f2:	ea01 0307 	and.w	r3, r1, r7
 80095f6:	4303      	orrs	r3, r0
 80095f8:	d01f      	beq.n	800963a <floor+0x9a>
 80095fa:	a327      	add	r3, pc, #156	; (adr r3, 8009698 <floor+0xf8>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fdf8 	bl	80001f4 <__adddf3>
 8009604:	2200      	movs	r2, #0
 8009606:	2300      	movs	r3, #0
 8009608:	f7f7 fa3a 	bl	8000a80 <__aeabi_dcmpgt>
 800960c:	2800      	cmp	r0, #0
 800960e:	d0eb      	beq.n	80095e8 <floor+0x48>
 8009610:	2c00      	cmp	r4, #0
 8009612:	bfbe      	ittt	lt
 8009614:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009618:	fa43 f606 	asrlt.w	r6, r3, r6
 800961c:	19a4      	addlt	r4, r4, r6
 800961e:	ea24 0407 	bic.w	r4, r4, r7
 8009622:	2500      	movs	r5, #0
 8009624:	e7e0      	b.n	80095e8 <floor+0x48>
 8009626:	2e33      	cmp	r6, #51	; 0x33
 8009628:	dd0b      	ble.n	8009642 <floor+0xa2>
 800962a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800962e:	d104      	bne.n	800963a <floor+0x9a>
 8009630:	ee10 2a10 	vmov	r2, s0
 8009634:	460b      	mov	r3, r1
 8009636:	f7f6 fddd 	bl	80001f4 <__adddf3>
 800963a:	ec41 0b10 	vmov	d0, r0, r1
 800963e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009642:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009646:	f04f 33ff 	mov.w	r3, #4294967295
 800964a:	fa23 f707 	lsr.w	r7, r3, r7
 800964e:	4207      	tst	r7, r0
 8009650:	d0f3      	beq.n	800963a <floor+0x9a>
 8009652:	a311      	add	r3, pc, #68	; (adr r3, 8009698 <floor+0xf8>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f6 fdcc 	bl	80001f4 <__adddf3>
 800965c:	2200      	movs	r2, #0
 800965e:	2300      	movs	r3, #0
 8009660:	f7f7 fa0e 	bl	8000a80 <__aeabi_dcmpgt>
 8009664:	2800      	cmp	r0, #0
 8009666:	d0bf      	beq.n	80095e8 <floor+0x48>
 8009668:	2c00      	cmp	r4, #0
 800966a:	da02      	bge.n	8009672 <floor+0xd2>
 800966c:	2e14      	cmp	r6, #20
 800966e:	d103      	bne.n	8009678 <floor+0xd8>
 8009670:	3401      	adds	r4, #1
 8009672:	ea25 0507 	bic.w	r5, r5, r7
 8009676:	e7b7      	b.n	80095e8 <floor+0x48>
 8009678:	2301      	movs	r3, #1
 800967a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800967e:	fa03 f606 	lsl.w	r6, r3, r6
 8009682:	4435      	add	r5, r6
 8009684:	4545      	cmp	r5, r8
 8009686:	bf38      	it	cc
 8009688:	18e4      	addcc	r4, r4, r3
 800968a:	e7f2      	b.n	8009672 <floor+0xd2>
 800968c:	2500      	movs	r5, #0
 800968e:	462c      	mov	r4, r5
 8009690:	e7aa      	b.n	80095e8 <floor+0x48>
 8009692:	bf00      	nop
 8009694:	f3af 8000 	nop.w
 8009698:	8800759c 	.word	0x8800759c
 800969c:	7e37e43c 	.word	0x7e37e43c
 80096a0:	bff00000 	.word	0xbff00000
 80096a4:	000fffff 	.word	0x000fffff

080096a8 <scalbn>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	ec55 4b10 	vmov	r4, r5, d0
 80096ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80096b2:	4606      	mov	r6, r0
 80096b4:	462b      	mov	r3, r5
 80096b6:	b9aa      	cbnz	r2, 80096e4 <scalbn+0x3c>
 80096b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80096bc:	4323      	orrs	r3, r4
 80096be:	d03b      	beq.n	8009738 <scalbn+0x90>
 80096c0:	4b31      	ldr	r3, [pc, #196]	; (8009788 <scalbn+0xe0>)
 80096c2:	4629      	mov	r1, r5
 80096c4:	2200      	movs	r2, #0
 80096c6:	ee10 0a10 	vmov	r0, s0
 80096ca:	f7f6 ff49 	bl	8000560 <__aeabi_dmul>
 80096ce:	4b2f      	ldr	r3, [pc, #188]	; (800978c <scalbn+0xe4>)
 80096d0:	429e      	cmp	r6, r3
 80096d2:	4604      	mov	r4, r0
 80096d4:	460d      	mov	r5, r1
 80096d6:	da12      	bge.n	80096fe <scalbn+0x56>
 80096d8:	a327      	add	r3, pc, #156	; (adr r3, 8009778 <scalbn+0xd0>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f7f6 ff3f 	bl	8000560 <__aeabi_dmul>
 80096e2:	e009      	b.n	80096f8 <scalbn+0x50>
 80096e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096e8:	428a      	cmp	r2, r1
 80096ea:	d10c      	bne.n	8009706 <scalbn+0x5e>
 80096ec:	ee10 2a10 	vmov	r2, s0
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f6 fd7e 	bl	80001f4 <__adddf3>
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	e01c      	b.n	8009738 <scalbn+0x90>
 80096fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009702:	460b      	mov	r3, r1
 8009704:	3a36      	subs	r2, #54	; 0x36
 8009706:	4432      	add	r2, r6
 8009708:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800970c:	428a      	cmp	r2, r1
 800970e:	dd0b      	ble.n	8009728 <scalbn+0x80>
 8009710:	ec45 4b11 	vmov	d1, r4, r5
 8009714:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009780 <scalbn+0xd8>
 8009718:	f000 f83c 	bl	8009794 <copysign>
 800971c:	a318      	add	r3, pc, #96	; (adr r3, 8009780 <scalbn+0xd8>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	ec51 0b10 	vmov	r0, r1, d0
 8009726:	e7da      	b.n	80096de <scalbn+0x36>
 8009728:	2a00      	cmp	r2, #0
 800972a:	dd08      	ble.n	800973e <scalbn+0x96>
 800972c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009730:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009734:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009738:	ec45 4b10 	vmov	d0, r4, r5
 800973c:	bd70      	pop	{r4, r5, r6, pc}
 800973e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009742:	da0d      	bge.n	8009760 <scalbn+0xb8>
 8009744:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009748:	429e      	cmp	r6, r3
 800974a:	ec45 4b11 	vmov	d1, r4, r5
 800974e:	dce1      	bgt.n	8009714 <scalbn+0x6c>
 8009750:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009778 <scalbn+0xd0>
 8009754:	f000 f81e 	bl	8009794 <copysign>
 8009758:	a307      	add	r3, pc, #28	; (adr r3, 8009778 <scalbn+0xd0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	e7e0      	b.n	8009722 <scalbn+0x7a>
 8009760:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009764:	3236      	adds	r2, #54	; 0x36
 8009766:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800976a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800976e:	4620      	mov	r0, r4
 8009770:	4629      	mov	r1, r5
 8009772:	2200      	movs	r2, #0
 8009774:	4b06      	ldr	r3, [pc, #24]	; (8009790 <scalbn+0xe8>)
 8009776:	e7b2      	b.n	80096de <scalbn+0x36>
 8009778:	c2f8f359 	.word	0xc2f8f359
 800977c:	01a56e1f 	.word	0x01a56e1f
 8009780:	8800759c 	.word	0x8800759c
 8009784:	7e37e43c 	.word	0x7e37e43c
 8009788:	43500000 	.word	0x43500000
 800978c:	ffff3cb0 	.word	0xffff3cb0
 8009790:	3c900000 	.word	0x3c900000

08009794 <copysign>:
 8009794:	ec51 0b10 	vmov	r0, r1, d0
 8009798:	ee11 0a90 	vmov	r0, s3
 800979c:	ee10 2a10 	vmov	r2, s0
 80097a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80097a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80097a8:	ea41 0300 	orr.w	r3, r1, r0
 80097ac:	ec43 2b10 	vmov	d0, r2, r3
 80097b0:	4770      	bx	lr
	...

080097b4 <_init>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr

080097c0 <_fini>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr
